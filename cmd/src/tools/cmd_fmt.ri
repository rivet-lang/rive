// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{ flag, console, fs.Directory };
import rivet/{ ast, fmt, prefs, utils, parser };

var fmt_desc := "Formats the given Rivet source files or recursively formats all files in the
directory, then prints their formatted source to stdout.";

pub func cmd_fmt(args: [:]string) -> ! {
    fp := flag.FlagParser.new(args);
    fp.set_application_name("rivet fmt");
    fp.set_arguments_description("[FILES|DIRECTORIES]");
    fp.set_application_short_description(fmt_desc);
    fp.add_usage_example("file.ri");
    fp.add_usage_example("directory/");
    fp.add_usage_example("-w file.ri");
    write_to_file := fp.bool_flag(
        "write-to-file", 'w', "Write result to source file(s) instead of to stdout.") ?? false;
    remaining := fp.finalize() catch |err_fp| {
        console.ewriteln(fp.usage());
        utils.error(err_fp.to_string())
    };
    if remaining.len == 0 {
        console.ewriteln(fp.usage());
        utils.error("no input received");
    }
    for input in remaining {
        prefs_ := +mut prefs.Prefs(is_fmt: true, hide_all_warns: true);
        prefs_.set_input(input);
        prefs_.load_module_info()!;
        env := ast.Env.new(prefs_);
        files := Directory.walk(input, ".ri")!;
        formatter := +mut fmt.Formatter(prefs_, write_to_file: write_to_file);
        parser_ := +mut parser.Parser(env: env);
        for source_file in parser_.parse_module_files(files) {
            utils.info("Formatting file `{}`...", source_file.path);
            output := formatter.format(source_file);
            console.writeln(output);
        }
    }
}
