// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/flag;
import std/semver;
import std/strings;
import std/console;
import std/process;
import std/fs.{ Path, Directory, self };

import rivet/build;
import rivet/utils;

import ./templates;

var newDescription := "Sets up a new Rivet project and performs `git init` (if `git` is installed
on the system).";

var newDescription2 := "If [NAME] is given, the project will be setup in a new directory with that
name, and that name will be added to the `project.json` file. If no name is
given, the user will be prompted for a name.";

var initDescription := "If no `project.json` file exists, one will be created.
If the current directory is not already controlled with `git`, will perform
`git init` (if `git` is installed on the system).";

var availableTemplates := "Available templates:
   bin          A simple binary project (default).
   lib          A simple library project.";

pub func cmd_new(args: []string, is_init: bool) -> ! {
    mut template := "";
    mut fp := flag.FlagParser.new(args);
    if is_init {
        fp.set_limit_free_args_to_exactly(0)!;
    } else {
        fp.set_limit_free_args(0, 1)!;
    }
    fp.set_application_name(if is_init { "rivet init" } else { "rivet new" });
    fp.set_arguments_description("[NAME]");
    if is_init {
        fp.set_application_short_description(initDescription);
    } else {
        fp.set_application_short_description(newDescription);
        fp.add_description(newDescription2);
        fp.add_footer(availableTemplates);
        fp.add_usage_example("-t lib");
        fp.add_usage_example("my_project_name -t lib");
        template = fp.string_flag(
            "template", 't', "Template used by the project (default: bin)."
        ) ?? "bin";
    }
    init_git := fp.bool_flag(
        "init-git", 0, "Initialize a `git` repo (default: true)."
    ) ?? true;
    remaining := fp.finalize() catch |err_fp| {
        console.ewriteln(fp.usage());
        utils.error(err_fp.to_string())
    };

    mut project := build.Project();
    if is_init {
        project.name = Path.base_name(process.get_cwd()!);
    } else {
        if remaining.len == 1 {
            project.name = remaining[0];
        } else if name := readln("Name:") {
            project.name = name.trim_space();
        } else {
            utils.error("project name cannot be empty");
        }
        if description := readln("Description (optional):") {
            project.description = description;
        }
        if version := readln("Version (default: 0.1.0):") {
            project.version = semver.Version.from_string(version) catch |err| {
                utils.error(err.to_string())
            };
        } else {
            project.version = semver.Version.build(0, 1, 0);
        }
        if license := readln("License (optional):") {
            project.license = license;
        }
        if authors := readln("Authors (optional):") {
            project.authors = authors.split(",");
        }
        if repo_url := readln("Repository URL (optional):") {
            project.repository_url = repo_url;
        }
    }
    check_project(project);

    if is_init {
        utils.info("initializing project `{}`...", project.name);
        create_project_json(project, true)!;
        create_editorconfig_file(project.name, true)!;
        if init_git {
            create_gitattributes_file(project.name, true)!;
            create_git_repo(".")!;
        }
        if !Path.exists("src") {
            Directory.make("src")!;
            utils.info("creating `src/main.ri` file...");
            fs.write_file(Path.join("src", "main.ri")!, templates.mainFile)!;
        }
        utils.info("project `{}` initialized successfully!", project.name);
    } else {
        utils.info("creating project `{}`...", project.name);
        match template {
            "bin", "lib" -> {
                utils.info("using the template `{}`...", template);
                Directory.make(project.name)!;
                create_project_json(project, false)!;
                create_editorconfig_file(project.name, false)!;
                if init_git {
                    create_gitattributes_file(project.name, false)!;
                    create_git_repo(project.name)!;
                }
                src_dir := Path.join(project.name, "src")!;
                Directory.make(src_dir)!;
                if template == "bin" {
                    utils.info("creating `src/main.ri` file...");
                    fs.write_file(Path.join(src_dir, "main.ri")!, templates.mainFile)!;
                } else {
                    utils.info("creating `src/lib.ri` file...");
                    fs.write_file(Path.join(src_dir, "lib.ri")!, templates.libFile)!;
                }
            },
            else -> utils.error(
                "unknown template `{}`, use `-h` for see the list of templates", template
            )
        }
        utils.info("project `{}` created successfully!", project.name);
    }
}

func check_project(mut project: build.Project) {
    if project.name.is_empty() {
        utils.error("project name cannot be empty");
    }
    if project.name.contains(" ") {
        project.name = project.name.replace(" ", "_");
        utils.warn(
            "project name cannot contain spaces, "
            "the name will be changed to `{}`", project.name
        );
    }
    if project.name.contains("-") {
        project.name = project.name.replace("-", "_");
        utils.warn(
            "project name should not contain hyphens, "
            "the name will be changed to `{}`", project.name
        );
    }
    if Path.exists(project.name) {
        utils.error("`{}` already exists", project.name);
    }
}

func create_project_json(project: build.Project, is_init: bool) -> ! {
    path_ := if is_init { "project.json" } else { Path.join(project.name, "project.json")! };
    if !Path.exists(path_) {
        utils.info("creating `project.json` file...");
        project_ri := generate_project_json(project);
        fs.write_file(path_, project_ri)!;
    }
}

func generate_project_json(project: build.Project) -> string {
    mut sb := strings.Builder.new();
    sb.writeln("{");
    sb.write_fmt("    \"name\": \"{}\"", project.name);
    if !project.description.is_empty() {
        sb.writeln(",");
        sb.write_fmt("    \"description\": \"{}\"", project.description);
    }
    sb.writeln(",");
    sb.write_fmt("    \"version\": \"{}\"", project.version);
    if !project.license.is_empty() {
        sb.writeln(",");
        sb.write_fmt("    \"license\": \"{}\"", project.license);
    }
    if !project.authors.is_empty() {
        sb.writeln(",");
        sb.write_string("    \"authors\": [");
        for i, author in project.authors {
            sb.write_string("\"");
            sb.write_string(author);
            sb.write_string("\"");
            if i < project.authors.len - 1 {
                sb.write_string(", ");
            }
        }
        sb.write_string("]");
    }
    if !project.repository_url.is_empty() {
        sb.writeln(",");
        sb.write_fmt("    \"repository_url\": \"{}\"", project.repository_url);
    }
    sb.writeln("\n}");
    return sb.to_string();
}

func create_gitattributes_file(name: string, is_init: bool) -> ! {
    path_ := if is_init { ".gitattributes" } else { Path.join(name, ".gitattributes")! };
    if Path.exists(path_) {
        return;
    }
    fs.write_file(path_, templates.gitattributesFile)!;
}

func create_editorconfig_file(name: string, is_init: bool) -> ! {
    path_ := if is_init { ".editorconfig" } else { Path.join(name, ".editorconfig")! };
    if Path.exists(path_) {
        return;
    }
    fs.write_file(path_, templates.editorConfigFile)!;
}

func create_git_repo(dir: string) -> ! {
    if !Path.is_directory(Path.join(dir, ".git")!) {
        utils.info("initializing git repo...");
        if res := process.execute("git init {}".fmt(dir)) {
            if res.exit_code != 0 {
                utils.error("unable to create git repo");
            }
        } else {
            utils.error("unable to create git repo");
        }
    }
    gitignore_path := "{}/.gitignore".fmt(dir);
    if !Path.exists(gitignore_path) {
        utils.info("creating `.gitignore` file...");
        fs.write_file(gitignore_path, templates.gitignoreFile.fmt(dir))!;
    }
}
