// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;

#[boxed]
pub struct ErrnoError < Throwable {
    pub msg: string;
    pub code: int32;

    pub func to_string(self) -> string {
        return "errno: {} (code: {})".fmt(self.msg, self.code);
    }
}

#[inline]
pub func errno() -> int32 {
    $if _LINUX_ {
        return unsafe { libc.__errno_location()?.* };
    } else {
        return unsafe { libc._errno().* };
    }
}

#[inline]
pub func errno_msg(code: int32 := errno()) -> string {
    unsafe {
        return if s := libc.strerror(code) {
            string.from_raw(s)
        } else {
            ""
        };
    }
}

#[inline]
pub func last_errno_error() -> ErrnoError {
    return ErrnoError(errno_msg(), errno());
}
