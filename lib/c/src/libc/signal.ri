// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

// TODO(StunxFS): replace the argument type of `SignalHandler` from
// `int32` to an enum that enumerates all possible signals.

import { pid_t, uid_t } from ../ctypes;

pub alias SignalHandler := func(int32, &mut siginfo_t, rawptr);

#if _LINUX_
    pub const SA_ONSTACK := 0x08000000;
    pub const SA_SIGINFO := 0x00000004;
    pub const SA_NOCLDWAIT := 0x00000002;

    pub const SIGHUP := 0x1;
    pub const SIGINT := 0x2;
    pub const SIGQUIT := 0x3;
    pub const SIGILL := 0x4;
    pub const SIGTRAP := 0x5;
    pub const SIGABRT := 0x6;
    pub const SIGEMT := 0x7;
    pub const SIGFPE := 0x8;
    pub const SIGKILL := 0x9;
    pub const SIGBUS := 0xA;
    pub const SIGSEGV := 0xB;
    pub const SIGSYS := 0xc;
    pub const SIGPIPE := 0xd;
    pub const SIGALRM := 0xe;
    pub const SIGTERM := 0xF;
    pub const SIGURG := 0x10;
    pub const SIGSTOP := 0x11;
    pub const SIGTSTP := 0x12;
    pub const SIGCONT := 0x13;
    pub const SIGCHLD := 0x14;
    pub const SIGTTIN := 0x15;
    pub const SIGTTOU := 0x16;
    pub const SIGIO := 0x17;
    pub const SIGXCPU := 0x18;
    pub const SIGXFSZ := 0x19;
    pub const SIGVTALRM := 0x1a;
    pub const SIGPROF := 0x1b;
    pub const SIGWINCH := 0x1c;
    pub const SIGINFO := 0x1d;
    pub const SIGUSR1 := 0x1e;
    pub const SIGUSR2 := 0x1f;

    pub const SEGV_MAPERR := 0x1;
    pub const SEGV_ACCERR := 0x2;

    pub struct sigset_t {
        pub __val: [#if _X86_ 32 #else 16 #endif]uint32;
    }

    pub struct sigval {
        pub sival_ptr: rawptr;
    }

    pub struct siginfo_t {
        pub si_signo: int32; // signal number
        pub si_errno: int32; // errno association
        pub si_code: int32; // signal code
        pub si_pid: pid_t; // sending process
        pub si_uid: uid_t; // sender's ruid
        pub si_status: int32; // exit value
        pub si_addr: rawptr; // faulting instruction
        pub si_value: sigval; // signal value
        pub si_band: int64; // band event for SIGPOLL
        pub _: [7]uint64; // reserved for future use
    }

    pub struct sigaction_t {
        pub sa_sigaction: SignalHandler;
        pub sa_mask: sigset_t;
        pub sa_flags: int32;
        pub sa_restorer: func();
    }
#else_if _WINDOWS_
    pub const SIGABRT := 22;
    pub const SIGFPE := 8;
    pub const SIGILL := 4;
    pub const SIGINT := 2;
    pub const SIGSEGV := 11;
    pub const SIGTERM := 15;
#else
    #error cannot define values for signals in this operating system, please report the issue
#endif

extern (C) {
#if _LINUX_
    pub func sigaction(signum: int32, act: ?&sigaction_t, old_act: ?&mut sigaction_t) -> int32;
#endif
    pub func signal(sig: int32, handler: SignalHandler) -> ?SignalHandler;
    pub func raise(sig: int32) -> int32;
}
