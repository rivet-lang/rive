// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

// TODO(StunxFS): replace the argument type of `SignalHandler` from
// `int32` to an enum that enumerates all possible signals.

import { pid_t, uid_t } from ../ctypes;

public alias SignalHandler = func (int32, *mut siginfo_t, mut_anyptr);

#if _LINUX_
    public const SA_ONSTACK = 0x08000000;
    public const SA_SIGINFO = 0x00000004;
    public const SA_NOCLDWAIT = 0x00000002;

    public const SIGHUP = 0x1;
    public const SIGINT = 0x2;
    public const SIGQUIT = 0x3;
    public const SIGILL = 0x4;
    public const SIGTRAP = 0x5;
    public const SIGABRT = 0x6;
    public const SIGEMT = 0x7;
    public const SIGFPE = 0x8;
    public const SIGKILL = 0x9;
    public const SIGBUS = 0xA;
    public const SIGSEGV = 0xB;
    public const SIGSYS = 0xc;
    public const SIGPIPE = 0xd;
    public const SIGALRM = 0xe;
    public const SIGTERM = 0xF;
    public const SIGURG = 0x10;
    public const SIGSTOP = 0x11;
    public const SIGTSTP = 0x12;
    public const SIGCONT = 0x13;
    public const SIGCHLD = 0x14;
    public const SIGTTIN = 0x15;
    public const SIGTTOU = 0x16;
    public const SIGIO = 0x17;
    public const SIGXCPU = 0x18;
    public const SIGXFSZ = 0x19;
    public const SIGVTALRM = 0x1a;
    public const SIGPROF = 0x1b;
    public const SIGWINCH = 0x1c;
    public const SIGINFO = 0x1d;
    public const SIGUSR1 = 0x1e;
    public const SIGUSR2 = 0x1f;

    public const SEGV_MAPERR = 0x1;
    public const SEGV_ACCERR = 0x2;

    public struct sigset_t {
        public __val: [#if _X86_ 32 #else 16 #endif]uint32;
    }

    public struct sigval {
        public sival_ptr: mut_anyptr;
    }

    public struct siginfo_t {
        public si_signo: int32; // signal number
        public si_errno: int32; // errno association
        public si_code: int32; // signal code
        public si_pid: pid_t; // sending process
        public si_uid: uid_t; // sender's ruid
        public si_status: int32; // exit value
        public si_addr: mut_anyptr; // faulting instruction
        public si_value: sigval; // signal value
        public si_band: int64; // band event for SIGPOLL
        public _: [7]uint64; // reserved for future use
    }

    public struct sigaction_t {
        public sa_sigaction: SignalHandler;
        public sa_mask: sigset_t;
        public sa_flags: int32;
        public sa_restorer: func();
    }
#else_if _WINDOWS_
    public const SIGABRT = 22;
    public const SIGFPE = 8;
    public const SIGILL = 4;
    public const SIGINT = 2;
    public const SIGSEGV = 11;
    public const SIGTERM = 15;
#endif

extern (C) {
#if _LINUX_
    public func sigaction(signum: int32, act: ?*sigaction_t, old_act: ?*mut sigaction_t) int32;
#endif
    public func signal(sig: int32, handler: SignalHandler) ?SignalHandler;
    public func raise(sig: int32) int32;
}
