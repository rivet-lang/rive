// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/ctypes.*;

pub const MAX_PATH_LEN: uint := 4096;
pub const MAX_NAME_LEN: uint := 255;

pub const STDIN_FILENO := 0;
pub const STDOUT_FILENO := 1;
pub const STDERR_FILENO := 2;

pub const F_OK := 0;
pub const X_OK := 1;
pub const W_OK := 2;
pub const R_OK := 4;

pub const S_IFMT := 0xF000; // file
pub const S_IFDIR := 0x4000; // directory
pub const S_IFLNK := 0xA000; // link

pub const O_RDONLY := 0x00000;
pub const O_WRONLY := 0x00001;
pub const O_RDWR := 0x00002;
pub const O_CREATE := 0x00040;
pub const O_EXCL := 0x00080;
pub const O_NOCTTY := 0x00100;
pub const O_TRUNC := 0x00200;
pub const O_NONBLOCK := 0x00800;
pub const O_APPEND := 0x00400;
pub const O_SYNC := 0x01000;
pub const O_ASYNC := 0x02000;
pub const O_CLOEXEC := 0x80000;

pub struct FILE;

$if _LINUX_ {
    extern (C) {
        pub var stdin: &mut FILE;
        pub var stdout: &mut FILE;
        pub var stderr: &mut FILE;
    }

    pub struct fpos_t {
        f1: [16]char;
        f2: longlong;
        f3: double;
    }

    pub const _IOFBF := 0;
	pub const _IOLBF := 1;
	pub const _IONBF := 2;

	pub const BUFSIZ := 1024;
	pub const EOF := -1;
	pub const FOPEN_MAX := 1000;
	pub const FILENAME_MAX := 4096;
	pub const L_tmpnam := 20;
	pub const SEEK_SET := 0;
	pub const SEEK_CUR := 1;
	pub const SEEK_END := 2;

	pub const TMP_MAX := 308915776;
}

$if _WINDOWS_ {
    extern (C) {
        proc __acrt_iob_fn(index: uint32) -> &mut FILE;
    }

    pub alias fpos_t := int64;

	pub const _IOFBF := 0x0000;
	pub const _IOLBF := 0x0004;
	pub const _IONBF := 0x0040;

	pub const BUFSIZ := 512;
	pub const EOF := -1;
	pub const FOPEN_MAX := 20;
	pub const FILENAME_MAX := 260;
	pub const L_tmpnam := 15; // "\\" + 12 + NUL
	pub const SEEK_SET := 0;
	pub const SEEK_CUR := 1;
	pub const SEEK_END := 2;

	pub const TMP_MAX := 32767; // SHRT_MAX

    pub var stdin: &mut FILE := unsafe { __acrt_iob_fn(0) };
    pub var stdout: &mut FILE := unsafe { __acrt_iob_fn(1) };
    pub var stderr: &mut FILE := unsafe { __acrt_iob_fn(2) };
}

extern (C) {
    pub proc fopen(path: [&]uint8, mode: [&]uint8) -> ?&mut FILE;
    pub proc feof(stream: &FILE) -> int32;
    pub proc ferror(stream: &FILE) -> int32;
    pub proc fseek(stream: &mut FILE, offset: uint64, whence: int32) -> int32;
    pub proc ftell(stream: &mut FILE) -> int64;
    pub proc fread(ptr: rawptr, size: uint, nitems: uint, stream: &mut FILE) -> uint;
    pub proc fputc(c: int32, stream: &mut FILE) -> int32;
    pub proc fputs(s: [&]uint8, stream: &mut FILE) -> int32;
    pub proc fprintf(stream: &mut FILE, fmt: [&]uint8, ...) -> int32;
    pub proc fwrite(ptr: rawptr, size: uint, nobj: uint, stream: &mut FILE) -> uint;
    pub proc fflush(stream: &mut FILE) -> int32;
    pub proc fgets(s: [&]mut uint8, n: uint, stream: &mut FILE) -> int32;
    pub proc fclose(stream: &mut FILE) -> int32;
    pub proc fileno(stream: &FILE) -> int32;
    pub proc rewind(stream: &mut FILE);

    pub proc printf(fmt: [&]uint8, ...) -> int32;
    pub proc asprintf(strp: &?[&]uint8, fmt: [&]uint8, ...) -> int32;
    pub proc putchar(s: int32) -> int32;

	pub proc popen(cmd: [&]uint8, modes: [&]uint8) -> ?&mut FILE;
	pub proc pclose(stream: &mut FILE) -> int32;

	pub proc getline(lineptr: &?[&]uint8, n: &uint, stream: &mut FILE) -> int;
}
