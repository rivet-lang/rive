// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

$if _LINUX_ {
    pub const RAND_MAX := 0x7fffffff;
} else if _WINDOWS_ {
    pub const RAND_MAX := 0x7fff;
} else {
     // TODO: error cannot define RAND_MAX in this operating system, please report the issue
}

extern (C) {
    pub proc rand() -> int32;
    pub proc srand(seed: uint32);

    pub proc atof(nptr: ?[&]uint8) -> float64;
    pub proc atoi(nptr: ?[&]uint8) -> int32;
    pub proc atol(nptr: ?[&]uint8) -> int64;
    pub proc atoll(nptr: ?[&]uint8) -> int64;

    pub proc strtod(nptr: [&]uint8, endptr: ?[&]uint8, base: int32) -> float64;
    pub proc strtof(nptr: [&]uint8, endptr: ?[&]uint8, base: int32) -> float32;
    pub proc strtol(nptr: [&]uint8, endptr: ?[&]uint8, base: int32) -> int64;
    pub proc strtoll(nptr: [&]uint8, endptr: ?[&]uint8, base: int32) -> int64;
    pub proc strtoul(nptr: [&]uint8, endptr: ?[&]uint8, base: int32) -> uint64;
    pub proc strtoull(nptr: [&]uint8, endptr: ?[&]uint8, base: int32) -> uint64;

    pub proc malloc(size: uint) -> ?rawptr;
    pub proc calloc(nobj: uint, size: uint) -> ?rawptr;
    pub proc realloc(p: ?rawptr, size: uint) -> ?rawptr;
    pub proc free(p: rawptr);

    pub proc getenv(name: [&]uint8) -> ?[&]mut uint8;
    pub proc setenv(name: [&]uint8, value: [&]uint8, replace: bool) -> int32;
    pub proc unsetenv(name: [&]uint8) -> int32;

    pub proc exit(status: int32) -> never;
    pub proc abort() -> never;
}
