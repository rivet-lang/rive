// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

using pkg::traits::ToString;

pub struct String {
    mut ptr: *mut u8;
    mut len_: usize;
    mut cap: usize;

    pub fn new() Self { return Self::with_capacity(0); }

    /// Returns a dynamic string allocated on the heap with size `cap`.
    ///
    /// NOTE: `with_capacity` allocates memory the size of `cap` + 1, where 1 is
    /// an extra space for the NULL character.
    pub fn with_capacity(cap: usize) Self {
        unsafe {
            let mut b = as(*mut u8, mem::alloc(cap + 1) catch unreachable!());
            b[cap] = 0;
            return Self{
                ptr: b,
                cap: cap
            };
        }
    }

    pub unsafe fn from_raw(ptr: *mut u8) Self {
        return unsafe { Self::from_raw_with_len(ptr, stdc::strlen(ptr)) };
    }

    pub unsafe fn from_raw_with_len(ptr: *mut u8, len: usize) Self {
        if (len == 0) {
            return Self::new();
        }
        return Self{
            ptr: unsafe { ptr },
            len_: len,
            cap: len
        };
    }

    /// Returns a string with the bytes stored in `bytes`. If the length of
    /// `bytes` is 0, an empty string is returned instead.
    pub fn from_bytes(bytes: [u8]) Self {
        if (bytes.len == 0) {
            return Self::new();
        }
        unsafe {
            let mut res = Self::with_capacity(bytes.len);
            mem::copy(res.ptr, bytes.ptr, bytes.len);
            res.len_ = bytes.len;
            return res;
        }
    }

    pub fn from_str(s: str) Self {
        if (s.len == 0) {
            return Self::new();
        }
        unsafe {
            let mut res = Self::with_capacity(s.len);
            mem::copy(res.ptr, s.ptr, s.len);
            res.len_ = s.len;
            return res;
        }
    }

    pub fn push(&mut self, val: u8) {
        if (self.len_ >= self.cap) {
            self.reserve(self.len_ + 1);
        }
        unsafe {
            mem::copy(self.ptr + self.len_, &val, size_of!(u8));
        }
        self.len_++;
    }

    pub unsafe fn push_raw_with_len(&mut self, s: *u8, len: usize) {
        if (self.len_ >= self.cap) {
            self.reserve(len);
        }
        unsafe {
            mem::copy(self.ptr + self.len_, s, len);
        }
        self.len_ += len;
    }

    pub unsafe fn push_raw(&mut self, s: *u8) {
        unsafe {
            self.push_raw_with_len(s, stdc::strlen(s));
        }
    }

    pub fn push_str(&mut self, s: str) {
        unsafe {
            self.push_raw_with_len(s.ptr, s.len);
        }
    }

    pub fn push_string(&mut self, s: String) {
        unsafe {
            self.push_raw_with_len(s.ptr, s.len_);
        }
    }

    /// Returns the last byte of the string, and removes it. If the string is
    /// empty, this will panic.
    pub fn pop(&mut self) u8 {
        if (self.len_ == 0) {
            panic("String::pop: string is empty");
        }
        let new_len = self.len_ - 1;
        self.len_ = new_len;
        return unsafe { self.ptr + new_len };
    }

    /// Ensures that this String's capacity is at least `required` bytes larger
    /// than its size.
    pub fn reserve(&mut self, required: usize) {
        if (required <= self.cap) {
            return;
        }
        let mut cap = if (self.cap > 0) self.cap else 2;
        while (required > cap) {
            cap *= 2;
        }
        unsafe {
            let mut new_data = as(
                *mut u8, mem::alloc(cap * size_of!(u8)) catch unreachable!()
            );
            if (self.ptr != none) {
                mem::copy(new_data, self.ptr, self.len_ * size_of!(u8));
            }
            mem::dealloc(self.ptr);
            self.ptr = new_data;
        }
        self.cap = cap;
    }

    pub fn len(&self) usize { return self.len_; }

    /// Returns the number of runes contained in `self`.
    pub fn runes_count(&self) usize {
        return cstr_runes_count(unsafe { self.ptr }, self.len_);
    }

	/// Returns the index of byte `b` if found in the string.
	pub fn index_byte(self, b: u8) ?usize {
		for (i in 0..self.len_) {
			if (unsafe { self.ptr[i] == b }) {
				return i;
			}
		}
		return none;
	}

	/// Returns the position of the first character of the input string.
	/// It will return `none` if the input string can't be found.
	pub fn index(self, p: str) ?usize {
		if (p.len > self.len_ or p.len == 0) {
			return none;
		}
		let mut i: usize = 0;
		while (i < self.len_) {
			let mut j: usize = 0;
			while (j < p.len and unsafe { self.ptr[i + j] == p.ptr[j] }) {
				j++;
			}
			if (j == p.len) {
				return i;
			}
			i++;
		}
		return none;
	}

    pub fn as_ptr(&self) *u8 { return unsafe { self.ptr }; }

    pub unsafe fn as_mut_ptr(&self) *mut u8 { return unsafe { self.ptr }; }

    pub fn as_bytes(&self) [u8] {
        return unsafe { _slice::from_array(self.ptr, size_of!(u8), self.len_) };
    }

    pub fn as_str(&self) str {
        return unsafe { str::from_raw_with_len(self.ptr, self.len_) };
    }

    pub fn ==(&self, rhs: &Self) bool {
        if (self.len_ != rhs.len_) {
            return false;
        }
        unsafe {
            if (self.len_ > 0) {
                let last_idx = self.len_ - 1;
                if (self.ptr[last_idx] != rhs.ptr[last_idx]) {
                    return false;
                }
            }
        }
        return unsafe { mem::cmp(self.ptr, rhs.ptr, rhs.len_) == 0 };
    }

    pub fn !=(&self, rhs: &Self) bool { return !self.==(rhs); }

	/// Returns `true` if the string contains `substr`.
	pub fn contains(self, substr: str) bool {
		if (substr.len == 0) {
			return true;
		}
		if (let _ = self.index(substr)) {
			return true;
		}
		return false;
	}

    /// Returns `true` if the string starts with `p`.
	pub fn starts_with(self, p: str) bool {
		if (p.len > self.len_) {
            return false;
		}
		for (i in 0..p.len) {
			if (unsafe { self.ptr[i] != p[i] }) {
				return false;
			}
		}
		return true;
	}

	/// Returns `true` if the string ends with `p`.
	pub fn ends_with(self, p: str) bool {
		if (p.len > self.len_) {
            return false;
        }
		for (i in 0..p.len) {
			if (unsafe { p[i] != self.ptr[self.len_ - p.len + i] }) {
				return false;
			}
		}
		return true;
	}

    pub fn is_empty(&self) bool { return self.len_ == 0; }

    pub fn clone(&self) Self {
        let mut res = Self::with_capacity(self.len_);
        unsafe {
            mem::copy(res.ptr, self.ptr, self.len_);
        }
        res.len_ = self.len_;
        return res;
    }

    ~self {
        unsafe { mem::dealloc(self.ptr); }
    }
}

extend String for ToString {
    fn to_string(&self) Self { return self.clone(); }
}
