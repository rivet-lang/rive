// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;
import ./mem;

#[boxed]
pub struct StringBuilder < Stringable {
    mut inner: DynArray;

    /// Returns a string builder with capacity `cap`.
    #[inline]
    pub proc new(cap: uint := 0) -> Self {
        return Self(unsafe { DynArray.new(@size_of(uint8), cap) });
    }

    #[inline]
    pub proc from_string(s: string) -> Self {
        return if s.len == 0 {
            Self.new()
        } else {
            Self(unsafe {
                DynArray.from_array(
                    @as(&mut uint8, s.ptr), @size_of(uint8), s.len
                )
            })
        };
    }

    #[inline]
    pub proc write_byte(mut self, val: uint8) {
        self.inner.push(&val);
    }

    #[unsafe; inline]
    pub proc write_raw(mut self, s: [&]uint8) {
        unsafe {
            self.write_raw_with_len(s, libc.strlen(s));
        }
    }

    #[unsafe]
    pub proc write_raw_with_len(mut self, s: [&]uint8, len: uint) {
        self.inner.reserve(self.inner.len + len);
        mem.copy(
            unsafe { @ptr_add(self.inner.ptr, self.inner.elem_size * self.inner.len) },
            s, len
        );
        self.inner.len += len;
    }

    #[inline]
    pub proc write(mut self, s: string) {
        unsafe {
            self.write_raw_with_len(s.ptr, s.len);
        }
    }

    pub proc writeln(mut self, s: string := "") {
        if s.len > 0 {
            unsafe {
                self.write_raw_with_len(s.ptr, s.len);
            }
        }
        self.write_byte('\n');
    }

    pub proc write_join(mut self, ss: [:]string, sep: string := "") {
        if ss.len == 1 {
            self.write(ss[0]);
        } else {
            for i, s in ss {
                self.write(s);
                if i < ss.len - 1 {
                    self.write(sep);
                }
            }
        }
    }

    #[inline]
    pub proc write_fmt(mut self, s: string, args: ...Stringable) {
        self.write(s.fmt(args));
    }

    pub proc writeln_fmt(mut self, s: string, args: ...Stringable) {
        self.write(s.fmt(args));
        self.write_byte('\n');
    }

    pub proc last_n(self, n: uint) -> string {
        return if n > self.inner.len {
            ""
        } else {
            self.spart(self.inner.len - n, n)
        };
    }

    pub proc after(self, n: uint) -> string {
        return if n >= self.inner.len {
            ""
        } else {
            self.spart(n, self.inner.len - n)
        };
    }
    #[inline]
    pub proc go_back(mut self, n: uint) {
        if self.inner.len > 0 {
            self.inner.trim(self.inner.len - n);
        }
    }

    pub proc cut_last(mut self, n: uint) -> string {
        cut_pos := self.inner.len - n;
        res := self.spart(cut_pos, n).clone();
        self.inner.trim(cut_pos);
        return res;
    }

    pub proc cut_to(mut self, pos: uint) -> string {
        return if pos > self.inner.len {
            ""
        } else {
            self.cut_last(self.inner.len - pos)
        };
    }

    #[inline]
    pub proc go_back_to(mut self, pos: uint) {
        self.inner.trim(pos);
    }

    pub proc byte_at(self, idx: uint) -> uint8 {
        return unsafe { @as(&uint8, self.inner.get(idx)).* };
    }

    #[inline]
    pub proc first_byte(self) -> uint8 {
        return self.byte_at(0);
    }

    #[inline]
    pub proc last_byte(self) -> uint8 {
        return if self.inner.len > 0 {
            self.byte_at(self.inner.len - 1)
        } else {
            self.byte_at(0)
        };
    }

    #[inline]
    pub proc clear(mut self) {
        self.inner.clear();
    }

    /// Returns the number of runes contained in `self`.
    #[inline]
    pub proc runes_count(self) -> uint {
        return cstr_runes_count(unsafe { @as([&]uint8, self.inner.ptr) }, self.inner.len);
    }

    #[inline]
    pub proc len(self) -> uint {
        return self.inner.len;
    }

    #[inline]
    pub proc cap(self) -> uint {
        return self.inner.cap;
    }

    #[inline]
    pub proc is_empty(self) -> bool {
        return self.inner.is_empty();
    }

    #[inline]
    pub proc to_string(mut self) -> string {
        self.write_byte(0);
        return string(unsafe { @as([&]uint8, self.inner.ptr) }, self.inner.len - 1);
    }

    proc spart(self, start_pos: uint, n: uint) -> string {
        return unsafe {
            string.from_raw_with_len(
                @as([&]uint8, @ptr_add(self.inner.ptr, start_pos)), n
            ).clone()
        };
    }
}
