// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c/libc;

#[boxed]
public struct StringBuilder < Stringable {
    mut inner: Vector;

    /// Returns a string builder with capacity `cap`.
    #[inline]
    public func new(cap: usize := 0) -> Self {
        return Self(unsafe { Vector.new(@size_of(uint8), cap) });
    }

    #[inline]
    public func from_string(s: string) -> Self {
        return if s.len == 0 {
            Self.new()
        } else {
            Self(unsafe {
                Vector.from_array(@as(&mut uint8, s.ptr), @size_of(uint8), s.len)
            })
        };
    }

    #[inline]
    public func write_byte(mut self, val: uint8) {
        self.inner.push(&val);
    }

    #[unsafe; inline]
    public func write_raw(mut self, s: [&]uint8) {
        unsafe {
            self.write_raw_with_len(s, libc.strlen(s));
        }
    }

    #[unsafe]
    public func write_raw_with_len(mut self, s: [&]uint8, len: usize) {
        self.inner.reserve(self.inner.len + len);
        mem_copy(
            unsafe { @ptr_add(self.inner.ptr, self.inner.elem_size * self.inner.len) },
            s, len
        );
        self.inner.len += len;
    }

    #[inline]
    public func write_string(mut self, s: string) {
        unsafe {
            self.write_raw_with_len(s.ptr, s.len);
        }
    }

    public func writeln(mut self, s: string := "") {
        if s.len > 0 {
            unsafe {
                self.write_raw_with_len(s.ptr, s.len);
            }
        }
        self.write_byte(b'\n');
    }

    public func write_join(mut self, ss: []string, sep: string := "") {
        if ss.len == 1 {
            self.write_string(ss[0]);
        } else {
            for i, s in ss {
                self.write_string(s);
                if i < ss.len - 1 {
                    self.write_string(sep);
                }
            }
        }
    }

    #[inline]
    public func write_fmt(mut self, s: string, args: ...Stringable) {
        self.write_string(s.fmt(args));
    }

    public func writeln_fmt(mut self, s: string, args: ...Stringable) {
        self.write_string(s.fmt(args));
        self.write_byte(b'\n');
    }

    /// Returns the number of runes contained in `self`.
    #[inline]
    public func runes_count(self) -> usize {
        return cstr_runes_count(unsafe { @as([&]uint8, self.inner.ptr) }, self.inner.len);
    }

    #[inline]
    public func clear(mut self) {
        self.inner.clear();
    }

    #[inline]
    public func len(self) -> usize {
        return self.inner.len;
    }

    #[inline]
    public func cap(self) -> usize {
        return self.inner.cap;
    }

    #[inline]
    public func is_empty(self) -> bool {
        return self.inner.is_empty();
    }

    #[inline]
    public func to_string(mut self) -> string {
        self.write_byte(0);
        return string(unsafe { @as([&]uint8, self.inner.ptr) }, self.inner.len - 1);
    }
}
