// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

pub struct StringFormatter {
    buf: string;
    mut i: uint;
    mut res: StringBuilder;

    func fmt(&mut self, args: ...^Stringable) -> string {
        self.res = StringBuilder.new(self.buf.len);
        mut args_idx: uint := 0;
        while self.i < self.buf.len : self.i += 1 {
            b := unsafe { self.buf.ptr[self.i] };
            b2 := if self.i + 1 < self.buf.len unsafe { self.buf.ptr[self.i + 1] } else { 0 };
            match b {
                '{' -> {
                    if b2 == '{' { // escaping '{'
                        self.res.write_byte('{');
                        self.i += 1;
                    } else if b2 == ':' || b2 == '}' {
                        if b2 == ':' {
                            self.i += 1;
                        }
                        (has_fwidth, mut fwidth) := self.fwidth();
                        arg_idx := args_idx;
                        args_idx += 1;
                        if arg_idx >= args.len {
                            runtime_error(
                                "string.fmt: argument index out of range (argument index: {}, len: {}) at index {}",
                                arg_idx, args.len, self.i
                            );
                        }
                        value := args[arg_idx].to_string();
                        if has_fwidth && fwidth > 0 {
                            value_len := @as(int, value.len);
                            if value_len <= fwidth {
                                self.res.write(" ".repeat(@as(uint, fwidth - value_len)));
                            }
                        }
                        self.res.write(value);
                        if has_fwidth && fwidth < 0 {
                            fwidth = -fwidth;
                            value_len := @as(int, value.len);
                            if value_len <= fwidth {
                                self.res.write(" ".repeat(@as(uint, fwidth - value_len)));
                            }
                        }
                        if !has_fwidth {
                            self.i += 1;
                        }
                    } else if b2.is_digit() {
                        start := self.i;
                        self.i += 1;
                        mut buf := StaticBuffer();
                        while unsafe {
                            self.buf.ptr[self.i] != '}' && self.buf.ptr[self.i] != ':'
                        } {
                            buf.push(unsafe { self.buf.ptr[self.i] });
                            self.i += 1;
                            if self.i >= self.buf.len {
                                runtime_error(
                                    "string.fmt: incomplete format string at index {}",
                                    start
                                );
                            }
                        }
                        index := buf.as_uint();
                        if index >= args.len {
                            runtime_error(
                                "string.fmt: argument index out of range (index: {}, len: {})",
                                index, args.len
                            );
                        }
                        (has_fwidth, mut fwidth) := self.fwidth();
                        value := args[index].to_string();
                        if has_fwidth && fwidth > 0 {
                            value_len := @as(int, value.len);
                            if value_len <= fwidth {
                                self.res.write(" ".repeat(@as(uint, fwidth - value_len)));
                            }
                        }
                        self.res.write(value);
                        if has_fwidth && fwidth < 0 {
                            fwidth = -fwidth;
                            value_len := @as(int, value.len);
                            if value_len <= fwidth {
                                self.res.write(" ".repeat(@as(uint, fwidth - value_len)));
                            }
                        }
                    } else {
                        runtime_error(
                            "string.fmt: expecting closing `}}` in format string at index {}",
                            self.i
                        );
                    }
                },
                '}' -> {
                    if b2 == '}' { // escaping '}'
                        self.res.write_byte('}');
                        self.i += 1;
                    } else {
                        runtime_error(
                            "string.fmt: single `}}` encountered in format string at index {}",
                            self.i
                        );
                    }
                },
                else -> self.res.write_byte(b)
            }
        }
        return self.res.to_string();
    }

    func fwidth(&mut self) -> (bool, int) {
        if unsafe { self.buf.ptr[self.i] != ':' } {
            return (false, 0);
        }
        self.i += 1;
        start := self.i;
        mut buf := StaticBuffer();
        while unsafe { self.buf.ptr[self.i] != '}' } {
            buf.push(unsafe { self.buf.ptr[self.i] });
            self.i += 1;
            if self.i >= self.buf.len {
                runtime_error("string.fmt: incomplete format string (index: {})", start);
            }
        }
        console_writeln("{}", buf.as_string());
        fwidth := buf.as_int();
        if fwidth == 0 {
            runtime_error(
                "string.fmt: invalid width value (cannot be 0 and cannot be omitted) -> (index: {})",
                start
            );
        }
        return (true, fwidth);
    }
}
