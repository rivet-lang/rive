// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c/libc;

func array_index(len: uint, idx: uint) {
    if idx >= len {
        runtime_error("array index out of range (index: {}, size: {})", idx, len);
    }
}

#[inline]
func array_eq(arr: rawptr, other_arr: rawptr, len: uint) -> bool {
    return unsafe { libc.memcmp(arr, other_arr, len) == 0 };
}

#[inline]
func array_ne(arr: rawptr, other_arr: rawptr, len: uint) -> bool {
    return !array_eq(arr, other_arr, len);
}

func array_slice(arr: rawptr, elem_size: uint, size: uint, start: uint, end: uint) -> DynArray {
    if start > end or end > size {
        runtime_error("slice index out of range (range: {}..{}, len: {})", start, end, size);
    }
    len := end - start;
    return unsafe {
        DynArray.from_array(
            if len == size { arr } else { @ptr_add(arr, start) }, elem_size, len
        )
    };
}

#[inline]
func array_slice_from(arr: rawptr, elem_size: uint, size: uint, start: uint) -> DynArray {
    return array_slice(arr, elem_size, size, start, size);
}
