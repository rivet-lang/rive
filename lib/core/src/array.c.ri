// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;
import ./mem;

proc array_init_set(arr: rawptr, elem_size: uint, len: uint, value: rawptr) {
    mut i: uint := 0;
    while i < len : i += 1 {
        unsafe {
            mem.copy(@ptr_add(@as([&]mut uint8, arr), elem_size * i), value, elem_size);
        }
    }
}

proc array_index(len: uint, idx: uint) {
    if idx >= len {
        runtime_error("array index out of range (index: {}, size: {})", idx, len);
    }
}

#[inline]
proc array_eq(arr: rawptr, other_arr: rawptr, len: uint) -> bool {
    return unsafe { libc.memcmp(arr, other_arr, len) == 0 };
}

#[inline]
proc array_ne(arr: rawptr, other_arr: rawptr, len: uint) -> bool {
    return !array_eq(arr, other_arr, len);
}

proc array_slice(arr: rawptr, elem_size: uint, size: uint, start: uint, end: uint) -> Slice {
    if start > end || end > size {
        runtime_error("slice index [{}:{}] out of range (len: {})", start, end, size);
    }
    len := end - start;
    return unsafe {
        Slice(
            if len == size { arr } else { @ptr_add(arr, start * elem_size) }, elem_size, len
        )
    };
}

#[inline]
proc array_slice_from(arr: rawptr, elem_size: uint, size: uint, start: uint) -> Slice {
    return array_slice(arr, elem_size, size, start, size);
}
