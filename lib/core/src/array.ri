// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

use pkg::process { panic };

#[used]
fn array_index(len: usize, idx: usize) void {
    if (idx >= len) {
        panic("array index out of range (index: {}, size: {})", idx, len);
    }
}

#[used]
fn array_eq(arr: *void, other_arr: *void, len: usize) bool {
    return unsafe { stdc::memcmp(arr, other_arr, len) == 0 };
}

#[used]
fn array_ne(arr: *void, other_arr: *void, len: usize) bool {
    return unsafe { !array_eq(arr, other_arr, len) };
}

#[used]
fn array_slice(
    arr: *mut void, elem_size: usize, size: usize, start: usize, end: usize
) Slice {
    if (start > end or end > size) {
        panic("slice index out of range (range: {}..{}, len: {})", start, end, size);
    }
    let len = end - start;
    unsafe {
        if (len == size) {
            return Slice(arr, elem_size, len);
        }
        return Slice(ptr_add!(as(*mut u8, arr), start * elem_size), elem_size, len);
    }
}

#[used]
fn array_slice_from(
    arr: *mut void, elem_size: usize, size: usize, start: usize
) Slice {
    return unsafe { array_slice(arr, elem_size, size, start, size) };
}
