// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c/libc;

func array_index(len: usize, idx: usize) {
    if idx >= len {
        process_panic("array index out of range (index: {}, size: {})", idx, len);
    }
}

[inline]
func array_eq(arr: anyptr, other_arr: anyptr, len: usize) bool {
    return unsafe { libc::memcmp(arr, other_arr, len) == 0 };
}

[inline]
func array_ne(arr: anyptr, other_arr: anyptr, len: usize) bool {
    return unsafe { !array_eq(arr, other_arr, len) };
}

func array_slice(arr: mut_anyptr, elem_size: usize, size: usize, start: usize, end: usize) Vector {
    if start > end or end > size {
        process_panic("slice index out of range (range: {}..{}, len: {})", start, end, size);
    }
    len := end - start;
    return unsafe {
        Vector::from_array(
            if len == size { arr } else { @ptr_add(arr, start) }, elem_size, len
        )
    };
}

[inline]
func array_slice_from(arr: mut_anyptr, elem_size: usize, size: usize, start: usize) Vector {
    return unsafe { array_slice(arr, elem_size, size, start, size) };
}
