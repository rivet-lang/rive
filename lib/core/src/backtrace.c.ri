// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

$if !_RELEASE_ { // skip backtrace in release mode
    #![compile_c_source("../thirdparty/libbacktrace/backtrace.c")]

    import c;
    import ./mem;

    struct BacktraceState;

    struct BacktraceData {
        mut has_error: bool;
    }

    alias BacktraceErrorCB := proc(rawptr, ?[&]mut uint8, int32);
    alias BacktraceFullCB := proc(
        rawptr, int32, ?[&]mut uint8, int32, ?[&]mut uint8
    ) -> int32;

    extern (C) {
        proc backtrace_create_state(
            filename: [&]uint8, threaded: bool, error_cb: BacktraceErrorCB,
            data: ?rawptr
        ) -> ?&mut BacktraceState;

        proc backtrace_full(
            state: &BacktraceState, skip: int32, cb: BacktraceFullCB,
            error_cb: BacktraceErrorCB, data: rawptr
        ) -> int32;
    }

    var state := unsafe {
        backtrace_create_state(ARGS[0].ptr, true, bt_error_handler, none)?
    };

    proc bt_print_callback(
        _data: rawptr, _pc: int32, filename_ptr: ?[&]mut uint8, lineno: int32,
        proc_ptr: ?[&]mut uint8
    ) -> int32 {
        unsafe {
            if safe_proc_ptr := proc_ptr {
                if mem.cmp(safe_proc_ptr, c"_R4core4mainF", 13) == 0 {
                    return -1; // stop backtracing
                }
            }
            proc_name := if proc_ptr == none {
                "???"
            } else {
                demangle_symbol(string.from_raw(proc_ptr))
            };
            file_name := if filename_ptr == none {
                "???"
            } else {
                string.from_raw(filename_ptr)
            };
            console_ewriteln("   from {} in \"{}\":{}", proc_name, file_name, lineno);
        }
        return 0;
    }

    proc bt_error_handler(data: rawptr, msg_ptr: ?[&]mut uint8, errnum: int32) {
        unsafe {
            bdata := @as(&mut BacktraceData, data);
            if !bdata.has_error {
                bdata.has_error = true;
                console_ewrite("   libbacktrace error: ");
                console_ewrite(string.from_raw(msg_ptr));
                if errnum > 0 {
                    console_ewrite(" (");
                    console_ewrite(c.errno_msg(errnum));
                    console_ewrite(")");
                }
                console_ewriteln();
            }
        }
    }
}

pub proc bt_print(frames_to_skip: int32 := 0) {
    $if _RELEASE_ {
        _ = frames_to_skip;
    } else {
        unsafe {
            if runtime_is_started {
                mut data := BacktraceData();
                _ = backtrace_full(
                    state, frames_to_skip, bt_print_callback, bt_error_handler, &mut data
                );
            }
        }
    }
}
