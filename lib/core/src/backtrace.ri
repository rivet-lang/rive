// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

#if !_RELEASE_ // skip backtrace in release mode

![compile_c_source("lib/core/thirdparty/libbacktrace/backtrace.c")]

import c;

struct backtrace_state;

struct BacktraceData {
    mut has_error: bool;
}

alias BacktraceErrorCB = func (mut_anyptr, ?[*]mut uint8, int32);
alias BacktraceFullCB = func (mut_anyptr, int32, ?[*]mut uint8, int32, ?[*]mut uint8) int32;

extern (C) {
    func backtrace_create_state(
        filename: [*]uint8, threaded: bool, error_cb: BacktraceErrorCB,
        data: ?mut_anyptr
    ) ?*mut backtrace_state;

    func backtrace_full(
        state: *backtrace_state, skip: int32, cb: BacktraceFullCB,
        error_cb: BacktraceErrorCB, data: mut_anyptr
    ) int32;
}

var state = unsafe {
    backtrace_create_state(ARGS[0].ptr, true, bt_error_handler, none)?
};

func bt_print_callback(
    data: mut_anyptr, pc: int32, filename_ptr: ?[*]mut uint8, lineno: int32,
    fn_ptr: ?[*]mut uint8
) int32 {
    unsafe {
        if safe_fn_ptr := fn_ptr {
            if mem_cmp(safe_fn_ptr, c"_R4core4mainF", 13) == 0 {
                return -1; // stop backtracing
            }
        }
        fn_name := if fn_ptr is none {
            "???"
        } else {
            demangle_symbol(string.from_raw(fn_ptr))
        };
        file_name := if filename_ptr is none {
            "???"
        } else {
            string.from_raw(filename_ptr)
        };
        console_eprintln("   at {} ({}:{})", fn_name, file_name, lineno);
    }
    return 0;
}

func bt_error_handler(data: mut_anyptr, msg_ptr: ?[*]mut uint8, errnum: int32) {
    unsafe {
        bdata := @cast(*mut BacktraceData, data);
        if !bdata.has_error {
            console_eprint("   libbacktrace error: ");
            console_eprint(string.from_raw(msg_ptr));
            if errnum > 0 {
                console_eprint(" (");
                console_eprint(c.errno_msg(errnum));
                console_eprint(")");
            }
            console_eprintln();
            bdata.has_error = true;
        }
    }
}
#endif

public func bt_print(frames_to_skip: int32 = 0) {
#if _RELEASE_
    _ = frames_to_skip;
#else
    unsafe {
        if libcore_started {
            mut data := BacktraceData();
            _ = backtrace_full(
                state, frames_to_skip, bt_print_callback, bt_error_handler, &mut data
            );
        }
    }
#endif
}
