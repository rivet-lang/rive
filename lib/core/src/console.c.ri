// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;

/// Writes a message to stdout. Unlike `println` stdout is not automatically
/// flushed.
pub proc console_write(s: string, args: ...Stringable) {
    sx := s.fmt(args);
    unsafe {
        write_buf_to_fd(1, sx.ptr, sx.len);
    }
}

/// Writes a message with a line end to stdout. stdout is flushed.
#[inline]
pub proc console_writeln(s: string := "", args: ...Stringable) {
    unsafe {
        writeln_to_fd(1, s.fmt(args));
    }
}

/// Writes a message to stderr. Both stderr and stdout are flushed.
pub proc console_ewrite(s: string, args: ...Stringable) {
    sx := s.fmt(args);
    unsafe {
        _ = libc.fflush(libc.stdout);
        _ = libc.fflush(libc.stderr);
        write_buf_to_fd(2, sx.ptr, sx.len);
        _ = libc.fflush(libc.stderr);
    }
}

/// Writes a message with a line end to stderr. Both stderr and stdout are
/// flushed.
pub proc console_ewriteln(s: string := "", args: ...Stringable) {
    unsafe {
        _ = libc.fflush(libc.stdout);
        _ = libc.fflush(libc.stderr);
        writeln_to_fd(2, s.fmt(args));
        _ = libc.fflush(libc.stderr);
    }
}

/// Returns `true` if the `fd` file descriptor is open and refers to a
/// terminal.
#[inline]
pub proc console_is_atty(fd: int32) -> bool {
    return unsafe { libc.isatty(fd) == 1 };
}

#[unsafe]
proc write_buf_to_fd(fd: int32, buf: [&]uint8, len: uint) {
    unsafe {
        mut x: int := 0;
        mut remaining_bytes := @as(int, len);
        while remaining_bytes > 0 {
            x = libc.write(fd, @ptr_add(buf, x), @as(uint, remaining_bytes));
            remaining_bytes -= x;
        }
    }
}

#[unsafe]
proc writeln_to_fd(fd: int32, s: string) {
    unsafe {
        write_buf_to_fd(fd, s.ptr, s.len);
        write_buf_to_fd(fd, c"\n", 1);
    }
}
