// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c/libc;

/// Prints a message to stdout. Unlike `println` stdout is not automatically
/// flushed.
public func console_print(s: string, args: ...Stringable) {
    sx := s.fmt(args);
    unsafe {
        write_buf_to_fd(1, sx.ptr, sx.len);
    }
}

/// Prints a message with a line end to stdout. stdout is flushed.
@[inline]
public func console_println(s: string = "", args: ...Stringable) {
    unsafe {
        writeln_to_fd(1, s.fmt(args));
    }
}

/// Prints a message to stderr. Both stderr and stdout are flushed.
public func console_eprint(s: string, args: ...Stringable) {
    sx := s.fmt(args);
    unsafe {
        _ = libc.fflush(libc.stdout);
        _ = libc.fflush(libc.stderr);
        write_buf_to_fd(2, sx.ptr, sx.len);
        _ = libc.fflush(libc.stderr);
    }
}

/// Prints a message with a line end to stderr. Both stderr and stdout are
/// flushed.
public func console_eprintln(s: string = "", args: ...Stringable) {
    unsafe {
        _ = libc.fflush(libc.stdout);
        _ = libc.fflush(libc.stderr);
        writeln_to_fd(2, s.fmt(args));
        _ = libc.fflush(libc.stderr);
    }
}

/// Returns `true` if the `fd` file descriptor is open and refers to a
/// terminal.
@[inline]
public func console_is_atty(fd: int32) -> bool {
    return unsafe { libc.isatty(fd) == 1 };
}

@[unsafe]
func write_buf_to_fd(fd: int32, buf_: [*]uint8, len: usize) {
    unsafe {
        buf := buf_;
        mut x: isize := 0;
        mut remaining_bytes := @cast(isize, len);
        while remaining_bytes > 0 {
            x = libc.write(fd, @ptr_add(buf, x), @cast(usize, remaining_bytes));
            remaining_bytes -= x;
        }
    }
}

@[unsafe]
func writeln_to_fd(fd: int32, s: string) {
    unsafe {
        write_buf_to_fd(fd, s.ptr, s.len);
        write_buf_to_fd(fd, c"\n", 1);
    }
}
