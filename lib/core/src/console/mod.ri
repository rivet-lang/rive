// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

use pkg { stdc, traits, utils };

/// Prints a message to stdout. Unlike `println` stdout is not automatically
/// flushed.
pub func print(s: string, args: ...traits::ToString) void {
    let sx = s.fmt(args);
    unsafe {
        utils::write_buf_to_fd(1, sx.ptr, sx.len);
    }
}

/// Prints a message with a line end to stdout. stdout is flushed.
pub func println(s: string = "", args: ...traits::ToString) void {
    unsafe {
        utils::writeln_to_fd(1, s.fmt(args));
    }
}

/// Prints a message to stderr. Both stderr and stdout are flushed.
pub func eprint(s: string, args: ...traits::ToString) void {
    let sx = s.fmt(args);
    unsafe {
        _ = stdc::fflush(stdc::stdout);
        _ = stdc::fflush(stdc::stderr);
        utils::write_buf_to_fd(2, sx.ptr, sx.len);
        _ = stdc::fflush(stdc::stderr);
    }
}

/// Prints a message with a line end to stderr. Both stderr and stdout are
/// flushed.
pub func eprintln(s: string = "", args: ...traits::ToString) void {
    unsafe {
        _ = stdc::fflush(stdc::stdout);
        _ = stdc::fflush(stdc::stderr);
        utils::writeln_to_fd(2, s.fmt(args));
        _ = stdc::fflush(stdc::stderr);
    }
}

/// Returns 1 if the `fd` file descriptor is open and refers to a
/// terminal.
pub func is_atty(fd: i32) i32 {
	return unsafe { stdc::isatty(fd) };
}

/// Returns true if colors are allowed in stdout, false otherwise.
#[inline]
pub func can_show_color_on_stdout() bool {
	return supports_escape_sequences(1);
}

/// Returns true if colors are allowed in stderr, false otherwise.
#[inline]
pub func can_show_color_on_stderr() bool {
	return supports_escape_sequences(2);
}

func supports_escape_sequences(fd: i32) bool {
	return is_atty(fd) > 0;
}
