// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c;
import c/libc;

public alias ErrnoError = c.ErrnoError;
public alias last_errno_error = c.last_errno_error;

/// This trait is used for errors returned with result types (!T).
public trait Error : Stringable {
    func return_trace(self) ReturnTrace {
        return return_trace;
    }
}

[inline]
func error_panic(err: Error) {
    console_eprintln("unhandled error: {}", err.to_string());
    return_trace.print();
    process_exit(1);
}

[boxed]
public struct RuneFromU32Error : Error {
    msg: string;

    [inline]
    public func to_string(self) string {
        return self.msg;
    }
}

[boxed]
public struct InvalidArgumentError : Error {
    msg: string;

    [inline]
    public func to_string(self) string {
        return self.msg;
    }
}

[boxed]
public struct OutOfMemoryError : Error {
    msg: string;

    [inline]
    public func to_string(self) string {
        return self.msg;
    }
}

[boxed]
public struct ReadFailedError : Error {
    msg: string;

    [inline]
    public func to_string(self) string {
        return self.msg;
    }
}

struct CallTrace {
    name: string;
    file: string;
    line: usize;
}

var return_trace = ReturnTrace();

struct ReturnTrace {
    mut traces: []CallTrace = @vec(CallTrace, 5);

    [inline]
    func add(mut self, trace: CallTrace) {
        self.traces.push(trace);
    }

    func print(self) {
        for i, trace in self.traces {
            console_eprintln(
                "   at {} ({}:{})", demangle_symbol(trace.name), trace.file,
                trace.line
            );
        }
    }

    func clear(mut self) {
        self.traces.clear();
    }
}
