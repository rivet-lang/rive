// Copyright (C) 2023 Jose Mendoza. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c;

pub alias ErrnoError := c.ErrnoError;

// FIXME: pub alias last_errno_error := c.last_errno_error;
pub func last_errno_error() -> c.ErrnoError {
    return c.last_errno_error();
}

var return_trace := ReturnTrace();

/// This trait is used for errors throwed with result types (!T).
pub trait Throwable < Stringable { }

#[inline]
func uncatched_error(err: Throwable) {
    console_ewriteln("uncatched error: {}", err.to_string());
    return_trace.print();
    process_exit(102);
}

struct CallTrace {
    name: string;
    file: string;
    line: uint;
}

// NOTE: 50 should be fine for now.
const RETURN_TRACE_MAX_SIZE := 50;

struct ReturnTrace {
    mut traces: [RETURN_TRACE_MAX_SIZE]mut CallTrace;
    mut cur_idx: uint;

    #[inline]
    func add(mut self, trace: CallTrace) {
        if self.cur_idx == RETURN_TRACE_MAX_SIZE {
            runtime_error("maximum return trace size exceeded");
        }
        self.traces[self.cur_idx] = trace;
        self.cur_idx += 1;
    }

    func print(self) {
        mut i: uint := 0;
        while i < self.cur_idx : i += 1 {
            trace := self.traces[i];
            console_ewriteln(
                "   from {} in \"{}\":{}", demangle_symbol(trace.name),
                trace.file, trace.line
            );
        }
    }

    func clear(mut self) {
        self.cur_idx = 0;
    }
}

#[boxed]
pub struct InvalidArgumentError < Throwable {
    msg: string;

    #[inline]
    pub func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct OutOfMemoryError < Throwable {
    msg: string;

    #[inline]
    pub func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct ReadFailedError < Throwable {
    msg: string;

    #[inline]
    pub func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct InvalidSyntaxError < Throwable {
    msg: string;

    pub func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct InvalidBaseError < Throwable {
    msg: string;

    pub func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct InvalidBitSizeError < Throwable {
    msg: string;

    pub func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct ValueOutOfRangeError < Throwable {
    msg: string;

    pub func to_string(self) -> string {
        return self.msg;
    }
}
