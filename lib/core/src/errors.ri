// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

static returnTrace = ReturnTrace();

/// This trait is used for errors throwed with result types (!T).
public trait Throwable < Stringable { }

#[inline]
func uncatched_error(err: Throwable) {
    console_eprintln("uncatched error: {}", err.to_string());
    returnTrace.print();
    process_exit(102);
}

struct CallTrace {
    name: string;
    file: string;
    line: usize;
}

struct ReturnTrace {
    mut traces: []CallTrace = @vec(CallTrace, 5);

    #[inline]
    func add(mut self, trace: CallTrace) {
        self.traces.push(trace);
    }

    func print(self) {
        for trace in self.traces {
            console_eprintln(
                "   from {} in \"{}\":{}", demangle_symbol(trace.name),
                trace.file, trace.line
            );
        }
    }

    func clear(mut self) {
        self.traces.clear();
    }
}

#[boxed]
public struct InvalidArgumentError < Throwable {
    msg: string;

    #[inline]
    public func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
public struct OutOfMemoryError < Throwable {
    msg: string;

    #[inline]
    public func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
public struct ReadFailedError < Throwable {
    msg: string;

    #[inline]
    public func to_string(self) -> string {
        return self.msg;
    }
}
