// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this 
// source code is governed by an MIT license that can be found in the LICENSE 
// file.

import c/libc;

extend comptime_float < Stringable {
    /// Returns the IEEE 754 binary representation of `self`, with the sign bit
    /// of `self` and the result in the same bit position.
    #[inline]
    pub func bits(self) -> uint64 {
        return @as(float64, self).bits();
    }

    #[inline]
    pub func to_string(&self) -> string {
        return @as(float64, self.*).to_string();
    }
}

extend float32 < Stringable {
    /// Returns the floating-point number corresponding to the IEEE 754 binary
    /// representation `b`, with the sign bit of b and the result in the same
    /// bit position.
    #[inline]
    pub func from_bits(b: uint32) -> float32 {
        return unsafe { @as(&float32, &b).* };
    }

    /// Returns the IEEE 754 binary representation of `self`, with the sign bit
    /// of `self` and the result in the same bit position.
    #[inline]
    pub func bits(&self) -> uint32 {
        return unsafe { @as(&uint32, self).* };
    }

    pub func to_string(&self) -> string {
        unsafe {
            cstr: ?[&]uint8 := none;
            len := libc.asprintf(&cstr, c"%g", self.*);
            return if len == -1 {
                empty_string // fail
            } else {
                string.from_raw_with_len(cstr, @as(uint, len))
            };
        }
    }
}

extend float64 < Stringable {
    /// Returns the floating-point number corresponding to the IEEE 754 binary
    /// representation `b`, with the sign bit of b and the result in the same
    /// bit position.
    #[inline]
    pub func from_bits(b: uint64) -> float64 {
        return unsafe { @as(&float64, &b).* };
    }

    /// Returns the IEEE 754 binary representation of `self`, with the sign bit
    /// of `self` and the result in the same bit position.
    #[inline]
    pub func bits(&self) -> uint64 {
        return unsafe { @as(&uint64, self).* };
    }

    pub func to_string(&self) -> string {
        unsafe {
            cstr: ?[&]uint8 := none;
            len := libc.asprintf(&cstr, c"%g", self.*);
            return if len == -1 {
                empty_string // fail
            } else {
                string.from_raw_with_len(cstr, @as(uint, len))
            };
        }
    }
}
