// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

static digitPairs := "0010203040506070809001112131415161718191021222324252627"
    "28292031323334353637383930414243444546474849405152535455565758595061626364656667"
    "68696071727374757677787970818283848586878889809192939495969798999";

extend comptime_int < Stringable {
    /// Returns the value of `self` as a string.
    #[inline]
    public func to_string(&self) -> string {
        return @as(int64, self.*).to_string();
    }
}

extend int8 < Stringable {
    public const MAX: int8 := 127;
    public const MIN: int8 := -128;

    /// Returns the value of `self` as a string.
    #[inline]
    public func to_string(&self) -> string {
        return @as(int32, self.*).str_l(5);
    }
}

extend int16 < Stringable {
    public const MAX: int16 := 32767;
    public const MIN: int16 := -32768;

    /// Returns the value of `self` as a string.
    #[inline]
    public func to_string(&self) -> string {
        return @as(int32, self.*).str_l(7);
    }
}

extend int32 < Stringable {
    public const MAX: int32 := 2147483647;
    public const MIN: int32 := -2147483648;

    /// Returns the string representation of `self` with `max` chars.
    public func str_l(self, max: int32) -> string {
        if self == 0 {
            return "0";
        }
        mut n := @as(int64, self);
        mut d: uint32 := 0;
        mut is_neg := false;
        if n < 0 {
            n = -n;
            is_neg = true;
        }
        unsafe {
            mut index := @as(usize, max);
            buf := @as([&]mut uint8, internal_alloc(index + 1));
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                n1 := @as(int32, n / 100);
                d = @as(uint32, @as(int32, n) - (n1 * 100)) << 1;
                n = n1;
                buf[index] = digitPairs.ptr[d];
                index -= 1;
                d += 1;
                buf[index] = digitPairs.ptr[d];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            if is_neg {
                // prepend `-` if it's negative
                index -= 1;
                buf[index] = b'-';
            }

            diff := @as(usize, max) - index;
            mem_move(buf, @ptr_add(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }

    /// Returns the value of `self` as a string.
    #[inline]
    public func to_string(&self) -> string {
        return self.*.str_l(12);
    }
}

extend int64 < Stringable {
    public const MAX: int64 := 9223372036854775807;
    public const MIN: int64 := -9223372036854775808;

    /// Returns the value of `self` as a string.
    public func to_string(&self) -> string {
        if self.* == 0 {
            return "0";
        }
        mut n := self.*;
        mut d: int64 := 0;

        mut is_neg := false;
        if n < 0 {
            n = -n;
            is_neg = true;
        }
        unsafe {
            max := 20;
            mut index := @as(usize, max);
            buf := @as([&]mut uint8, internal_alloc(index + 1));
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                n1 := n / 100;
                d = @as(int64, @as(uint32, n - (n1 * 100))) << @as(int64, 1);
                n = n1;
                buf[index] = digitPairs.ptr[@as(usize, d)];
                index -= 1;
                d += 1;
                buf[index] = digitPairs.ptr[@as(usize, d)];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            if is_neg {
                // prepend `-` if it's negative
                index -= 1;
                buf[index] = b'-';
            }

            diff := @as(usize, max) - index;
            mem_move(buf, @ptr_add(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }
}

extend isize < Stringable {
    public const MIN: isize := #if _x64_ int64.MIN #else int32.MIN #endif;
    public const MAX: isize := #if _x64_ int64.MAX #else int32.MAX #endif;

    #[inline]
    public func bits() -> uint32 {
        return #if _x64_ 64 #else 32 #endif;
    }

    /// Returns the value of `self` as a string.
    #[inline]
    public func to_string(&self) -> string {
        return @as(int64, self.*).to_string();
    }
}
