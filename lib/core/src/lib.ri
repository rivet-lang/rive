// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

static mut libcoreIsStarted = false;

func panic_if(cond: bool, msg: string) {
    if cond {
        console_eprintln("panic: {}", msg);
        bt_print(2);
        process_exit(1);
    }
}

func assert(cond: bool, msg: string) {
    if !cond {
        console_eprintln("panic: assertion failed: {}", msg);
        bt_print(2);
        process_exit(1);
    }
}

#[inline]
func internal_alloc(size: usize) -> mut_anyptr {
    return mem_alloc(size) catch {
        process_panic(
            "internal error: cannot allocate memory" #if _DEBUG_ " (size: {})", size #endif
        )
    };
}

#[inline]
func internal_zeroed(size: usize) -> mut_anyptr {
    return mem_zeroed(size) catch {
        process_panic(
            "internal error: cannot allocate zeroed memory" #if _DEBUG_ " (size: {})", size #endif
        )
    };
}

#[inline]
func internal_dup(src: anyptr, sz: usize) -> mut_anyptr {
    return mem_dup(src, sz) catch {
        process_panic(
            "internal error: cannot duplicate memory" #if _DEBUG_ " (size: {})", sz #endif
        )
    };
}

#[inline]
func internal_resize(ptr: ?mut_anyptr, sz: usize) -> mut_anyptr {
    return mem_resize(ptr, sz) catch {
        process_panic(
            "internal error: cannot resize memory" #if _DEBUG_ " (size: {})", sz #endif
        )
    };
}
