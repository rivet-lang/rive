// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

alias BoxedptrDestroy := proc(boxedptr);

const BOXEDPTR_SIZE := @size_of(Boxedptr);

struct Boxedptr {
    mut value: boxedptr;
    mut ref_count: int;
    mut dtor: ?BoxedptrDestroy;

    #[inline]
    pub proc from_boxedptr(ptr: boxedptr) -> &mut Self {
        return unsafe { @as(&mut Boxedptr, @ptr_sub(@as([&]uint8, ptr), BOXEDPTR_SIZE)) };
    }
}

pub proc boxed_alloc(size: uint, dtor: ?BoxedptrDestroy) -> boxedptr {
    boxed := unsafe { @as(&mut Boxedptr, raw_alloc(BOXEDPTR_SIZE + size)) };
    boxed.value = unsafe { @as(boxedptr, @ptr_add(@as([&]uint8, boxed), BOXEDPTR_SIZE)) };
    boxed.ref_count = 1;
    boxed.dtor = dtor;
    return boxed.value;
}

pub proc boxed_zeroed(size: uint, dtor: ?BoxedptrDestroy) -> boxedptr {
    boxed := unsafe { @as(&mut Boxedptr, raw_zeroed(BOXEDPTR_SIZE + size)) };
    boxed.value = unsafe { @as(boxedptr, @ptr_add(@as([&]uint8, boxed), BOXEDPTR_SIZE)) };
    boxed.ref_count = 1;
    boxed.dtor = dtor;
    return boxed.value;
}

pub proc boxed_resize(ptr: boxedptr, size: uint) -> boxedptr {
    old_boxed := Boxedptr.from_boxedptr(ptr);
    new_boxed := unsafe {
        @as(&mut Boxedptr, raw_resize(@as(rawptr, ptr), BOXEDPTR_SIZE + size))
    };
    new_boxed.value = unsafe {
        @as(boxedptr, @ptr_add(@as([&]uint8, new_boxed), BOXEDPTR_SIZE))
    };
    new_boxed.ref_count = 1;
    new_boxed.dtor = old_boxed.dtor;
    boxed_release(old_boxed.value);
    return new_boxed.value;
}

#[inline]
pub proc boxed_ref_count(ptr: boxedptr) -> int {
    return Boxedptr.from_boxedptr(ptr).ref_count;
}

pub proc boxed_retain(ptr: boxedptr) -> boxedptr {
    boxed := Boxedptr.from_boxedptr(ptr);
    boxed.ref_count += 1;
    return boxed.value;
}

pub proc boxed_release(ptr: boxedptr) {
    boxed := Boxedptr.from_boxedptr(ptr);
    if boxed.ref_count > 0 {
        boxed.ref_count -= 1;
        if boxed.ref_count == 0 {
            if dtor := boxed.dtor {
                dtor(boxed.value);
            }
            unsafe {
                raw_dealloc(boxed);
            }
            boxed.ref_count = -1;
        }
    }
}
