// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;

/// Allocates dynamically a `size` bytes block of memory on the heap.
/// Returns a pointer to the memory address of the allocated space.
///
/// NOTE: Unlike the `mem.raw_zeroed` procedure, `mem.raw_alloc` will not zero
/// the memory block.
pub proc raw_alloc(size: uint) -> rawptr {
    if new := unsafe { libc.malloc(size) } {
        return new;
    }
    runtime_error("cannot allocate memory");
}

/// Allocates dynamically a zeroed `size` bytes block of memory on the heap.
/// Returns a pointer to the memory address of the allocated space.
pub proc raw_zeroed(size: uint) -> rawptr {
    if ptr := unsafe { libc.calloc(1, size) } {
        return ptr;
    }
    runtime_error("cannot allocate zeroed memory");
}

/// Allocates dynamically a `sz` bytes block of memory on the heap, then copies
/// the contents of `src` into the allocated space and returns a pointer to
/// the newly allocated space.
pub proc raw_dup(src: rawptr, sz: uint) -> rawptr {
    if sz == 0 {
        return raw_zeroed(1);
    }
    new := raw_alloc(sz);
    copy(new, src, sz);
    return new;
}

/// Resizes the memory block `ptr` with `sz` bytes.
///
/// NOTE: The `ptr` must be a pointer to an existing memory block previously
/// allocated with `mem.raw_alloc` or `mem.raw_zeroed`.
pub proc raw_resize(ptr: ?rawptr, sz: uint) -> rawptr {
    if sz == 0 {
        if safe_ptr := ptr {
            unsafe {
                raw_dealloc(safe_ptr);
            }
        }
        runtime_error("argument `sz` is 0");
    }
    if new := unsafe { libc.realloc(ptr, sz) } {
        return new;
    }
    runtime_error("cannot resize memory");
}

/// Deallocates manually the memory referenced by `ptr`.
#[unsafe; inline]
pub proc raw_dealloc(ptr: rawptr) {
    unsafe {
        libc.free(ptr);
    }
}
