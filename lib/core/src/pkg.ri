// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

// #![c_compile("thirdparty/libbacktrace/backtrace.c")]

pub mod stdc;
pub mod backtrace;
pub mod console;
pub mod demangle;
pub mod mem;
pub mod process;
pub mod sys;
pub mod traits;

mod utils;

pub var ARGS: [string] = [""][..];

fn segfault_handler(_: i32) {
    eprintln("panic: segmentation fault detected");
    backtrace::print(3);
    process::exit(1);
}

/// Terminates program execution immediately after displaying a message,
/// followed by a backtrace.
pub fn panic(s: string, args: ...traits::ToString) no_return {
    console::eprintln("panic: {}", s.fmt(args));
    backtrace::print(2);
    process::exit(1);
}

#[used]
fn assert(cond: bool, msg: string) {
    if (!cond) {
        console::eprintln("panic: assertion failed: {}", msg);
        backtrace::print(2);
        process::exit(1);
    }
}

#[used]
fn panic_if(cond: bool, msg: string) {
    if (cond) {
        console::eprintln("panic: {}", msg);
        backtrace::print(2);
        process::exit(1);
    }
}

pub fn errno() i32 {
    return $if (_LINUX_) unsafe {
        stdc::__errno_location().*
    } $else unsafe {
        stdc::_errno().*
    };
}

/// Returns error code representation in string.
pub fn strerr(code: i32 = errno()) String {
    unsafe {
        var s = stdc::strerror(code);
        return if (s == none) "" else String::from_raw(s);
    }
}
