// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

use pkg { stdc, traits, console, backtrace };

/// Returns the OS-assigned process identifier associated with this
/// process.
pub func id() u32 {
    return unsafe { stdc::getpid() };
}

/// Terminates current thread execution immediately after displaying a
/// message, followed by a backtrace.
pub func panic(s: string = "", args: ...traits::ToString) never {
    console::eprintln("panic: {}", s.fmt(args));
    backtrace::print(2);
    exit(1);
}

/// Terminates the current process with the specified exit code.
///
/// This function will never return and will immediately terminate the
/// current process. The exit code is passed through to the underlying
/// OS and will be available for consumption by another process.
pub func exit(code: i32 = 0) never {
    unsafe {
        // TODO(StunxFS): super::_R12drop_staticsZ();
        super::_R9drop_argsZ();
        stdc::exit(code);
    }
}

/// Terminates the process in an abnormal fashion.
///
/// The function will never return and will immediately terminate the
/// current process in a platform specific "abnormal" manner.
///
/// The process's termination will be similar to that from the C `abort()`
/// function. On Unix, the process will terminate with signal `SIGABRT`,
/// which typically means that the shell prints "Aborted".
pub func abort() never {
    unsafe {
        // TODO(StunxFS): super::_R12drop_staticsZ();
        super::_R9drop_argsZ();
        stdc::abort();
    }
}
