// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ./mem;

const MAX_ONE_B: uint32 := 0x80;
const MAX_TWO_B: uint32 := 0x800;
const MAX_THREE_B: uint32 := 0x10000;

extend rune < Stringable {
    /// The highest valid codepoint a `rune` can have.
    pub const MAX: rune := 0x10FFFF;

    /// `U+FFFD REPLACEMENT CHARACTER` (ï¿½) is used in Unicode to represent a
    /// decoding error.
    pub const REPLACEMENT_CHARACTER: rune := 0xFFFD;

    /// Converts a `uint32` to a `rune`.
    ///
    /// Note that all runes are valid uint32s, and can be cast to one. However, the
    /// reverse is not true: not all valid uint32s are valid runes. `from_uint32()`
    /// will return `none` if the input is not a valid value for a rune.
    pub func from_uint32(i: uint32) -> ?rune {
        if i >= 0x110000 || (i >= 0xD800 && i < 0xE000) {
            return none;
        }
        return unsafe { @as(rune, i) };
    }

    /// Converts a digit in the given radix to a `rune`.
    ///
    /// A `radix` here is sometimes also called a `base`. A radix of two indicates
    /// a binary number, a radix of ten, decimal, and a radix of sixteen, hexadecimal,
    //// to give some common values. Arbitrary radices are supported.
    ///
    /// `rune_from_digit()` will return `none` if the input is not a digit in the given
    /// radix.
    ///
    /// Panics if given a radix larger than 36.
    pub func from_digit(num: uint32, radix: uint32) -> ?rune {
        if radix > 36 {
            runtime_error("rune.from_digit: radix is too high (maximum 36)");
        }
        if num < radix {
            num_ := @as(uint8, num);
            byte := if num_ < 10 { b'0' + num_ } else { 'a' + num_ - 10 };
            return byte.to_rune();
        }
        return none;
    }

    pub func as_bytes(self) -> []uint8 {
        res := []uint8(cap: 5);
        mut res_v := @as(DynArray, res);
        res_v.len = utf32_decode_to_buffer(self, unsafe { @as([&]mut uint8, res_v.ptr) });
        return res;
    }

    #[inline]
    pub func len_utf8(self) -> uint {
        return len_utf8(@as(uint32, self));
    }

    pub func to_string(&self) -> string {
        len := self.len_utf8();
        res := unsafe { @as([&]mut uint8, mem.raw_alloc(len + 1)) };
        unsafe {
            _ = utf32_decode_to_buffer(self.*, res);
            return string.from_raw_with_len(res, len);
        }
    }
}

func utf32_decode_to_buffer(code: rune, buffer: [&]mut uint8) -> uint {
    icode := @as(int32, code);
    unsafe {
        return match {
            (icode <= 127) -> { // 0x7F
                buffer[0] = @as(uint8, icode);
                1
            },
            (icode <= 2047) -> { // 0x7FF
                buffer[0] = 192 | @as(uint8, icode >> 6); // 0xC0 - 110xxxxx
                buffer[1] = 128 | @as(uint8, icode & 63); // 0x80 - 0x3F - 10xxxxxx
                2
            },
            (icode <= 65535) -> { // 0xFFFF
                buffer[0] = 224 | @as(uint8, icode >> 12); // 0xE0 - 1110xxxx
                buffer[1] = 128 | (@as(uint8, icode >> 6) & 63); // 0x80 - 0x3F - 10xxxxxx
                buffer[2] = 128 | @as(uint8, icode & 63); // 0x80 - 0x3F - 10xxxxxx
                3
            },
            (icode <= 1114111) -> { // 0x10FFFF
                buffer[0] = 240 | @as(uint8, icode >> 18); // 0xF0 - 11110xxx
                buffer[1] = 128 | (@as(uint8, icode >> 12) & 63); // 0x80 - 0x3F - 10xxxxxx
                buffer[2] = 128 | (@as(uint8, icode >> 6) & 63); // 0x80 - 0x3F - 10xxxxxx
                buffer[3] = 128 | @as(uint8, icode & 63); // 0x80 - 0x3F - 10xxxxxx
                4
            },
            else -> 0
        };
    }
}

#[inline]
func len_utf8(code: uint32) -> uint {
    return if code < MAX_ONE_B {
        1
    } else if code < MAX_TWO_B {
        2
    } else if code < MAX_THREE_B {
        3
    } else {
        4
    };
}

#[boxed]
pub struct TooManyBytesError < Throwable {
    msg: string;

    pub func to_string(+self) -> string {
        return self.msg;
    }
}

// convert array of utf8 bytes to single utf32 value will error if more than
// 4 bytes are submitted
func utf8_to_utf32(bytes: [:]uint8) -> !rune {
    if bytes.len == 0 {
        return 0;
    }
    // return ASCII unchanged
    if bytes.len == 1 {
        return bytes[0].to_rune() ?? @unreachable();
    }
    if bytes.len > 4 {
        throw TooManyBytesError(
            "attempted to decode too many bytes, utf-8 is limited to four bytes maximum"
        );
    }
    mut res := (bytes[0] << bytes.len).to_rune() ?? @unreachable();
    mut shift := 6 - bytes.len;
    mut i: uint := 1;
    while i < bytes.len : i += 1 {
        c := bytes[i].to_rune() ?? @unreachable();
        res = (@as(uint32, res) << shift).to_rune() ?? @unreachable();
        res |= c & 63; // 0x3F
        shift = 6;
    }
    return res;
}
