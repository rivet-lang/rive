// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;

func setup_signals_handler() {
    sa := libc.sigaction_t(sa_sigaction: signals_handler, sa_flags: libc.SA_SIGINFO);
    unsafe {
        _ = libc.sigaction(libc.SIGSEGV, &sa, none);
        _ = libc.sigaction(libc.SIGBUS, &sa, none);
        _ = libc.sigaction(libc.SIGFPE, &sa, none);
    }
}

/// The default signal handler for signals. It is needed to process signals and give
/// understandable error messages along with the backtrace.
func signals_handler(_sig: int32, info: &mut libc.siginfo_t, _context: rawptr) {
    match info.si_signo {
		libc.SIGSEGV, libc.SIGBUS -> segfault_handler(), // It panics on SIGSEGV and SIGBUS.
		libc.SIGFPE -> fpe_handler(),
		else -> { }
	}
}

func segfault_handler() {
    console_ewriteln(
        if runtime_is_started {
            "runtime error: invalid memory address or null pointer dereference"
        } else {
            "runtime error: invalid memory address or null pointer dereference while starting the core"
        }
    );
    bt_print(4);
    process_exit(100);
}

func fpe_handler() {
    console_ewriteln(
        if runtime_is_started {
            "runtime error: floating point exception"
        } else {
            "runtime error: floating point exception while starting the core"
        }
    );
    bt_print(4);
    process_exit(100);
}
