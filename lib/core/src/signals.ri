// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c/libc;

func setup_signals_handler() {
    sa := libc.sigaction_t(sa_sigaction: signals_handler, sa_flags: libc.SA_SIGINFO);
    unsafe {
        _ = libc.sigaction(libc.SIGSEGV, &sa, none);
        _ = libc.sigaction(libc.SIGBUS, &sa, none);
    }
}

/// The default signal handler for signals. It is needed to process signals and give
/// understandable error messages along with the backtrace.
func signals_handler(sig: int32, info: *mut libc.siginfo_t, context: mut_anyptr) {
    switch info.si_signo {
		libc.SIGSEGV, libc.SIGBUS => segfault_handler(), // It panics on SIGSEGV and SIGBUS.
		else => { }
	}
}

func segfault_handler() {
    console_eprintln(
        if libcore_started {
            "panic: invalid memory address or null pointer dereference"
        } else {
            "panic: invalid memory address or null pointer dereference while starting the core"
        }
    );
    bt_print(4);
    process_exit(1);
}
