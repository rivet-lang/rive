// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

#[used]
static empty_slice: _slice = _slice{};

#[used]
struct _slice {
    ptr: *mut void;
    elem_size: usize;
    len: usize;

    #[used]
    pub unsafe fn from_array(arr: *mut void, elem_size: usize, len: usize) _slice {
        return _slice{
            ptr: unsafe { arr },
            elem_size: elem_size,
            len: len
        };
    }

    #[used]
    fn get(&self, idx: usize) *mut void {
        if (idx >= self.len) {
            panic("slice index out of range (index: {}, len: {})", idx, self.len);
        }
        return unsafe { as(*mut u8, self.ptr) + idx * self.elem_size };
    }

    #[used]
    unsafe fn raw_get(&self, idx: usize) *mut void {
        return unsafe { as(*mut u8, self.ptr) + idx * self.elem_size };
    }

    #[used]
    fn set(&self, idx: usize, val: *void) {
        if (idx >= self.len) {
            panic("slice index out of range (index: {}, len: {})", idx, self.len);
        }
        _ = unsafe {
            stdc::memcpy(
                as(*mut u8, self.ptr) + self.elem_size * idx, val, self.elem_size
            )
        };
    }

    #[used]
    fn ==(&self, rhs: &Self) bool {
        if (self.len != rhs.len) {
            return false;
        }
        return unsafe { stdc::memcmp(self.ptr, rhs.ptr, self.len) == 0 };
    }

    #[used]
    fn !=(&self, rhs: &Self) bool { return !self.==(rhs); }

    #[used]
    fn slice(&self, start: usize, end: usize) _slice {
        if (start > end or end > self.len) {
            panic(
                "slice index out of range (range: {}..{}, len: {})", start, end,
                self.len
            );
        }
        let len = end - start;
        if (len == self.len) {
            return self.*;
        }
        return _slice{
            ptr: unsafe { as(*mut u8, self.ptr) + (start * self.elem_size) },
            elem_size: self.elem_size,
            len: len
        };
    }

    #[used]
    fn slice_from(&self, start: usize) _slice {
        return self.slice(start, self.len);
    }
}
