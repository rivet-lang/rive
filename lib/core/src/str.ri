// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

using pkg::traits::ToString;
using pkg::utils::StaticBuffer;

#[used]
struct _str {
    ptr: *u8;
    pub len: usize;
}

extend str {
    pub unsafe func from_raw(ptr: *u8) str {
        return unsafe { str::from_raw_with_len(ptr, stdc::strlen(ptr)) };
    }

    pub unsafe func from_raw_with_len(ptr: *u8, len: usize) str {
        return _str{
            ptr: unsafe { ptr },
            len: len
        };
    }

    #[used]
    func at(&self, idx: usize) u8 {
        if (idx >= self.len) {
            panic("string index out of range (index: {}, len: {})", idx, self.len);
        }
        return unsafe { self.ptr[idx] };
    }

    /// Returns a string formatted with all the values passed.
    ///
    /// Each replacement position is marked with `{}`:
    ///
    /// `"x: {}".fmt(1) == "x: 1"`
    ///
    /// It is also possible to use a specific position within the replace position:
    ///
    /// `"x: {1} | {0}".fmt(1, 2) == "x: 2 | 1"`
    ///
    /// If no argument is passed, the string is returned unchanged.
    ///
    /// To escape `{` and `}`, `{{` and `}}` can be used, this does not apply if no
    /// argument is passed.
    ///
    /// If the replacement positions exceed the number of passed arguments, a panic
    /// occurs.
    pub func fmt(&self, args: ...traits::ToString) String {
        if (args.len == 0) { return self.to_string(); }
        var mut res = String::with_capacity(self.len);
        var mut i: usize = 0;
        var mut args_idx: usize = 0;
        while (i < self.len) {
            var b = unsafe { self.ptr[i] };
            var b2 = if (i + 1 < self.len) unsafe { self.ptr[i + 1] } else 0;
            if (b == b'{') {
                if (b2 == b'{') { // escaping '{'
                    res.push(b'{');
                    i++;
                } else if (b2 == b'}') {
                    var arg_idx = args_idx++;
                    if (arg_idx >= args.len) {
                        panic(
                            "fmt: argument index out of range (argument index: {}, len: {}, index: {})",
                            arg_idx, args.len, i
                        );
                    }
                    res.push_string(args[arg_idx].to_string());
                    i++;
                } else if (b2.is_digit()) {
                    var start = i++;
                    var buf = StaticBuffer{};
                    while (unsafe { self.ptr[i] != b'}' }) {
                        buf.push(unsafe { self.ptr[i++] });
                        if (i >= self.len) {
                            panic("fmt: incomplete format string (index: {})", start);
                        }
                    }
                    var index = buf.as_u64();
                    if (index >= args.len) {
                        panic(
                            "fmt: argument index out of range (index: {}, len: {})",
                            index, args.len
                        );
                    }
                    res.push_string(args[index].to_string());
                } else {
                    panic("fmt: expecting closing '}}' in format string (index: {})", i);
                }
            } else if (b == b'}') {
                if (b2 == b'}') { // escaping '}'
                    res.push(b'}');
                    i++;
                } else {
                    panic("fmt: single '}}' encountered in format string (index: {})", i);
                }
            } else {
                res.push(b);
            }
            i++;
        }
        return res;
    }

	/// Returns the index of byte `b` if found in the string.
	pub func index_byte(self, b: u8) ?usize {
		for (i in 0..self.len) {
			if (unsafe { self.ptr[i] == b }) {
				return i;
			}
		}
		return none;
	}

	/// Returns the position of the first character of the input string.
	/// It will return `none` if the input string can't be found.
	pub func index(self, p: str) ?usize {
		if (p.len > self.len or p.len == 0) {
			return none;
		}
		var mut i: usize = 0;
		while (i < self.len) {
			var mut j: usize = 0;
			while (j < p.len and unsafe { self.ptr[i + j] == p.ptr[j] }) {
				j++;
			}
			if (j == p.len) {
				return i;
			}
			i++;
		}
		return none;
	}

    /// Returns the number of runes contained in `self`.
    pub func runes_count(&self) usize {
        return cstr_runes_count(unsafe { self.ptr }, self.len);
    }

	/// Returns `true` if the string contains `substr`.
	pub func contains(self, substr: str) bool {
		if (substr.len == 0) {
			return true;
		}
		if (var _ = self.index(substr)) {
			return true;
		}
		return false;
	}

    /// Returns `true` if the string starts with `p`.
	pub func starts_with(self, p: str) bool {
		if (p.len > self.len) {
            return false;
		}
		for (i in 0..p.len) {
			if (unsafe { self.ptr[i] != p[i] }) {
				return false;
			}
		}
		return true;
	}

	/// Returns `true` if the string ends with `p`.
	pub func ends_with(self, p: str) bool {
		if (p.len > self.len) {
            return false;
        }
		for (i in 0..p.len) {
			if (unsafe { p[i] != self.ptr[self.len - p.len + i] }) {
				return false;
			}
		}
		return true;
	}

    pub func is_empty(&self) bool { return self.len == 0; }

    pub func as_ptr(&self) *u8 { return unsafe { self.ptr }; }

    pub func as_bytes(&self) [u8] {
        return unsafe { _slice::from_array(as(*mut u8, self.ptr), size_of!(u8), self.len) };
    }

    pub func ==(&self, rhs: &Self) bool {
        if (self.len != rhs.len) {
            return false;
        }
        unsafe {
            if (self.len > 0) {
                var last_idx = self.len - 1;
                if (self.ptr[last_idx] != rhs.ptr[last_idx]) {
                    return false;
                }
            }
            return mem::cmp(self.ptr, rhs.ptr, rhs.len) == 0;
        }
    }

    pub func !=(&self, rhs: &Self) bool { return !self.==(rhs); }

    pub func <(&self, rhs: &Self) bool {
        for (i in 0..self.len) {
            unsafe {
                if (i >= rhs.len or self.ptr[i] > rhs.ptr[i]) {
                    return false;
                } else if (self.ptr[i] < rhs.ptr[i]) {
                    return true;
                }
            }
        }
        if (self.len < rhs.len) {
            return true;
        }
        return false;
    }

    pub func >(&self, rhs: &Self) bool { return !self.<(rhs); }

    pub func <=(&self, rhs: &Self) bool { return self.<(rhs) or self.==(rhs); }

    pub func >=(&self, rhs: &Self) bool { return self.>(rhs) or self.==(rhs); }

    #[used]
    func slice(&self, start: usize, end: usize) str {
        unsafe {
            if (start > end or start > self.len or end > self.len) {
                panic(
                    "string slice index out of range (range: {}..{}, len: {})", start,
                    end, self.len
                );
            }
            var len = end - start;
            if (len == self.len) {
                return self.*;
            }
            return _str{
                ptr: self.ptr + start,
                len: len
            };
        }
    }

    #[used]
    func slice_from(&self, start: usize) str {
        return self.slice(start, self.len);
    }
}

extend str for ToString {
    func to_string(&self) String { return String::from_str(self.*); }
}
