// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c/libc;

static emptyString := string(c"", 0, true);

#[boxed]
public struct string < Stringable, Hashable, Throwable {
    public ptr: [&]uint8;
    public len: uint;
    is_ref: bool;

    #[unsafe]
    public func from_raw(ptr: ?[&]uint8, is_ref: bool := false) -> Self {
        if safe_ptr := ptr {
            return unsafe {
                Self.from_raw_with_len(safe_ptr, libc.strlen(ptr), is_ref)
            };
        }
        return emptyString;
    }

    #[unsafe]
    public func from_raw_with_len(ptr: ?[&]uint8, len: uint, is_ref: bool := false) -> Self {
        if len == 0 {
            return emptyString;
        }
        return if safe_ptr := ptr {
            if unsafe { safe_ptr[len] != 0 } {
                process_panic("`ptr` is not a valid string, doesn't ends with NLL byte");
            }
            Self(safe_ptr, len, is_ref)
        } else {
            emptyString
        };
    }

    public func from_byte(byte: uint8) -> Self {
        res := unsafe { @as([&]mut uint8, internal_alloc(2)) };
        unsafe {
            res[0] = byte;
            res[1] = 0;
        }
        return Self(res, 1);
    }

    /// Returns a string with the bytes stored in `bytes`. If the length of
    /// `bytes` is 0, an empty string is returned instead.
    public func from_bytes(bytes: []uint8) -> Self {
        if bytes.len == 0 {
            return emptyString;
        }
        res := unsafe { @as([&]mut uint8, internal_alloc(bytes.len + 1)) };
        unsafe {
            mem_copy(res, &bytes[0], bytes.len);
            res[bytes.len] = 0;
        }
        return Self(res, bytes.len);
    }

    func at(self, idx: uint) -> uint8 {
        if idx >= self.len {
            process_panic("string index out of range (index: {}, len: {})", idx, self.len);
        }
        return unsafe { self.ptr[idx] };
    }

    #[inline]
    public func repeat(self, count: uint) -> Self {
        return if count == 0 {
            emptyString
        } else if count == 1 {
            self
        } else {
            len := self.len * count;
            res := unsafe { @as([&]mut uint8, internal_alloc(len)) };
            unsafe {
                mut i: uint := 0;
                while i < count : i += 1 {
                    mem_copy(@ptr_add(res, i * self.len), self.ptr, self.len);
                }
                res[len] = 0;
            }
            Self(res, len)
        };
    }

    public func concat(self, others: ...Self) -> Self {
        if others.len == 0 {
            return self;
        }
        mut sb := StringBuilder.from_string(self);
        for other in others {
            sb.write_string(other);
        }
        return sb.to_string();
    }

    /// Returns a string array of the string split by '\t' and ' '.
    public func fields(self) -> []Self {
        mut res := @vec(Self);
        mut word_start: uint := 0;
        mut word_len: uint := 0;
        mut is_in_word := false;
        mut is_space := false;
        for i, c in self.as_bytes() {
            is_space = c in [@as(uint8, 32), 9, 10];
            if !is_space {
                word_len += 1;
            }
            if !is_in_word and !is_space {
                word_start = i;
                is_in_word = true;
                continue;
            }
            if is_space and is_in_word {
                res.push(self[word_start..word_start + word_len]);
                is_in_word = false;
                word_len = 0;
                word_start = 0;
                continue;
            }
        }
        if is_in_word and word_len > 0 {
            // collect the remainder word at the end
            res.push(self[word_start..self.len]);
        }
        return res;
    }

    /// Wraps the given string within `width` in characters.
    public func wrap(self, width: uint := 60, end: Self := "\n") -> Self {
        words := self.fields();
        if words.len == 0 {
            return emptyString;
        }
        mut wrapped := StringBuilder.from_string(words[0]);
        mut space_left := width - wrapped.len();
        mut i: uint := 1;
        while i < words.len : i += 1 {
            word := words[i];
            if word.len + 1 > space_left {
                wrapped.write_string(end);
                wrapped.write_string(word);
                space_left = width - word.len;
            } else {
                wrapped.write_string(" ");
                wrapped.write_string(word);
                space_left -= 1 + word.len;
            }
        }
        return wrapped.to_string();
    }

    /// Returns a string formatted with all the values passed.
    ///
    /// Each replacement position is marked with `{}`:
    ///
    /// `"x: {}".fmt(1) == "x: 1"`
    ///
    /// It is also possible to use a specific position within the replace position:
    ///
    /// `"x: {1} | {0}".fmt(1, 2) == "x: 2 | 1"`
    ///
    /// If no argument is passed, the string is returned unchanged.
    ///
    /// To escape `{` and `}`, `{{` and `}}` can be used, this does not apply if no
    /// argument is passed.
    ///
    /// If the replacement positions exceed the number of passed arguments, a panic
    /// occurs.
    #[inline]
    public func fmt(self, args: ...Stringable) -> Self {
        return if args.len == 0 {
            self
        } else {
            StringFormatter(self).fmt(args)
        };
    }

    /// Returns the number of occurrences of `substr` in the string or 0 if no
    /// `substr` could be found.
    public func count(self, substr: Self) -> uint {
        if self.len == 0 or substr.len == 0 {
            return 0;
        }
        if substr.len > self.len {
            return 0;
        }
        mut n: uint := 0;
        if substr.len == 1 {
            for l in self.as_bytes() {
                if l == substr[0] {
                    n += 1;
                }
            }
            return n;
        }
        mut i: uint := 0;
        while {
            i = self.index_after_of(substr, i) ?? return n;
            i += substr.len;
            n += 1;
        }
        return 0;
    }

    /// Returns the contents before `sub` in the string.
    /// If the substring is not found, it returns the full input string.
    public func all_before_of(self, sub: Self) -> Self {
        return if pos := self.index_of(sub) {
            self[..pos]
        } else {
            self
        };
    }

    /// Returns the contents before the last occurrence of `sub` in the string.
    public func all_before_of_last(self, sub: Self) -> Self {
        return if pos := self.last_index_of(sub) {
            self[..pos]
        } else {
            self
        };
    }

    /// Returns the contents after `sub` in the string. If the substring is
    /// not found, it returns the full input string.
    public func all_after_of(self, sub: Self) -> Self {
        return if pos := self.index_of(sub) {
            self[pos + sub.len..]
        } else {
            self
        };
    }

    /// Returns the contents after the last occurrence of `sub` in the string.
    /// If the substring is not found, it returns the full input string.
    public func all_after_of_last(self, sub: Self) -> Self {
        return if pos := self.last_index_of(sub) {
            self[pos + sub.len..]
        } else {
            self
        };
    }

    /// Returns the index of byte `b` if found in the string.
    public func index_of_byte(self, b: uint8) -> ?uint {
        mut i: uint := 0;
        while i < self.len : i += 1 {
            if unsafe { self.ptr[i] == b } {
                return i;
            }
        }
        return none;
    }

    /// Returns the position of the first character of the input string.
    /// It will return `none` if the input string can't be found.
    public func index_of(self, p: Self) -> ?uint {
        if p.len > self.len or p.len == 0 {
            return none;
        }
        mut i: uint := 0;
        while i < self.len : i += 1 {
            mut j: uint := 0;
            while j < p.len and unsafe { self.ptr[i + j] == p.ptr[j] } : j += 1 { }
            if j == p.len {
                return i;
            }
        }
        return none;
    }

    /// Returns the position of the input string, starting search from `start` position.
    public func index_after_of(self, p: Self, start: uint) -> ?uint {
        if p.len > self.len {
            return none;
        }
        if start >= self.len {
            return none;
        }
        mut i := start;
        while i < self.len : i += 1 {
            mut j: uint := 0;
            mut ii := i;
            while j < p.len and unsafe { self.ptr[ii] == p.ptr[j] } {
                j += 1;
                ii += 1;
            }
            if j == p.len {
                return i;
            }
        }
        return none;
    }

    /// Returns the position of any of the characters in the input string if found.
    public func index_of_any(self, chars: Self) -> ?uint {
        for i, b in self.as_bytes() {
            for c in chars.as_bytes() {
                if b == c {
                    return i;
                }
            }
        }
        return none;
    }

    /// Linear search for the last index of `byte` inside a string.
    public func last_index_of_byte(self, byte: uint8) -> ?uint {
        mut i: uint := self.len - 1;
        while i >= 0 : i -= 1 {
            if unsafe { self.ptr[i] == byte } {
                return i;
            } else if i == 0 {
                // avoid panic because the value of `i` will reach 0, then `1`
                // will be subtracted from it, which will cause an integer
                // overflow and cause `i` to be equal to `uint.MAX`.
                // TODO: find a way to avoid this in code generation.
                break;
            }
        }
        return none;
    }

    /// Returns the position of the last occurence of the input string.
    public func last_index_of(self, p: Self) -> ?uint {
        if p.len > self.len or p.len == 0 {
            return none;
        }
        mut i: uint := self.len - p.len;
        while i >= 0 : i -= 1 {
            mut j: uint := 0;
            while j < p.len and unsafe { self.ptr[i + j] == p.ptr[j] } : j += 1 { }
            if j == p.len {
                return i;
            }
            if i == 0 {
                break;
            }
        }
        return none;
    }

    /// Returns the string found between `start` string and `end` string.
    public func find_between(self, start: Self, end: Self) -> Self {
        start_pos := self.index_of(start) ?? return emptyString;
        val := self.slice(start_pos + start.len, self.len);
        end_pos := val.index_of(end) ?? return val;
        return val.slice(0, end_pos);
    }

    /// Strips any of the characters given in `cutset` from the start and end of
    /// the string.
    public func trim(self, cutset: Self) -> Self {
        if self.len < 1 or cutset.len < 1 {
            return self;
        }
        (pos_left, pos_right) := self.trim_indexes(cutset);
        return self.slice(pos_left, pos_right);
    }

    /// Gets the new start and end indexes of a string when any of the characters
    /// given in `cutset` were stripped from the start and end of the string. Should
    /// be used as an input to `substr()`. If the string contains only the characters
    /// in `cutset`, both values returned are zero.
    public func trim_indexes(self, cutset: Self) -> (uint, uint) {
        mut pos_left: uint := 0;
        mut pos_right: uint := if self.len == 0 { 0 } else { self.len - 1 };
        mut cs_match := true;
        cutset_bytes := cutset.as_bytes();
        while pos_left <= self.len and pos_right > 0 and cs_match {
            cs_match = false;
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos_left] == cs } {
                    pos_left += 1;
                    cs_match = true;
                    break;
                }
            }
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos_right] == cs } {
                    pos_right -= 1;
                    cs_match = true;
                    break;
                }
            }
            if pos_left > pos_right {
                return (0, 0);
            }
        }
        return (pos_left, pos_right + 1);
    }

    /// Strips any of the characters given in `cutset` from the left of the
    /// string.
    public func trim_left(self, cutset: Self) -> Self {
        if self.len < 1 or cutset.len < 1 {
            return self;
        }
        mut pos: uint := 0;
        cutset_bytes := cutset.as_bytes();
        while pos < self.len : pos += 1 {
            mut found := false;
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos] == cs } {
                    found = true;
                    break;
                }
            }
            if !found {
                break;
            }
        }
        return self.slice_from(pos);
    }

    /// Strips any of the characters given in `cutset` from the right of the
    /// string.
    public func trim_right(self, cutset: Self) -> Self {
        if self.len < 1 or cutset.len < 1 {
            return self;
        }
        mut pos := self.len - 1;
        cutset_bytes := cutset.as_bytes();
        while pos >= 0 : pos -= 1 {
            mut found := false;
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos] == cs } {
                    found = true;
                }
            }
            if !found {
                break;
            }
            if pos == 0 {
                break;
            }
        }
        return self.slice(0, pos + 1);
    }

    /// Strips any of ` `, `\n`, `\t`, `\v`, `\f`, `\r` from the start and end of
    /// the string.
    #[inline]
    public func trim_space(self) -> Self {
        return self.trim(" \n\t\v\f\r");
    }

    /// Replaces all occurences of `rep` with the string passed in `with_`.
    public func replace(self, rep: Self, with: Self) -> Self {
        if self.len == 0 or rep.len == 0 or rep.len > self.len {
            return self;
        } else if !self.contains(rep) {
            return self;
        }
        mut idx: uint := 0;
        mut idxs := @vec(uint);
        while {
            idx = self.index_after_of(rep, idx) ?? break;
            idxs.push(idx);
            idx += rep.len;
        }
        if idxs.len == 0 {
            return self;
        }
        new_len := self.len + idxs.len * (with.len - rep.len);
        b := unsafe { @as([&]mut uint8, internal_alloc(new_len)) };
        (mut b_i: uint, mut s_idx: uint) := (0, 0);
        unsafe {
            for rep_pos in idxs {
                mut i: uint := s_idx;
                while i < rep_pos : i += 1 {
                    b[b_i] = self.ptr[i];
                    b_i += 1;
                }
                s_idx = rep_pos + rep.len;
                i = 0;
                while i < with.len : i += 1 {
                    b[b_i] = with.ptr[i];
                    b_i += 1;
                }
            }
            if s_idx < self.len {
                mut i: uint := s_idx;
                while i < self.len : i += 1 {
                    b[b_i] = self.ptr[i];
                    b_i += 1;
                }
            }
            b[new_len] = 0;
        }
        return unsafe { Self.from_raw_with_len(b, new_len) };
    }

    #[inline]
    public func as_bytes(self) -> []uint8 {
        return unsafe {
            Vector.from_array_no_alloc(
                @as(&mut uint8, self.ptr), @size_of(uint8), self.len
            )
        };
    }

    /// Returns an array of all the UTF8 runes in the string `self` which is useful
    /// if you want random access to them.
    public func as_runes(self) -> []rune {
        mut runes := @vec(rune, self.runes_count());
        mut i: uint := 0;
        while i < self.len : i += 1 {
            char_len := unsafe { self.ptr[i] }.len_utf8();
            unsafe {
                runes.push(if char_len > 1 {
                    end := if self.len - 1 >= i + char_len {
                        i + char_len
                    } else {
                        self.len
                    };
                    r := self[i..end];
                    i += char_len - 1;
                    r.utf32_code()
                } else {
                    self.ptr[i].to_rune() ?? @unreachable()
                });
            }
        }
        return runes;
    }

    #[inline]
    public func utf32_code(self) -> rune {
        return utf8_to_utf32(self.as_bytes()) catch 0;
    }

    /// Splits the string based on the passed `delim` substring. It returns the
    /// first `nth` parts. When `nth` == 0, return all the splits.
    /// The last returned element has the remainder of the string, even if the
    /// remainder contains more `delim` substrings.
    public func split(self, delim: Self, nth: uint := 0) -> []Self {
        mut i: uint := 0;
        mut res := @vec(Self);
        match delim.len {
            0 -> {
                i = 1;
                for ch in self.as_bytes() {
                    if nth > 0 and i >= nth {
                        res.push(self[i..]);
                        break;
                    }
                    res.push(ch.to_ascii());
                    i += 1;
                }
                return res;
            },
            1 -> {
                mut start: uint := 0;
                delim_byte := delim[0];
                while i < self.len {
                    if unsafe { self.ptr[i] == delim_byte } {
                        if nth > 0 and res.len == nth - 1 {
                            break;
                        }
                        res.push(self[start..i]);
                        start = i + delim.len;
                        i = start;
                    } else {
                        i += 1;
                    }
                }
                if nth < 1 or res.len < nth {
                    res.push(self[start..]);
                }
                return res;
            },
            else -> {
                mut start: uint := 0;
                while i <= self.len {
                    is_delim := i + delim.len <= self.len and self[i..i + delim.len] == delim;
                    if is_delim {
                        if nth > 0 and res.len == nth - 1 {
                            break;
                        }
                        res.push(self[start..i]);
                        start = i + delim.len;
                        i = start;
                    } else {
                        i += 1;
                    }
                }
                if nth < 1 or res.len < nth {
                    res.push(self[start..]);
                }
                return res;
            }
        }
    }

    /// Splits a string using the chars in the delimiter string as delimiters chars.
    /// If the delimiter string is empty then `.split()` is used.
    public func split_any(self, delim: Self) -> []Self {
        mut i: uint := 0;
        mut res := @vec(Self);
        // check empty source string
        if self.len > 0 {
            // if empty delimiter string using default split
            if delim.len <= 0 {
                return self.split("");
            }
            for index, ch in self.as_bytes() {
                for delim_ch in delim.as_bytes() {
                    if ch == delim_ch {
                        res.push(self[i..index]);
                        i = index + 1;
                        break;
                    }
                }
            }
            if i < self.len {
                res.push(self[i..]);
            }
        }
        return res;
    }

    /// Splits the string by newline characters. `\r` (MacOS), `\n` (POSIX),
    /// and `\r\n` (Windows) line endings are all supported (including mixed line endings).
    /// NOTE: algorithm is "greedy", consuming '\r\n' as a single line ending with higher
    /// priority than '\r' and '\n' as multiple endings
    public func split_into_lines(self) -> []Self {
        mut res := @vec(Self);
        if self.len == 0 {
            return res;
        }
        cr := b'\r';
        lf := b'\n';
        mut line_start: uint := 0;
        mut i: uint := 0;
        while i < self.len : i += 1 {
            if line_start <= i {
                if unsafe { self.ptr[i] == lf } {
                    res.push(if line_start == i {
                        emptyString
                    } else {
                        self[line_start..i]
                    });
                    line_start = i + 1;
                } else if unsafe { self.ptr[i] == cr } {
                    res.push(if line_start == i {
                        emptyString
                    } else {
                        self[line_start..i]
                    });
                    if i + 1 < self.len and unsafe { self.ptr[i + 1] == lf } {
                        line_start = i + 2;
                    } else {
                        line_start = i + 1;
                    }
                }
            }
        }
        if line_start < self.len {
            res.push(self[line_start..]);
        }
        return res;
    }

    /// Returns an iterator that iterates over the slices of `self` that are not
    /// any of the bytes in `delimiter_bytes`.
    ///
    /// `"   abc def    ghi  ".tokenize(b' ')` will return slices for "abc", "def",
    /// "ghi", none, in that order.
    ///
    /// If `self` is empty, the iterator will return none.
    /// If `delimiter_bytes` does not exist in self, the iterator will return `self`,
    /// none, in that order.
    #[inline]
    public func tokenize(self, delimiter_bytes: ...uint8) -> TokenIterator {
        return TokenIterator(self, delimiter_bytes);
    }

    public func ==(self, rhs: Self) -> bool {
        if self.len != rhs.len {
            return false;
        }
        if self.len > 0 {
            last_idx := self.len - 1;
            if unsafe { self.ptr[last_idx] != rhs.ptr[last_idx] } {
                return false;
            }
        }
        return mem_cmp(self.ptr, rhs.ptr, rhs.len) == 0;
    }

    #[inline]
    public func !=(self, rhs: Self) -> bool {
        return !(self == rhs);
    }

    public func <(self, rhs: Self) -> bool {
        mut i: uint := 0;
        while i < self.len : i += 1 {
            unsafe {
                if i >= rhs.len or self.ptr[i] > rhs.ptr[i] {
                    return false;
                } else if self.ptr[i] < rhs.ptr[i] {
                    return true;
                }
            }
        }
        if self.len < rhs.len {
            return true;
        }
        return false;
    }

    #[inline]
    public func >(self, rhs: Self) -> bool {
        return !(self < rhs);
    }

    #[inline]
    public func <=(self, rhs: Self) -> bool {
        return self < rhs or self == rhs;
    }

    #[inline]
    public func >=(self, rhs: Self) -> bool {
        return self > rhs or self == rhs;
    }

    /// Returns `true` if the string contains `substr`.
    #[inline]
    public func contains(self, substr: Self) -> bool {
        return substr.len == 0 or self.index_of(substr) !is none;
    }

    /// Returns `true` if the string starts with `p`.
    public func starts_with(self, p: Self) -> bool {
        if p.len > self.len {
            return false;
        }
        mut i: uint := 0;
        while i < p.len : i += 1 {
            if unsafe { self.ptr[i] != p[i] } {
                return false;
            }
        }
        return true;
    }

    /// Returns `true` if the string ends with `p`.
    public func ends_with(self, p: Self) -> bool {
        if p.len > self.len {
            return false;
        }
        mut i: uint := 0;
        while i < p.len : i += 1 {
            if unsafe { p[i] != self.ptr[self.len - p.len + i] } {
                return false;
            }
        }
        return true;
    }

    /// Returns the number of runes contained in `self`.
    #[inline]
    public func runes_count(self) -> uint {
        return cstr_runes_count(self.ptr, self.len);
    }

    #[inline]
    public func is_empty(self) -> bool {
        return self.len == 0;
    }

    public func is_digit(self) -> bool {
        for ch in self.as_bytes() {
            if !ch.is_digit() {
                return false;
            }
        }
        return true;
    }

    func slice(self, start: uint, end: uint) -> Self {
        unsafe {
            if start > end or start > self.len or end > self.len {
                process_panic(
                    "string slice index out of range (range: {}..{}, len: {})", start,
                    end, self.len
                );
            }
            len := end - start;
            if len == self.len {
                return self;
            }
            return Self(@ptr_add(self.ptr, start), len, is_ref: true);
        }
    }

    #[inline]
    func slice_from(self, start: uint) -> Self {
        return self.slice(start, self.len);
    }

    public func clone(self) -> Self {
        if self.len == 0 {
            return emptyString;
        }
        res := unsafe { @as([&]mut uint8, internal_alloc(self.len + 1)) };
        unsafe {
            mem_copy(res, self.ptr, self.len);
            res[self.len] = 0;
        }
        return Self(res, self.len);
    }

    #[inline]
    public func hash(self) -> uint {
        return sum64_string(self);
    }

    #[inline]
    public func to_string(self) -> Self {
        return self;
    }

    func __drop__(self) {
        if !self.is_ref {
            unsafe {
                mem_dealloc(self.ptr);
            }
        }
    }
}
