// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;

var empty_string := string(c"", 0, true);

#[boxed]
pub struct string < Stringable, Hashable, Throwable {
    pub ptr: [&]uint8;
    pub len: uint;
    is_ref: bool;

    #[unsafe]
    pub func from_raw(ptr: ?[&]uint8, is_ref: bool := false) -> Self {
        if safe_ptr := ptr {
            return unsafe {
                Self.from_raw_with_len(safe_ptr, libc.strlen(ptr), is_ref)
            };
        }
        return empty_string;
    }

    #[unsafe]
    pub func from_raw_with_len(ptr: ?[&]uint8, len: uint, is_ref: bool := false) -> Self {
        if len == 0 {
            return empty_string;
        }
        return if safe_ptr := ptr {
            if unsafe { safe_ptr[len] != 0 } {
                runtime_error("`ptr` is not a valid string, doesn't ends with NLL byte");
            }
            Self(safe_ptr, len, is_ref)
        } else {
            empty_string
        };
    }

    pub func from_byte(byte: uint8) -> Self {
        res := unsafe { @as([&]mut uint8, mem_alloc(2)) };
        unsafe {
            res[0] = byte;
            res[1] = 0;
        }
        return Self(res, 1);
    }

    /// Returns a string with the bytes stored in `bytes`. If the length of
    /// `bytes` is 0, an empty string is returned instead.
    pub func from_bytes(bytes: [:]uint8) -> Self {
        if bytes.len == 0 {
            return empty_string;
        }
        res := unsafe { @as([&]mut uint8, mem_alloc(bytes.len + 1)) };
        unsafe {
            mem_copy(res, &bytes[0], bytes.len);
            res[bytes.len] = 0;
        }
        return Self(res, bytes.len);
    }

    func at(self, idx: uint) -> uint8 {
        if idx >= self.len {
            runtime_error("string index out of range (index: {}, len: {})", idx, self.len);
        }
        return unsafe { self.ptr[idx] };
    }

    #[inline]
    pub func repeat(self, count: uint) -> Self {
        return if count == 0 {
            empty_string
        } else if count == 1 {
            self
        } else {
            len := self.len * count;
            res := unsafe { @as([&]mut uint8, mem_alloc(len)) };
            unsafe {
                mut i: uint := 0;
                while i < count : i += 1 {
                    mem_copy(@ptr_add(res, i * self.len), self.ptr, self.len);
                }
                res[len] = 0;
            }
            Self(res, len)
        };
    }

    pub func concat(self, others: ...Self) -> Self {
        if others.len == 0 {
            return self;
        }
        mut sb := StringBuilder.from_string(self);
        for other in others {
            sb.write_string(other);
        }
        return sb.to_string();
    }

    /// Returns a string array of the string split by '\t' and ' '.
    pub func fields(self) -> []Self {
        mut res := []Self();
        mut word_start: uint := 0;
        mut word_len: uint := 0;
        mut is_in_word := false;
        mut is_space := false;
        for i, c in self.as_bytes() {
            is_space = c in [32, 9, 10];
            if !is_space {
                word_len += 1;
            }
            if !is_in_word && !is_space {
                word_start = i;
                is_in_word = true;
                continue;
            }
            if is_space && is_in_word {
                res.push(self.substr(word_start, word_start + word_len));
                is_in_word = false;
                word_len = 0;
                word_start = 0;
                continue;
            }
        }
        if is_in_word && word_len > 0 {
            // collect the remainder word at the end
            res.push(self.substr(word_start, self.len));
        }
        return res;
    }

    /// Wraps the given string within `width` in characters.
    pub func wrap(self, width: uint := 60, end: Self := "\n") -> Self {
        words := self.fields();
        if words.len == 0 {
            return empty_string;
        }
        mut wrapped := StringBuilder.from_string(words[0]);
        mut space_left := width - wrapped.len();
        mut i: uint := 1;
        while i < words.len : i += 1 {
            word := words[i];
            if word.len + 1 > space_left {
                wrapped.write_string(end);
                wrapped.write_string(word);
                space_left = width - word.len;
            } else {
                wrapped.write_string(" ");
                wrapped.write_string(word);
                space_left -= 1 + word.len;
            }
        }
        return wrapped.to_string();
    }

    /// Returns a string formatted with all the values passed.
    ///
    /// Each replacement position is marked with `{}`:
    ///
    /// `"x: {}".fmt(1) == "x: 1"`
    ///
    /// It is also possible to use a specific position within the replace position:
    ///
    /// `"x: {1} | {0}".fmt(1, 2) == "x: 2 | 1"`
    ///
    /// If no argument is passed, the string is returned unchanged.
    ///
    /// To escape `{` and `}`, `{{` and `}}` can be used, this does not apply if no
    /// argument is passed.
    ///
    /// If the replacement positions exceed the number of passed arguments, a panic
    /// occurs.
    #[inline]
    pub func fmt(self, args: ...Stringable) -> Self {
        return if args.len == 0 {
            self
        } else {
            StringFormatter(self).fmt(args)
        };
    }

    #[inline]
    pub func as_bytes(self) -> [:]uint8 {
        return unsafe {
            Slice(@as(&mut uint8, self.ptr), @size_of(uint8), self.len)
        };
    }

    /// Returns an array of all the UTF8 runes in the string `self` which is useful
    /// if you want random access to them.
    pub func as_runes(self) -> []rune {
        mut runes := []rune(cap: self.runes_count());
        mut i: uint := 0;
        while i < self.len : i += 1 {
            char_len := unsafe { self.ptr[i] }.len_utf8();
            unsafe {
                runes.push(if char_len > 1 {
                    end := if self.len - 1 >= i + char_len {
                        i + char_len
                    } else {
                        self.len
                    };
                    r := self.substr(i, end);
                    i += char_len - 1;
                    r.utf32_code()
                } else {
                    self.ptr[i].to_rune() ?? @unreachable()
                });
            }
        }
        return runes;
    }

    #[inline]
    pub func utf32_code(self) -> rune {
        return utf8_to_utf32(self.as_bytes()) catch 0;
    }

    /// Returns an iterator that iterates over the slices of `self` that are not
    /// any of the bytes in `delimiter_bytes`.
    ///
    /// `"   abc def    ghi  ".tokenize(' ')` will return slices for "abc", "def",
    /// "ghi", none, in that order.
    ///
    /// If `self` is empty, the iterator will return none.
    /// If `delimiter_bytes` does not exist in self, the iterator will return `self`,
    /// none, in that order.
    #[inline]
    pub func tokenize(self, delimiter_bytes: ...uint8) -> TokenIterator {
        return TokenIterator(self, delimiter_bytes);
    }

    /// Returns the number of runes contained in `self`.
    #[inline]
    pub func runes_count(self) -> uint {
        return cstr_runes_count(self.ptr, self.len);
    }

    #[inline]
    pub func is_empty(self) -> bool {
        return self.len == 0;
    }

    pub func is_digit(self) -> bool {
        for ch in self.as_bytes() {
            if !ch.is_digit() {
                return false;
            }
        }
        return true;
    }

    /// Returns a portion of the current string as a reference. This does not clone
    /// the returned value.
    pub func substr(self, start: ?uint := none, end: ?uint := none) -> Self {
        start_ := start ?? 0;
        end_ := end ?? self.len;
        if start_ > end_ || start_ > self.len || end_ > self.len {
            runtime_error(
                "substring index [{}:{}] out of range (len: {})", start_, end_,
                self.len
            );
        }
        len := end_ - start_;
        if len == self.len {
            return self;
        }
        return Self(unsafe { @ptr_add(self.ptr, start_) }, len, is_ref: true);
    }

    pub func bytes_between(self, start: ?uint := none, end: ?uint := none) -> [:]uint8 {
        start_ := start ?? 0;
        end_ := end ?? self.len;
        if start_ > end_ || start_ > self.len || end_ > self.len {
            runtime_error(
                "slice index [{}:{}] out of range (len: {})", start_, end_,
                self.len
            );
        }
        len := end_ - start_;
        if len == self.len {
            return Slice(self.ptr, @size_of(uint8), len);
        }
        return Slice(unsafe { @ptr_add(self.ptr, start_) }, @size_of(uint8), len);
    }

    pub func runes_between(self, start: ?uint := none, end: ?uint := none) -> []rune {
        runes := self.as_runes();
        start_ := start ?? 0;
        end_ := end ?? runes.len;
        if start_ > end_ || start_ > runes.len || end_ > runes.len {
            runtime_error(
                "slice index [{}:{}] out of range (len: {})", start_, end_,
                runes.len
            );
        }
        if end_ - start_ == runes.len {
            return runes;
        }
        return runes[start_:end_].to_dynamic_array();
    }

    pub func clone(self) -> Self {
        if self.len == 0 {
            return empty_string;
        }
        res := unsafe { @as([&]mut uint8, mem_alloc(self.len + 1)) };
        unsafe {
            mem_copy(res, self.ptr, self.len);
            res[self.len] = 0;
        }
        return Self(res, self.len);
    }

    #[inline]
    pub func hash(self) -> uint {
        return @as(uint, sum64_string(self));
    }

    #[inline]
    pub func to_string(self) -> Self {
        return self;
    }

    pub func ==(self, rhs: Self) -> bool {
        if self.len != rhs.len {
            return false;
        }
        if self.len > 0 {
            last_idx := self.len - 1;
            if unsafe { self.ptr[last_idx] != rhs.ptr[last_idx] } {
                return false;
            }
        }
        return mem_cmp(self.ptr, rhs.ptr, rhs.len) == 0;
    }

    #[inline]
    pub func !=(self, rhs: Self) -> bool {
        return !(self == rhs);
    }

    pub func <(self, rhs: Self) -> bool {
        mut i: uint := 0;
        while i < self.len : i += 1 {
            unsafe {
                if i >= rhs.len || self.ptr[i] > rhs.ptr[i] {
                    return false;
                } else if self.ptr[i] < rhs.ptr[i] {
                    return true;
                }
            }
        }
        if self.len < rhs.len {
            return true;
        }
        return false;
    }

    #[inline]
    pub func >(self, rhs: Self) -> bool {
        return !(self < rhs);
    }

    #[inline]
    pub func <=(self, rhs: Self) -> bool {
        return self < rhs || self == rhs;
    }

    #[inline]
    pub func >=(self, rhs: Self) -> bool {
        return self > rhs || self == rhs;
    }

    func __drop__(self) {
        if !self.is_ref {
            unsafe {
                mem_dealloc(self.ptr);
            }
        }
    }
}
