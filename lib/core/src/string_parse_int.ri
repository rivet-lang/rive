// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

#[inline]
proc lower(c: uint8) -> uint8 {
    return c | ('x' - 'X');
}

extend string {
    /// This is like `parse_int` but for unsigned numbers.
    /// A sign prefix is not permitted.
    pub proc parse_uint(self, mut base: int32, mut bit_size: uint32) -> !uint {
        if self == "" {
            throw InvalidSyntaxError("empty string");
        }
        s := self;
        base0 := base == 0;

        mut start_index: uint := 0;
        match {
            (base >= 2 && base <= 36) -> { /* valid base; nothing to do */ },
            (base == 0) -> {
                // look for octal, hex prefix.
                base = 10;
                if s[0] == '0' {
                    match {
                        (s.len >= 3 && lower(s[1]) == 'b') -> {
                            base = 2;
                            start_index = 2;
                        },
                        (s.len >= 3 && lower(s[1]) == 'o') -> {
                            base = 8;
                            start_index = 2;
                        },
                        (s.len >= 3 && lower(s[1]) == 'x') -> {
                            base = 16;
                            start_index = 2;
                        },
                        // manage leading zeros in decimal base's numbers
                        s.len >= 2 && (s[1] >= '0' && s[1] <= '9') -> {
                            base = 10;
                            start_index = 1;
                        },
                        else -> {
                            base = 8;
                            start_index = 1;
                        }
                    }
                }
            },
            else -> throw InvalidBaseError("invalid base {}".fmt(base))
        }

        if bit_size == 0 {
            bit_size = int.bits();
        } else if bit_size < 0 || bit_size > 64 {
            throw InvalidBitSizeError("invalid bit size {}".fmt(bit_size));
        }

        // Cutoff is the smallest number such that `cutoff * base > MAX_U64`.
        // Use compile-time constants for common cases.
        cutoff: uint := (uint.MAX / @as(uint, base)) + 1;

        max_val: uint := if bit_size == 64 {
            uint.MAX
        } else {
            (1 << bit_size) - 1
        };
        mut underscores := false;
        mut n: uint := 0;

        mut i: uint := start_index;
        while i < s.len : i += 1 {
            c := s[i];
            cl := lower(c);

            mut d: uint8 := 0;
            match {
                (c == '_' && base0) -> {
                    underscores = true;
                    continue;
                },
                (c >= '0' && c <= '9') -> d = c - '0',
                (cl >= 'a' && cl <= 'z') -> d = cl - 'a' + 1,
                else -> throw InvalidSyntaxError("invalid syntax")
            }

            if d >= @as(uint8, base) {
                throw InvalidSyntaxError("invalid syntax");
            }

            if n >= cutoff {
                // `n * base` overflows
                throw ValueOutOfRangeError("value out of range");
            }
            n *= @as(uint, base);

            n1 := n + @as(uint, d);
            if n1 < n || n1 > max_val {
                // `n + d` overflows
                throw ValueOutOfRangeError("value out of range");
            }
            n = n1;
        }

        if underscores && !underscore_ok(s) {
            throw InvalidSyntaxError("invalid syntax");
        }

        return n;
    }

    /// Interprets a string `s` in the given `base` (0, 2 to 36) and bit size
    /// (0 to 64) and returns the corresponding value i.
    ///
    /// The string may begin with a leading sign: "+" or "-".
    ///
    /// If the base argument is 0, the true base is implied by the string's
    /// prefix following the sign (if present): 2 for "0b", 8 for "0" or "0o",
    /// 16 for "0x", and 10 otherwise. Also, for argument base 0 only,
    /// underscore characters are permitted as defined by the Rivet syntax for
    /// integer literals.
    ///
    /// The `bit_size` argument specifies the integer type that the result must
    /// fit into. Bit sizes 0, 8, 16, 32, and 64 correspond to int8, int16, int32, and
    /// int. If `bit_size` is below 0 or above 64, an error is returned.
    pub proc parse_int(self, base: int32, mut bit_size: uint32) -> !int {
        if self == "" {
            throw InvalidSyntaxError("invalid syntax");
        }

        // pick off leading sign.
        mut s0 := self;
        mut neg := false;
        if self[0] == '+' {
            s0 = self.substr(1);
        } else if self[0] == '-' {
            neg = true;
            s0 = self.substr(1);
        }

        // convert unsigned and check range.
        un := s0.parse_uint(base, bit_size)!;
        if bit_size == 0 {
            bit_size = int.bits();
        }

        cutoff := @as(uint, 1) << bit_size - 1;
        if !neg && un >= cutoff {
            throw ValueOutOfRangeError("value out of range");
        }
        if neg && un > cutoff {
            throw ValueOutOfRangeError("value out of range");
        }

        return if neg { -@as(int, un) } else { @as(int, un) };
    }
}

/// Reports whether the underscores in `s_` are allowed.
/// Checking them in this one procedure lets all the parsers skip over them simply.
/// Underscore must appear only between digits or between a base prefix and a digit.
proc underscore_ok(s_: string) -> bool {
    // saw tracks the last character (class) we saw:
    // ^ for beginning of number,
    // 0 for a digit or base prefix,
    // _ for an underscore,
    // ! for none of the above.
    mut saw := '^';
    mut i: uint := 0;
    mut s := s_;

    // optional sign.
    if s.len >= 1 && (s[0] == '-' || s[0] == '+') {
        s = s.substr(1);
    }

    // optional base prefix.
    mut hex := false;
    if s.len >= 2 && s[i] == '0' && (
        lower(s[1]) == 'b' || lower(s[1]) == 'o' || lower(s[1]) == 'x'
    ) {
        // base prefix counts as a digit for "underscore as digit separator"
        i = 2;
        saw = '0';
        hex = lower(s[1]) == 'x';
    }

    // number proper.
    while i < s.len : i += 1 {
        // digits are always okay.
        if (s[i] >= '0' && s[i] <= '9') ||
            (hex && lower(s[i]) >= 'a' && lower(s[i]) <= 'f') {
            saw = '0';
            continue;
        }
        // underscore must follow digit.
        if s[i] == '_' {
            if saw != '0' {
                return false;
            }
            saw = '_';
            continue;
        }
        // underscore must also be followed by digit.
        if saw == '_' {
            return false;
        }
        // saw non-digit, non-underscore.
        saw = '!';
    }

    return saw != '_';
}
