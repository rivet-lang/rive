// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

extend string {
    /// Returns `true` if the string contains `substr`.
    #[inline]
    pub proc contains(self, substr: Self) -> bool {
        return substr.len == 0 || self.index_of(substr) != none;
    }

    /// Returns `true` if the string starts with `p`.
    pub proc starts_with(self, p: Self) -> bool {
        if p.len > self.len {
            return false;
        }
        mut i: uint := 0;
        while i < p.len : i += 1 {
            if unsafe { self.ptr[i] != p[i] } {
                return false;
            }
        }
        return true;
    }

    /// Returns `true` if the string ends with `p`.
    pub proc ends_with(self, p: Self) -> bool {
        if p.len > self.len {
            return false;
        }
        mut i: uint := 0;
        while i < p.len : i += 1 {
            if unsafe { p[i] != self.ptr[self.len - p.len + i] } {
                return false;
            }
        }
        return true;
    }

    /// Returns the number of occurrences of `substr` in the string or 0 if no
    /// `substr` could be found.
    pub proc count(self, substr: Self) -> uint {
        if self.len == 0 || substr.len == 0 {
            return 0;
        }
        if substr.len > self.len {
            return 0;
        }
        mut n: uint := 0;
        if substr.len == 1 {
            for l in self.as_bytes() {
                if l == substr[0] {
                    n += 1;
                }
            }
            return n;
        }
        mut i: uint := 0;
        while {
            i = self.index_after_of(substr, i) ?? return n;
            i += substr.len;
            n += 1;
        }
        return 0;
    }

    /// Returns the contents before `sub` in the string.
    /// If the substring is not found, it returns the full input string.
    pub proc all_before_of(self, sub: Self) -> Self {
        return if pos := self.index_of(sub) {
            self.substr(end: pos)
        } else {
            self
        };
    }

    /// Returns the contents before the last occurrence of `sub` in the string.
    pub proc all_before_of_last(self, sub: Self) -> Self {
        return if pos := self.last_index_of(sub) {
            self.substr(end: pos)
        } else {
            self
        };
    }

    /// Returns the contents after `sub` in the string. If the substring is
    /// not found, it returns the full input string.
    pub proc all_after_of(self, sub: Self) -> Self {
        return if pos := self.index_of(sub) {
            self.substr(pos + sub.len)
        } else {
            self
        };
    }

    /// Returns the contents after the last occurrence of `sub` in the string.
    /// If the substring is not found, it returns the full input string.
    pub proc all_after_of_last(self, sub: Self) -> Self {
        return if pos := self.last_index_of(sub) {
            self.substr(pos + sub.len)
        } else {
            self
        };
    }

    /// Returns the index of byte `b` if found in the string.
    pub proc index_of_byte(self, b: uint8) -> ?uint {
        mut i: uint := 0;
        while i < self.len : i += 1 {
            if unsafe { self.ptr[i] == b } {
                return i;
            }
        }
        return none;
    }

    /// Returns the position of the first character of the input string.
    /// It will return `none` if the input string can't be found.
    pub proc index_of(self, p: Self) -> ?uint {
        if p.len > self.len || p.len == 0 {
            return none;
        }
        mut i: uint := 0;
        while i < self.len : i += 1 {
            mut j: uint := 0;
            while j < p.len && unsafe { self.ptr[i + j] == p.ptr[j] } : j += 1 { }
            if j == p.len {
                return i;
            }
        }
        return none;
    }

    /// Returns the position of the input string, starting search from `start` position.
    pub proc index_after_of(self, p: Self, start: uint) -> ?uint {
        if p.len > self.len {
            return none;
        }
        if start >= self.len {
            return none;
        }
        mut i := start;
        while i < self.len : i += 1 {
            mut j: uint := 0;
            mut ii := i;
            while j < p.len && unsafe { self.ptr[ii] == p.ptr[j] } {
                j += 1;
                ii += 1;
            }
            if j == p.len {
                return i;
            }
        }
        return none;
    }

    /// Returns the position of any of the characters in the input string if found.
    pub proc index_of_any(self, chars: Self) -> ?uint {
        for i, b in self.as_bytes() {
            for c in chars.as_bytes() {
                if b == c {
                    return i;
                }
            }
        }
        return none;
    }

    /// Linear search for the last index of `byte` inside a string.
    pub proc last_index_of_byte(self, byte: uint8) -> ?uint {
        mut i: uint := self.len - 1;
        while i >= 0 : i -= 1 {
            if unsafe { self.ptr[i] == byte } {
                return i;
            } else if i == 0 {
                // avoid panic because the value of `i` will reach 0, then `1`
                // will be subtracted from it, which will cause an integer
                // overflow and cause `i` to be equal to `uint.MAX`.
                // TODO: find a way to avoid this in code generation.
                break;
            }
        }
        return none;
    }

    /// Returns the position of the last occurence of the input string.
    pub proc last_index_of(self, p: Self) -> ?uint {
        if p.len > self.len || p.len == 0 {
            return none;
        }
        mut i: uint := self.len - p.len;
        while i >= 0 : i -= 1 {
            mut j: uint := 0;
            while j < p.len && unsafe { self.ptr[i + j] == p.ptr[j] } : j += 1 { }
            if j == p.len {
                return i;
            }
            if i == 0 {
                break;
            }
        }
        return none;
    }

    /// Returns the string found between `start` string and `end` string.
    pub proc find_between(self, start: Self, end: Self) -> Self {
        start_pos := self.index_of(start) ?? return empty_string;
        val := self.substr(start_pos + start.len, self.len);
        end_pos := val.index_of(end) ?? return val;
        return val.substr(0, end_pos);
    }

    /// Strips any of the characters given in `cutset` from the start and end of
    /// the string.
    pub proc trim(self, cutset: Self) -> Self {
        if self.len < 1 || cutset.len < 1 {
            return self;
        }
        (pos_left, pos_right) := self.trim_indexes(cutset);
        return self.substr(pos_left, pos_right);
    }

    /// Gets the new start and end indexes of a string when any of the characters
    /// given in `cutset` were stripped from the start and end of the string. Should
    /// be used as an input to `substr()`. If the string contains only the characters
    /// in `cutset`, both values returned are zero.
    pub proc trim_indexes(self, cutset: Self) -> (uint, uint) {
        mut pos_left: uint := 0;
        mut pos_right: uint := if self.len == 0 { 0 } else { self.len - 1 };
        mut cs_match := true;
        cutset_bytes := cutset.as_bytes();
        while pos_left <= self.len && pos_right > 0 && cs_match {
            cs_match = false;
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos_left] == cs } {
                    pos_left += 1;
                    cs_match = true;
                    break;
                }
            }
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos_right] == cs } {
                    pos_right -= 1;
                    cs_match = true;
                    break;
                }
            }
            if pos_left > pos_right {
                return (0, 0);
            }
        }
        return (pos_left, pos_right + 1);
    }

    /// Strips any of the characters given in `cutset` from the left of the
    /// string.
    pub proc trim_left(self, cutset: Self) -> Self {
        if self.len < 1 || cutset.len < 1 {
            return self;
        }
        mut pos: uint := 0;
        cutset_bytes := cutset.as_bytes();
        while pos < self.len : pos += 1 {
            mut found := false;
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos] == cs } {
                    found = true;
                    break;
                }
            }
            if !found {
                break;
            }
        }
        return self.substr(pos);
    }

    /// Strips any of the characters given in `cutset` from the right of the
    /// string.
    pub proc trim_right(self, cutset: Self) -> Self {
        if self.len < 1 || cutset.len < 1 {
            return self;
        }
        mut pos := self.len - 1;
        cutset_bytes := cutset.as_bytes();
        while pos >= 0 : pos -= 1 {
            mut found := false;
            for cs in cutset_bytes {
                if unsafe { self.ptr[pos] == cs } {
                    found = true;
                }
            }
            if !found {
                break;
            }
            if pos == 0 {
                break;
            }
        }
        return self.substr(0, pos + 1);
    }

    /// Strips any of ` `, `\n`, `\t`, `\v`, `\f`, `\r` from the start and end of
    /// the string.
    #[inline]
    pub proc trim_space(self) -> Self {
        return self.trim(" \n\t\v\f\r");
    }

    /// Replaces all occurences of `old_value` with the string passed in `new_value`.
    pub proc replace(self, old_value: Self, new_value: Self) -> Self {
        if self.len == 0 || new_value.len == 0 || new_value.len > self.len {
            return self;
        }
        if mut occurrence_idx := self.index_of(old_value) {
            search_step := old_value.len;
            new_len_hint := self.len - old_value.len + new_value.len;
            mut sb := StringBuilder.new(new_len_hint);
            mut i: uint := 0;
            while {
                unsafe {
                    sb.write_raw_with_len(@ptr_add(self.ptr, i), occurrence_idx - i);
                    sb.write_raw_with_len(new_value.ptr, new_value.len);
                }
                i = occurrence_idx + old_value.len;
                if occurrence_idx >= self.len {
                    break;
                }
                if oc_i := self.index_after_of(old_value, occurrence_idx + search_step) {
                    occurrence_idx = oc_i;
                } else {
                    break;
                }
            }
            unsafe {
                sb.write_raw_with_len(@ptr_add(self.ptr, i), self.len - i);
            }
            return sb.to_string();
        }
        return self;
    }

    /// Splits the string based on the passed `delim` substring. It returns the
    /// first `nth` parts. When `nth` == 0, return all the splits.
    /// The last returned element has the remainder of the string, even if the
    /// remainder contains more `delim` substrings.
    pub proc split(self, delim: Self, nth: uint := 0) -> []Self {
        mut i: uint := 0;
        mut res := []Self();
        match delim.len {
            0 -> {
                i = 1;
                for ch in self.as_bytes() {
                    if nth > 0 && i >= nth {
                        res.push(self.substr(i));
                        break;
                    }
                    res.push(ch.to_ascii());
                    i += 1;
                }
                return res;
            },
            1 -> {
                mut start: uint := 0;
                delim_byte := delim[0];
                while i < self.len {
                    if unsafe { self.ptr[i] == delim_byte } {
                        if nth > 0 && res.len == nth - 1 {
                            break;
                        }
                        res.push(self.substr(start, i));
                        start = i + delim.len;
                        i = start;
                    } else {
                        i += 1;
                    }
                }
                if nth < 1 || res.len < nth {
                    res.push(self.substr(start));
                }
                return res;
            },
            else -> {
                mut start: uint := 0;
                while i <= self.len {
                    if i + delim.len <= self.len && self.substr(i, i + delim.len) == delim {
                        if nth > 0 && res.len == nth - 1 {
                            break;
                        }
                        res.push(self.substr(start, i));
                        start = i + delim.len;
                        i = start;
                    } else {
                        i += 1;
                    }
                }
                if nth < 1 || res.len < nth {
                    res.push(self.substr(start));
                }
                return res;
            }
        }
    }

    /// Splits a string using the chars in the delimiter string as delimiters chars.
    /// If the delimiter string is empty then `.split()` is used.
    pub proc split_any(self, delim: Self) -> []Self {
        mut i: uint := 0;
        mut res := []Self();
        // check empty source string
        if self.len > 0 {
            // if empty delimiter string using default split
            if delim.len <= 0 {
                return self.split("");
            }
            for index, ch in self.as_bytes() {
                for delim_ch in delim.as_bytes() {
                    if ch == delim_ch {
                        res.push(self.substr(i, index));
                        i = index + 1;
                        break;
                    }
                }
            }
            if i < self.len {
                res.push(self.substr(i));
            }
        }
        return res;
    }
    /// Splits the string by newline characters. `\r` (MacOS), `\n` (POSIX),
    /// and `\r\n` (Windows) line endings are all supported (including mixed line endings).
    /// NOTE: algorithm is "greedy", consuming '\r\n' as a single line ending with higher
    /// priority than '\r' and '\n' as multiple endings
    pub proc split_into_lines(self) -> []Self {
        mut res := []Self();
        if self.len == 0 {
            return res;
        }
        cr := b'\r';
        lf := b'\n';
        mut line_start: uint := 0;
        mut i: uint := 0;
        while i < self.len : i += 1 {
            if line_start <= i {
                if unsafe { self.ptr[i] == lf } {
                    res.push(if line_start == i {
                        empty_string
                    } else {
                        self.substr(line_start, i)
                    });
                    line_start = i + 1;
                } else if unsafe { self.ptr[i] == cr } {
                    res.push(if line_start == i {
                        empty_string
                    } else {
                        self.substr(line_start, i)
                    });
                    if i + 1 < self.len && unsafe { self.ptr[i + 1] == lf } {
                        line_start = i + 2;
                    } else {
                        line_start = i + 1;
                    }
                }
            }
        }
        if line_start < self.len {
            res.push(self.substr(line_start));
        }
        return res;
    }
}
