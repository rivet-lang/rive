// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

extend string {
    #[inline]
    pub func to_bool(self) -> bool {
        return self == "true";
    }

    /// Equivalent to `parse_int(self, 0, 8)`, converted to type `int8`.
    #[inline]
    pub func to_int8(self) -> !int8 {
        return @as(int8, self.parse_int(0, 8)!);
    }

    /// Equivalent to `parse_int(self, 0, 16)`, converted to type `int16`.
    #[inline]
    pub func to_int16(self) -> !int16 {
        return @as(int16, self.parse_int(0, 16)!);
    }

    /// Equivalent to `parse_int(self, 0, 32)`, converted to type `int32`.
    #[inline]
    pub func to_int32(self) -> !int32 {
        return @as(int32, self.parse_int(0, 32)!);
    }

    /// Equivalent to `parse_int(self, 0, 64)`, converted to type `int64`.
    #[inline]
    pub func to_int64(self) -> !int64 {
        return @as(int64, self.parse_int(0, 64)!);
    }

    /// Equivalent to `parse_int(self, 0, int.bits())`, converted to type `int`.
    #[inline]
    pub func to_int(self) -> !int {
        return self.parse_int(0, int.bits())!;
    }

    /// Equivalent to `self.parse_uint(0, 8)`, converted to type `uint8`.
    #[inline]
    pub func to_uint8(self) -> !uint8 {
        return @as(uint8, self.parse_uint(0, 8)!);
    }

    /// Equivalent to `self.parse_uint(0, 16)`, converted to type `uint16`.
    #[inline]
    pub func to_uint16(self) -> !uint16 {
        return @as(uint16, self.parse_uint(0, 16)!);
    }

    /// Equivalent to `self.parse_uint(0, 32)`, converted to type `uint32`.
    #[inline]
    pub func to_uint32(self) -> !uint32 {
        return @as(uint32, self.parse_uint(0, 32)!);
    }

    /// Equivalent to `self.parse_uint(0, 64)`, converted to type `uint64`.
    #[inline]
    pub func to_uint64(self) -> !uint64 {
        return @as(uint64, self.parse_uint(0, 64)!);
    }

    /// Equivalent to `self.parse_uint(0, uint.bits())`, converted to type `uint`.
    #[inline]
    pub func to_uint(self) -> !uint {
        return self.parse_uint(0, uint.bits())!;
    }
}