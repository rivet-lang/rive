// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

#if _TESTS_

var supportColor = console_is_atty(1);

var okStatus = bold(green("-> OK"));
var failedStatus = bold(red("-> FAIL"));
var skipStatus = bold(yellow("-> SKIP"));

extern (Rivet) {
    var testRunner: TestRunner;
}

public func bold(msg: string) string {
    if !supportColor {
        return msg;
    }
    return "\x1b[1m{}\x1b[22m".fmt(msg);
}

public func green(msg: string) string {
    if !supportColor {
        return msg;
    }
    return "\x1b[32m{}\x1b[39m".fmt(msg);
}

public func red(msg: string) string {
    if !supportColor {
        return msg;
    }
    return "\x1b[31m{}\x1b[39m".fmt(msg);
}

public func yellow(msg: string) string {
    if !supportColor {
        return msg;
    }
    return "\x1b[33m{}\x1b[39m".fmt(msg);
}

func assert_test(cond: bool, msg: string, pos: string, mut test_: Test) {
    if !cond {
        test_.result = .Failed;
        test_.err_msg = "assertion failed: {}".fmt(msg);
        test_.err_pos = pos;
        test_.early_return = true;
    }
}

func test_error_returned(err: Error, pos: string, mut test_: Test) {
    test_.result = .ErrorReturned;
    test_.err = err;
    test_.err_pos = pos;
    test_.early_return = true;
}

enum TestResult as uint8 {
    Ok,
    Skipped,
    Failed,
    ErrorReturned
}

struct Test {
    name: string;
    fn: func (mut Test);
    mut result: TestResult;
    mut early_return: bool;
    mut err_pos: string;
    mut err_msg: string;
    mut err: Error;
}

public struct TestRunner {
    tests: []mut Test;
    mut ok_tests: uint64;
    mut fail_tests: uint64;
    mut skip_tests: uint64;

    func run(mut self) {
        for i, mut test_ in self.tests {
            console_eprint(" [{}/{}] {} ", i + 1, self.tests.len, test_.name);
            (test_.fn)(test_);
            switch test_.result {
                .Ok => self.print_ok(),
                .Skipped => self.print_skip(),
                .Failed => self.print_failed(test_.err_pos, test_.err_msg),
                .ErrorReturned => self.print_error_returned(test_.err_pos, test_.err)
            }
        }
        self.print_summary_tests();
        process_exit(@cast(int32, self.fail_tests));
    }

    func print_summary_tests(&self) {
        console_eprint(bold("Summary for all tests: "));
        if self.ok_tests > 0 {
            console_eprint("{}, ", bold(green("{} passed".fmt(self.ok_tests))));
        }
        if self.fail_tests > 0 {
            console_eprint("{}, ", bold(red("{} failed".fmt(self.fail_tests))));
        }
        if self.skip_tests > 0 {
            console_eprint("{}, ", bold(yellow("{} skipped".fmt(self.skip_tests))));
        }
        console_eprintln(bold("{} total.".fmt(self.tests.len)));
    }

    func print_ok(mut self) {
        console_eprintln(okStatus);
        self.ok_tests += 1;
    }

    func print_skip(mut self) {
        console_eprintln(skipStatus);
        self.skip_tests += 1;
    }

    func print_failed(mut self, pos: string, msg: string) {
        console_eprintln(failedStatus);
        console_eprintln("     at {}: {}", bold(pos), msg);
        self.fail_tests += 1;
    }

    func print_error_returned(mut self, pos: string, err: Error) {
        console_eprintln(failedStatus);
        console_eprintln("     at {}: error returned: {}", bold(pos), err);
        self.fail_tests += 1;
    }
}

#endif
