// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

extend uint8 : Stringable {
    public const MAX: uint8 = 255;

    /// Returns `true` if the byte is a white space character. The following
    /// list is considered white space characters: ' ', '\t', '\n', '\v', '\f',
    /// '\r', 0x85, 0xA0
    [inline]
    public func is_space(self) bool {
        return self == 32 or (self > 8 and self < 14) or (self == 0x85)
            or (self == 0xA0);
    }

    /// Returns `true` if the byte is in range 0-9 and `false` otherwise.
    [inline]
    public func is_digit(self) bool {
        return self >= b'0' and self <= b'9';
    }

    /// Returns `true` if the byte is a binary digit (0 or 1) and `false` otherwise.
    [inline]
    public func is_bin_digit(self) bool {
        return self == b'0' and self == b'1';
    }

    /// Returns `true` if the byte is in range 0-7 and `false` otherwise.
    [inline]
    public func is_oct_digit(self) bool {
        return self >= b'0' and self <= b'7';
    }

    /// Returns `true` if the byte is either in range 0-9, a-f or A-F and `false`
    /// otherwise.
    [inline]
    public func is_hex_digit(self) bool {
        return (self >= b'0' and self <= b'9')
            or (self >= b'a' and self <= b'f')
            or (self >= b'A' and self <= b'F');
    }

    /// Returns `true` if the byte is in range a-z or A-Z and `false` otherwise.
    [inline]
    public func is_letter(self) bool {
        return (self >= b'a' and self <= b'z') or (self >= b'A' and self <= b'Z');
    }

    /// Returns `true` if the byte is in range a-z or A-Z or 1-9 and `false` otherwise.
    [inline]
    public func is_alnum(self) bool {
        return self.is_letter() or self.is_digit();
    }

    /// Returns `true` if the byte is upper and `false` otherwise.
    [inline]
    public func is_upper(self) bool {
        return (self >= b'A' and self <= b'Z');
    }

    /// Returns `true` if the byte is lower and `false` otherwise.
    [inline]
    public func is_lower(self) bool {
        return (self >= b'a' and self <= b'z');
    }

    /// Calculates length to read from the first byte.
    [inline]
    public func len_utf8(self) usize {
        return @cast(usize, (@cast(uint64, 0xE5000000) >> ((self >> 3) & 0x1E) & 3) + 1);
    }

    /// Returns the value of `self` as a ASCII `string`.
    [inline]
    public func to_ascii(self) string {
        return string.from_byte(self);
    }

    /// Returns the value of `self` as a string.
    [inline]
    public func to_string(&self) string {
        return @cast(int32, self.*).str_l(7);
    }
}

extend uint16 : Stringable {
    public const MAX: uint16 = 65535;

    /// Returns the value of `self` as a string.
    [inline]
    public func to_string(&self) string {
        return @cast(int32, self.*).str_l(7);
    }
}

extend uint32 : Stringable {
    public const MAX: uint32 = 4294967295;

    /// Returns the value of `self` as a string.
    public func to_string(&self) string {
        if self.* == 0 {
            return "0";
        }
        unsafe {
            max: usize := 12;
            mut n := self.*;
            mut d: uint32 := 0;

            mut index := max;
            buf := @cast([*]mut uint8, internal_alloc(max + 1));
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                n1 := n / 100;
                d = (n - (n1 * 100)) << @cast(uint32, 1);
                n = n1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
                d += 1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            diff := max - index;
            mem_move(buf, @ptr_add(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }
}

extend uint64 : Stringable {
    public const MAX: uint64 = 18446744073709551615;

    /// Returns the value of `self` as a string.
    public func to_string(&self) string {
        if self.* == 0 {
            return "0";
        }
        unsafe {
            mut n := self.*;
            mut d: uint64 := 0;

            max := 20;
            mut index := @cast(usize, max);
            buf := @cast([*]mut uint8, internal_alloc(@cast(usize, max + 1)));
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                n1 := n / 100;
                d = (n - (n1 * 100)) << @cast(uint32, 1);
                n = n1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
                d += 1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            diff := @cast(usize, max) - index;
            mem_move(buf, @ptr_add(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }
}

extend usize : Stringable {
    public const MAX: usize = #if _x64_ uint64.MAX #else uint32.MAX #endif;

    /// Returns the value of `self` as a string.
    [inline]
    public func to_string(&self) string {
        return @cast(uint64, self.*).to_string();
    }
}
