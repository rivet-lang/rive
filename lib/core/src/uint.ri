// Copyright (C) 2023-2024 Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ./mem;

extend uint8 < Stringable {
    pub const MAX: uint8 := 255;

    /// Checks if the value is within the ASCII range.
    #[inline]
    pub func is_ascii(self) -> bool {
        return self < 0x80;
    }

    /// Returns `true` if the byte is a white space character. The following
    /// list is considered white space characters: ' ', '\t', '\n', '\v', '\f',
    /// '\r', 0x85, 0xA0
    #[inline]
    pub func is_space(self) -> bool {
        return self == 32 || (self > 8 && self < 14) || (self == 0x85)
            || (self == 0xA0);
    }

    /// Returns `true` if the byte is in range 0-9 and `false` otherwise.
    #[inline]
    pub func is_digit(self) -> bool {
        return self >= '0' && self <= '9';
    }

    /// Returns `true` if the byte is a binary digit (0 or 1) and `false` otherwise.
    #[inline]
    pub func is_bin_digit(self) -> bool {
        return self == '0' || self == '1';
    }

    /// Returns `true` if the byte is in range 0-7 and `false` otherwise.
    #[inline]
    pub func is_oct_digit(self) -> bool {
        return self >= '0' && self <= '7';
    }

    /// Returns `true` if the byte is either in range 0-9, a-f or A-F and `false`
    /// otherwise.
    #[inline]
    pub func is_hex_digit(self) -> bool {
        return (self >= '0' && self <= '9')
            || (self >= 'a' && self <= 'f')
            || (self >= 'A' && self <= 'F');
    }

    /// Returns `true` if the byte is in range a-z or A-Z and `false` otherwise.
    #[inline]
    pub func is_letter(self) -> bool {
        return (self >= 'a' && self <= 'z') || (self >= 'A' && self <= 'Z');
    }

    /// Returns `true` if the byte is in range a-z or A-Z or 1-9 and `false` otherwise.
    #[inline]
    pub func is_alnum(self) -> bool {
        return self.is_letter() || self.is_digit();
    }

    /// Returns `true` if the byte is upper and `false` otherwise.
    #[inline]
    pub func is_upper(self) -> bool {
        return (self >= 'A' && self <= 'Z');
    }

    /// Returns `true` if the byte is lower and `false` otherwise.
    #[inline]
    pub func is_lower(self) -> bool {
        return (self >= 'a' && self <= 'z');
    }

    /// Calculates length to read from the first byte.
    #[inline]
    pub func len_utf8(self) -> uint {
        return @as(uint, (@as(uint64, 0xE5000000) >> ((self >> 3) & 0x1E) & 3) + 1);
    }

    /// Returns the value of `self` as a valid `rune`.
    #[inline]
    pub func to_rune(self) -> ?rune {
        return rune.from_uint32(@as(uint32, self));
    }

    /// Returns the value of `self` as a ASCII `string`.
    #[inline]
    pub func to_ascii(self) -> string {
        return string.from_byte(self);
    }

    /// Returns the value of `self` as a string.
    #[inline]
    pub func to_string(&self) -> string {
        return @as(int32, self.*).str_l(7);
    }
}

extend uint16 < Stringable {
    pub const MAX: uint16 := 65535;

    /// Returns the value of `self` as a string.
    #[inline]
    pub func to_string(&self) -> string {
        return @as(int32, self.*).str_l(7);
    }
}

extend uint32 < Stringable {
    pub const MAX: uint32 := 4294967295;

    /// Returns the value of `self` as a valid `rune`.
    #[inline]
    pub func to_rune(self) -> ?rune {
        return rune.from_uint32(self);
    }

    /// Returns the value of `self` as a string.
    pub func to_string(&self) -> string {
        if self.* == 0 {
            return "0";
        }
        unsafe {
            max: uint := 12;
            mut n := self.*;
            mut d: uint32 := 0;

            mut index := max;
            buf := @as([&]mut uint8, mem.boxed_alloc(max + 1));
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                n1 := n / 100;
                d = (n - (n1 * 100)) << 1;
                n = n1;
                buf[index] = digit_pairs.ptr[d];
                index -= 1;
                d += 1;
                buf[index] = digit_pairs.ptr[d];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            diff := max - index;
            mem.move(buf, @ptr_add(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }
}

extend uint64 < Stringable {
    pub const MAX: uint64 := 18446744073709551615;

    /// Returns the value of `self` as a string.
    pub func to_string(&self) -> string {
        if self.* == 0 {
            return "0";
        }
        unsafe {
            mut n := self.*;
            mut d: uint64 := 0;

            max := 20;
            mut index := @as(uint, max);
            buf := @as([&]mut uint8, mem.boxed_alloc(index + 1));
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                n1 := n / 100;
                d = (n - (n1 * 100)) << @as(uint32, 1);
                n = n1;
                buf[index] = digit_pairs.ptr[d];
                index -= 1;
                d += 1;
                buf[index] = digit_pairs.ptr[d];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            diff := @as(uint, max) - index;
            mem.move(buf, @ptr_add(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }
}

extend uint < Stringable {
    pub const MAX := @as(uint, $if _x64_ { uint64.MAX } else { uint32.MAX });

    #[inline]
    pub func bits() -> uint32 {
        return $if _x64_ { 64 } else { 32 };
    }

    /// Returns the value of `self` as a string.
    #[inline]
    pub func to_string(&self) -> string {
        return @as(uint64, self.*).to_string();
    }
}
