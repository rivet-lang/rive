test "string.concat()" {
    x := "Hello ".concat("World!");
    @assert(x == "Hello World!");
}

test "string.fmt()" {
    @assert("true: {}".fmt(true) == "true: true");
    @assert("false: {}".fmt(false) == "false: false");

    @assert("here is a number: {}".fmt(5) == "here is a number: 5");

    @assert(
        "reverse order: {2}, {1}, {0}".fmt(1, 2, 3) == "reverse order: 3, 2, 1"
    );

    @assert("rune: `{}`".fmt('Á') == "rune: `Á`");

    @assert("{0:-4}k".fmt(1) == "1   k");
    @assert("{:4}k".fmt(2004) == "2004k");
    @assert("{:4}k".fmt(20) == "  20k");
    @assert("{:4}k".fmt(2004) == "2004k");
    @assert("|{:2}|".fmt(2222) == "|2222|");
}

test "string.index_of_byte()" {
    if i := "aeiou".index_of_byte(b'e') {
        @assert(i == 1);
    } else {
        @assert(false);
    }
}

test "string.index_of()" {
    if i := "aeiou".index_of("io") {
        @assert(i == 2);
    } else {
        @assert(false);
    }
}

test "string.contains()" {
    @assert("The Rivet language".contains("Rivet"));
}

test "string.starts_with()" {
    @assert("The Rivet language".starts_with("The"));
}

test "string.ends_with()" {
    @assert("The Rivet language".ends_with("language"));
}

test "string.runes_count()" {
    @assert("José".runes_count() == 4);
}

test "string.tokenize()" {
    mut iterator := "   abc def    ghi  ".tokenize(b' ');
    mut res := @dyn_array(string, 3);
    while w := iterator.next() {
        res.push(w);
    }
    @assert(res.len == 3);
    @assert(res[0] == "abc");
    @assert(res[1] == "def");
    @assert(res[2] == "ghi");
}

test "string.split_into_lines()" {
    line_content := "line content";

    text_cr := "{0}\r{0}\r{0}".fmt(line_content);
    lines_cr := text_cr.split_into_lines();

    @assert(lines_cr.len == 3);
    for line in lines_cr {
        @assert(line == line_content);
    }

    text_crlf := "{0}\r\n{0}\r\n{0}".fmt(line_content);
    lines_crlf := text_crlf.split_into_lines();

    @assert(lines_crlf.len == 3);
    for line in lines_crlf {
        @assert(line == line_content);
    }

    text_lf := "{0}\n{0}\n{0}".fmt(line_content);
    lines_lf := text_lf.split_into_lines();

    @assert(lines_lf.len == 3);
    for line in lines_lf {
        @assert(line == line_content);
    }

    text_mixed := "{0}\n{0}\r{0}".fmt(line_content);
    lines_mixed := text_mixed.split_into_lines();

    @assert(lines_mixed.len == 3);
    for line in lines_mixed {
        @assert(line == line_content);
    }

    text_mixed_trailers := "{0}\n{0}\r{0}\r\r\r\n\n\n\r\r".fmt(line_content);
    lines_mixed_trailers := text_mixed_trailers.split_into_lines();

    @assert(lines_mixed_trailers.len == 9);
    for line in lines_mixed_trailers {
        @assert(line == line_content or line == "");
    }
}

test "string.to_int32()" {
    @assert("16".to_int32()! == 16);
    @assert("+16".to_int32()! == 16);
    @assert("-16".to_int32()! == -16);

    // invalid strings
    @assert(if _ := "".to_int32() {
        false
    } else {
        true
    });
    @assert(if _ := "str".to_int32() {
        false
    } else {
        true
    });
    @assert(if _ := "string_longer_than_10_chars".to_int32() {
        false
    } else {
        true
    });
}

test "string.parse_int()" {
    // different bases
    @assert("16".parse_int(16, 0)! == 0x16);
    @assert("16".parse_int(8, 0)! == 0o16);
    @assert("11".parse_int(2, 0)! == 3);

    // different bit sizes
    @assert("127".parse_int(10, 8)! == 127);
    @assert("32767".parse_int(10, 16)! == 32767);
    @assert("2147483647".parse_int(10, 32)! == 2147483647);
    @assert("9223372036854775807".parse_int(10, 64)! == 9223372036854775807);
    @assert("baobab".parse_int(36, 64)! == 123314438);

    // invalid bit sizes
    @assert(if _ := "123".parse_int(10, -1) {
        false
    } else {
        true
    });
    @assert(if _ := "123".parse_int(10, 65) {
        false
    } else {
        true
    });
}

test "string.substr()" {
    str := "hello world!";
    @assert(str.substr() == str);
    @assert(str.substr(6) == "world!");
    @assert(str.substr(end: 5) == "hello");
    @assert(str.substr(2, 9) == "llo wor");
}
