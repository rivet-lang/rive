// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../token;

@[boxed]
public struct AnnotationDuplicatedError : Error {
    name: string;

    public func to_string(self) string {
        return "duplicated annotation `{}`".fmt(self.name);
    }
}

@[boxed]
public struct AnnotationArgument {
    public name: string;
    public expr: Expr;
    public is_named: bool;
}

@[boxed]
public struct Annotation {
    public name: string;
    public args: []AnnotationArgument;
    public pos: token.Pos;

    public func find_argument(self, name: string) ?AnnotationArgument {
        for arg in self.args {
            if arg.name == name {
                return arg;
            }
        }
        return none;
    }
}

@[boxed]
public struct Annotations {
    public mut annotations: []Annotation;

    public func add(&self, annotation: Annotation) ! {
        if self.has(annotation.name) {
            return AnnotationDuplicatedError(annotation.name);
        }
        self.annotations.push(annotation);
    }

    public func find(self, name: string) ?Annotation {
        for annotation in self.annotations {
            if annotation.name == name {
                return annotation;
            }
        }
        return none;
    }

    @[inline]
    public func has(self, name: string) bool {
        return self.find(name) !is none;
    }

    @[inline]
    public func is_empty(self) bool {
        return self.annotations.is_empty();
    }
}
