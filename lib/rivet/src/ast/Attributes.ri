// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../token;

#[boxed]
pub struct AttributeDuplicatedError < Throwable {
    name: string;

    pub proc to_string(self) -> string {
        return "duplicated attribute `{}`".fmt(self.name);
    }
}

pub struct AttributeArgument {
    pub name: string;
    pub expr: Expr;
    pub is_named: bool;
}

pub struct Attribute {
    pub name: string;
    pub args: []AttributeArgument;
    pub pos: token.Pos;

    pub proc find_argument(&self, name: string) -> ?AttributeArgument {
        for arg in self.args {
            if arg.name == name {
                return arg;
            }
        }
        return none;
    }
}

pub struct Attributes {
    pub mut attributes: []Attribute;

    pub proc add(mut self, attribute: Attribute) -> ! {
        if self.has(attribute.name) {
            throw AttributeDuplicatedError(attribute.name);
        }
        self.attributes.push(attribute);
    }

    pub proc find(&self, name: string) -> ?Attribute {
        for attribute in self.attributes {
            if attribute.name == name {
                return attribute;
            }
        }
        return none;
    }

    #[inline]
    pub proc has(&self, name: string) -> bool {
        return self.find(name) != none;
    }

    #[inline]
    pub proc is_empty(&self) -> bool {
        return self.attributes.is_empty();
    }
}
