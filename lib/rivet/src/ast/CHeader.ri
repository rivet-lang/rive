// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/process;
import std/strings;
import std/fs.Path;

import ../token;

// Useful functions to get system `#define`s. Will soon be used to
// implement `extern (C) import`.

pub enum CImportAction {
    Report {
        msg: string;
        is_error: bool;
        pos: token.Pos;
    },
    IncludeDir {
        path: string;
        pos: token.Pos;
    },
    Include {
        path: string;
        is_system: bool; // <path>
        pos: token.Pos;
        mut header: string;
    },
    Define {
        name: string;
        value: Expr;
        pos: token.Pos;
    },
    Undefine {
        name: string;
        pos: token.Pos;
    },
    If {
        branches: []mut CImportIfBranch;
        pos: token.Pos;
    }
}

pub struct CImportIfBranch {
    pub cond: Expr;
    pub is_else: bool;
    pub actions: []mut CImportAction;
    pub pos: token.Pos;
}

struct CDefine < traits.Stringable {
    name: string;
    args: []string;
    value: string;
    has_value: bool;
    is_macro: bool;

    mut cvalue: CImportValue := .Invalid;
    mut has_cvalue: bool;

    pub func to_string(&self) -> string {
        mut sb := strings.Builder.new();
        sb.write_string(if self.is_macro { "macro " } else { "const " });
        sb.write_string(self.name);
        if self.is_macro && self.args.len > 0 {
            sb.write_string("(");
            for i, arg in self.args {
                sb.write_string(arg);
                if i < self.args.len - 1 {
                    sb.write_string(", ");
                }
            }
            sb.write_string(") =>");
        } else {
            sb.write_string(" =");
        }
        sb.write_string(" ");
        sb.write_string(self.value);
        return sb.to_string();
    }
}

struct CDefines {
    mut defines: []CDefine;

    func get(self, name: string) -> ?CDefine {
        for def in self.defines {
            if def.name == name {
                return def;
            }
        }
        return none;
    }
}

enum CImportValue {
    Invalid,
    Float(float64),
    Int(int),
    Uint(uint);

    #[inline]
    pub func to_bool(self) -> bool {
        return (self is .Int(int_) && int_ == 1)
            || (self is .Uint(uint_) && uint_ == 1);
    }
}

extend Table {
    func setup_c_utils(mut self) {
        self.c_include_paths = self.get_include_paths();
        self.c_defines = self.get_global_defines();
    }

    func get_global_defines(self) -> CDefines {
        if result := process.execute(
            "{} -x c -E -dM /dev/null".fmt(self.prefs.target_backend_compiler)
        ) {
            defines_ := result.output.split_into_lines();
            mut defines := CDefines();
            for define in defines_ {
                mut tokens := define.tokenize(' ');
                _ = tokens.next(); // skip '#define'
                mut name := tokens.next()?;
                define_value := tokens.rest();
                has_value := define_value.len > 0;
                mut args := []string();
                mut is_macro := true;
                if has_value {
                    if paren_idx := name.index_of_byte('(') {
                        def_args := name.substr(paren_idx + 1).all_before_of(")");
                        name = name.substr(end: paren_idx);
                        if def_args.len > 0 {
                            for arg_name in def_args.split(",") {
                                args.push(arg_name.trim_space());
                            }
                        }
                    } else {
                        is_macro = false;
                    }
                } else {
                    is_macro = false;
                }
                defines.defines.push(CDefine(name, args, define_value, has_value, is_macro));
            }
            return defines;
        }
        return CDefines();
    }

    func get_include_paths(self) -> []string {
        if result := process.execute(
            "{} -x c -E -v /dev/null".fmt(self.prefs.target_backend_compiler)
        ) {
            lines := result.output.find_between(
                "#include <...> search starts here:", "End of search list."
            ).split_into_lines();
            mut paths := []string();
            for line in lines {
                if line.is_empty() {
                    continue;
                }
                paths.push(line.trim_space());
            }
            return paths;
        }
        return +[];
    }

    func search_c_header(self, is_local: bool, header: string) -> ?string {
        if is_local {
            if Path.is_file(header) {
                return header;
            }
            for include_path in self.c_user_include_paths {
                p_header := Path.join(include_path, header) catch continue;
                if Path.is_file(p_header) {
                    return p_header;
                }
            }
        }
        for include_path in self.c_include_paths {
            p_header := Path.join(include_path, header) catch continue;
            if Path.is_file(p_header) {
                return p_header;
            }
        }
        return none;
    }
}
