// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/strings;

import ../token;

pub enum Decl {
    Empty(token.Pos),
    Import {
        attributes: Attributes;
        is_public: bool;
        path: string;
        path_pos: token.Pos;
        mut alias_name: string;
        mut has_custom_alias: bool;
        glob: bool;
        import_list: []ImportListInfo;
        mut info: ImportedMod;
        pos: token.Pos;
    },
    Extern {
        docs: DocComment;
        attributes: Attributes;
        abi: ABI;
        decls: []Decl;
        pos: token.Pos;
    },
    Alias {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        parent: Expr;
        is_typealias: bool;
        mut parent_type: Type;
        pos: token.Pos;
        mut sym: Sym;
    },
    Trait {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        bases: []mut Type;
        decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Enum {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        mut underlying_type: Type;
        bases: []mut Type;
        variants: []EnumVariantDecl;
        is_boxed: bool;
        decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Struct {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        bases: []mut Type;
        decls: []Decl;
        is_opaque: bool;
        pos: token.Pos;
        mut sym: Sym;
    },
    Field {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        is_mut: bool;
        name: string;
        mut type: Type;
        mut def_expr: Expr;
        has_def_expr: bool;
        pos: token.Pos;
    },
    Extend {
        attributes: Attributes;
        mut type: Type;
        bases: []mut Type;
        decls: []Decl;
        pos: token.Pos;
    },
    Const {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        has_type: bool;
        mut type: Type;
        mut expr: Expr;
        pos: token.Pos;
        mut sym: Sym;
    },
    Var {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        is_extern: bool;
        abi: ABI;
        lefts: []ObjectData;
        mut right: Expr;
        pos: token.Pos;
        mut sym: Sym;
        mut scope: Scope;
    },
    Func {
        docs: DocComment;
        attributes: Attributes;
        is_public: bool;
        is_extern: bool;
        is_unsafe: bool;
        is_method: bool;
        is_special_method: bool;
        is_main: bool;
        is_variadic: bool;
        is_operator: bool;
        abi: ABI;
        name: string;
        args: []Arg;
        has_named_args: bool;
        mut ret_type: Type;
        stmts: []mut Stmt;
        mut scope: Scope;
        has_body: bool;
        self_is_mut: bool;
        self_is_ptr: bool;
        mut self_type: Type;
        pos: token.Pos;
        self_pos: token.Pos;
        mut sym: Sym;
        mut defer_stmts: []Stmt.Defer;
    },
    Test {
        docs: DocComment;
        attributes: Attributes;
        name: string;
        stmts: []mut Stmt;
        scope: Scope;
        pos: token.Pos;
        mut defer_stmts: []Stmt.Defer;
    };

    pub func decls(self) -> ?[]Self {
        return match self is {
            .Extern(extern_decl) -> extern_decl.decls,
            .Trait(trait_decl) -> trait_decl.decls,
            .Enum(enum_decl) -> enum_decl.decls,
            .Struct(struct_decl) -> struct_decl.decls,
            .Extend(extend_decl) -> extend_decl.decls,
            else -> none
        };
    }
}

#[boxed]
pub struct EnumVariantDecl {
    pub name: string;
    pub mut type: Type;
    pub has_type: bool;
    pub has_value: bool;
    pub value: Expr;
    pub decls: []Decl;
    pub pos: token.Pos;
}

#[boxed]
pub struct DocComment {
    mut lines: []string;
    pos: token.Pos;

    #[inline]
    func is_empty(self) -> bool {
        return self.lines.is_empty();
    }

    func merge(self) -> string {
        mut res := strings.Builder.new();
        for line in self.lines {
            res.write_join(+[line, if line.is_empty() or line.ends_with(".") {
                "\n"
            } else {
                " "
            }]);
        }
        return res.to_string();
    }
}

pub struct ImportListInfo {
    pub name: string;
    pub alias_name: string;
    pub mut has_custom_alias: bool;
    pub pos: token.Pos;
}

pub struct ImportedMod {
    pub name: string;
    pub full_name: string;
    pub alias_name: string;
    pub found: bool;
    pub files: []string;
    pub mut mod: Module;
}

pub func filter_field_decl(decls: []Decl) -> []Decl {
    mut fields := @dyn_array(Decl);
    for decl in decls {
        if decl is .Field {
            fields.push(decl);
        }
    }
    return fields;
}
