// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../token;

#[boxed]
pub enum Decl {
    Empty(token.Pos),
    Comment(Comment),
    ComptimeIf(ComptimeIf),
    Import(ImportDecl),
    Extern {
        docs: []Comment;
        attributes: Attributes;
        abi: ABI;
        mut decls: []Decl;
        pos: token.Pos;
    },
    Alias {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        parent: Expr;
        is_typealias: bool;
        mut parent_type: Type;
        pos: token.Pos;
        mut sym: Sym;
    },
    Trait {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        mut bases: []mut Type;
        mut decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Enum {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        mut underlying_type: Type;
        mut bases: []mut Type;
        mut variants: []mut EnumVariantDecl;
        is_tagged: bool;
        mut decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Struct {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        mut bases: []mut Type;
        mut decls: []Decl;
        is_opaque: bool;
        pos: token.Pos;
        mut sym: Sym;
    },
    Field {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        is_mut: bool;
        name: string;
        mut type: Type;
        mut def_expr: Expr;
        has_def_expr: bool;
        pos: token.Pos;
    },
    Extend {
        attributes: Attributes;
        mut type: Type;
        mut bases: []mut Type;
        mut decls: []Decl;
        pos: token.Pos;
    },
    Const {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        has_type: bool;
        mut type: Type;
        mut expr: Expr;
        pos: token.Pos;
        mut sym: Sym;
    },
    Var {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        is_extern: bool;
        abi: ABI;
        mut lefts: []mut ObjectData;
        mut right: Expr;
        pos: token.Pos;
        mut sym: Sym;
        mut scope: Scope;
    },
    Func {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        is_extern: bool;
        is_unsafe: bool;
        is_method: bool;
        is_special_method: bool;
        is_main: bool;
        is_variadic: bool;
        is_operator: bool;
        abi: ABI;
        name: string;
        mut args: []mut Arg;
        has_named_args: bool;
        mut ret_type: Type;
        mut stmts: []mut Stmt;
        mut scope: Scope;
        has_body: bool;
        self_is_mut: bool;
        self_is_ptr: bool;
        mut self_type: Type;
        pos: token.Pos;
        self_pos: token.Pos;
        mut sym: Sym;
        mut defer_stmts: []Stmt.Defer;
    },
    Test {
        docs: []Comment;
        attributes: Attributes;
        name: string;
        mut stmts: []mut Stmt;
        scope: Scope;
        pos: token.Pos;
        mut defer_stmts: []Stmt.Defer;
    };

    pub func position(self) -> token.Pos {
        return match self {
            .Empty(empty_pos) -> empty_pos,
            .Comment(comment) -> comment.pos,
            .ComptimeIf(comptime_if) -> comptime_if.pos,
            .Import(import_d) -> import_d.pos,
            .Extern(extern_d) -> extern_d.pos,
            .Alias(alias_d) -> alias_d.pos,
            .Trait(trait_d) -> trait_d.pos,
            .Enum(enum_d) -> enum_d.pos,
            .Struct(struct_d) -> struct_d.pos,
            .Field(field_d) -> field_d.pos,
            .Extend(extend_d) -> extend_d.pos,
            .Const(const_d) -> const_d.pos,
            .Var(var_d) -> var_d.pos,
            .Func(func_d) -> func_d.pos,
            .Test(test_d) -> test_d.pos
        };
    }

    pub func decls(self) -> ?[]Self {
        return match self {
            .ComptimeIf(comptime_if) -> if branch_idx := comptime_if.branch_idx {
                nodes_to_decls(
                    comptime_if.branches[branch_idx].nodes
                )
            } else {
                none
            },
            .Extern(extern_decl) -> extern_decl.decls,
            .Trait(trait_decl) -> trait_decl.decls,
            .Enum(enum_decl) -> enum_decl.decls,
            .Struct(struct_decl) -> struct_decl.decls,
            .Extend(extend_decl) -> extend_decl.decls,
            else -> none
        };
    }
}

pub struct EnumVariantDecl {
    pub name: string;
    pub mut type: Type;
    pub has_type: bool;
    pub has_value: bool;
    pub value: Expr;
    pub mut decls: []Decl;
    pub pos: token.Pos;
}

pub struct ImportDecl {
    pub attributes: Attributes;
    pub is_public: bool;
    pub path: string;
    pub path_pos: token.Pos;
    pub mut alias_name: string;
    pub mut has_custom_alias: bool;
    pub glob: bool;
    pub mut subimports: []mut ImportDecl;
    pub import_list: []ImportListInfo;
    pub mut info: ImportedMod;
    pub pos: token.Pos;
}

pub struct ImportedMod {
    pub name: string;
    pub full_name: string;
    pub alias_name: string;
    pub found: bool;
    pub files: []string;
    pub mut mod: Module;
}

pub struct ImportListInfo {
    pub name: string;
    pub alias_name: string;
    pub mut has_custom_alias: bool;
    pub pos: token.Pos;
}

pub func filter_field_decl(decls: []Decl) -> []Decl {
    mut fields := []Decl();
    for decl in decls {
        if decl is .Field {
            fields.push(decl);
        }
    }
    return fields;
}
