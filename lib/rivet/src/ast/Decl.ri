// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/strings;

import ../token;

public enum Decl {
    Empty: token.Pos,
    Import {
        annotations: Annotations;
        is_public: bool;
        path: string;
        path_pos: token.Pos;
        mut alias_name: string;
        glob: bool;
        import_list: []ImportListInfo;
        mut info: ImportedMod;
        pos: token.Pos;
    },
    Extern {
        docs: DocComment;
        annotations: Annotations;
        abi: ABI;
        decls: []Decl;
        pos: token.Pos;
    },
    Alias {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        name: string;
        parent: Expr;
        is_typealias: bool;
        parent_type: Type;
        pos: token.Pos;
        mut sym: Sym;
    },
    Enum {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        name: string;
        underlying_type: Type;
        bases: []Type;
        variants: []EnumVariantDecl;
        is_boxed: bool;
        decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Trait {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        name: string;
        bases: []Type;
        decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Struct {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        name: string;
        bases: []Type;
        decls: []Decl;
        is_opaque: bool;
        pos: token.Pos;
        mut sym: Sym;
    },
    Field {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        is_mut: bool;
        name: string;
        type: Type;
        def_expr: Expr;
        has_def_expr: bool;
        pos: token.Pos;
    },
    Extend {
        annotations: Annotations;
        type: Type;
        bases: []Type;
        decls: []Decl;
        pos: token.Pos;
    },
    Const {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        name: string;
        has_type: bool;
        type: Type;
        mut expr: Expr;
        pos: token.Pos;
        mut sym: Sym;
    },
    Var {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        is_extern: bool;
        abi: ABI;
        lefts: []ObjectData;
        mut right: Expr;
        pos: token.Pos;
        mut sym: Sym;
    },
    Func {
        docs: DocComment;
        annotations: Annotations;
        is_public: bool;
        is_extern: bool;
        is_unsafe: bool;
        is_method: bool;
        is_main: bool;
        is_variadic: bool;
        abi: ABI;
        name: string;
        args: []Arg;
        has_named_args: bool;
        ret_type: Type;
        stmts: []Stmt;
        scope: Scope;
        has_body: bool;
        self_is_mut: bool;
        self_is_ref: bool;
        pos: token.Pos;
        mut sym: Sym;
    },
    Destructor {
        docs: DocComment;
        annotations: Annotations;
        self_is_mut: bool;
        stmts: []Stmt;
        scope: Scope;
        pos: token.Pos;
        mut sym: Sym;
    },
    Test {
        docs: DocComment;
        annotations: Annotations;
        name: string;
        stmts: []Stmt;
        scope: Scope;
        pos: token.Pos;
    }
}

[boxed]
public struct EnumVariantDecl {
    public name: string;
    public mut type: Type;
    public has_type: bool;
    public has_value: bool;
    public value: Expr;
    public decls: []Decl;
    public pos: token.Pos;
}

[boxed]
public struct DocComment {
    mut lines: []string;
    pos: token.Pos;

    [inline]
    func is_empty(self) bool {
        return self.lines.is_empty();
    }

    func merge(self) string {
        mut res := strings.Builder.new();
        for line in self.lines {
            res.write_join([line, if line.is_empty() or line.ends_with(".") {
                "\n"
            } else {
                " "
            }]);
        }
        return res.to_string();
    }
}

public struct ImportListInfo {
    public name: string;
    public alias_name: string;
    public pos: token.Pos;
}

public struct ImportedMod {
    public name: string;
    public full_name: string;
    public alias_name: string;
    public found: bool;
    public files: []string;
    public mut mod: Module;
}

public func filter_field_decl(decls: []Decl) []Decl {
    mut fields := @vec(Decl);
    for decl in decls {
        if decl is .Field {
            fields.push(decl);
        }
    }
    return fields;
}
