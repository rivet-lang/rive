// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/strings;

import ../token;

public enum Decl {
    Empty: token.Pos,
    Comment: Comment,
    Import {
        attributes: Attributes;
        is_public: bool;
        path: string;
        path_pos: token.Pos;
        mut alias_name: string;
        mut has_custom_alias: bool;
        glob: bool;
        import_list: []ImportListInfo;
        mut info: ImportedMod;
        pos: token.Pos;
    },
    Extern {
        docs: []Comment;
        attributes: Attributes;
        abi: ABI;
        decls: []Decl;
        pos: token.Pos;
    },
    Alias {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        parent: Expr;
        is_typealias: bool;
        mut parent_type: Type;
        pos: token.Pos;
        mut sym: Sym;
    },
    Trait {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        bases: []mut Type;
        decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Enum {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        mut underlying_type: Type;
        bases: []mut Type;
        variants: []EnumVariantDecl;
        is_boxed: bool;
        decls: []Decl;
        pos: token.Pos;
        mut sym: Sym;
    },
    Struct {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        bases: []mut Type;
        decls: []Decl;
        is_opaque: bool;
        pos: token.Pos;
        mut sym: Sym;
    },
    Field {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        is_mut: bool;
        name: string;
        mut type: Type;
        mut def_expr: Expr;
        has_def_expr: bool;
        pos: token.Pos;
    },
    Extend {
        attributes: Attributes;
        mut type: Type;
        bases: []mut Type;
        decls: []Decl;
        pos: token.Pos;
    },
    Const {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        name: string;
        has_type: bool;
        mut type: Type;
        mut expr: Expr;
        pos: token.Pos;
        mut sym: Sym;
    },
    Var {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        is_extern: bool;
        abi: ABI;
        lefts: []ObjectData;
        mut right: Expr;
        pos: token.Pos;
        mut sym: Sym;
        mut scope: Scope;
    },
    Func {
        docs: []Comment;
        attributes: Attributes;
        is_public: bool;
        is_extern: bool;
        is_unsafe: bool;
        is_method: bool;
        is_special_method: bool;
        is_main: bool;
        is_variadic: bool;
        is_operator: bool;
        abi: ABI;
        name: string;
        args: []Arg;
        has_named_args: bool;
        mut ret_type: Type;
        stmts: []mut Stmt;
        mut scope: Scope;
        has_body: bool;
        self_is_mut: bool;
        self_is_ptr: bool;
        mut self_type: Type;
        pos: token.Pos;
        self_pos: token.Pos;
        mut sym: Sym;
        mut defer_stmts: []Stmt.Defer;
    },
    Test {
        docs: []Comment;
        attributes: Attributes;
        name: string;
        stmts: []mut Stmt;
        scope: Scope;
        pos: token.Pos;
        mut defer_stmts: []Stmt.Defer;
    };

    public func position(self) -> token.Pos {
        return match self is {
            .Empty as empty_pos -> empty_pos,
            .Comment as comment -> comment.pos,
            .Import as import_d -> import_d.pos,
            .Extern as extern_d -> extern_d.pos,
            .Alias as alias_d -> alias_d.pos,
            .Trait as trait_d -> trait_d.pos,
            .Enum as enum_d -> enum_d.pos,
            .Struct as struct_d -> struct_d.pos,
            .Field as field_d -> field_d.pos,
            .Extend as extend_d -> extend_d.pos,
            .Const as const_d -> const_d.pos,
            .Var as var_d -> var_d.pos,
            .Func as func_d -> func_d.pos,
            .Test as test_d -> test_d.pos
        };
    }

    public func decls(self) -> ?[]Self {
        return match self is {
            .Extern as extern_decl -> extern_decl.decls,
            .Trait as trait_decl -> trait_decl.decls,
            .Enum as enum_decl -> enum_decl.decls,
            .Struct as struct_decl -> struct_decl.decls,
            .Extend as extend_decl -> extend_decl.decls,
            else -> none
        };
    }
}

#[boxed]
public struct EnumVariantDecl {
    public name: string;
    public mut type: Type;
    public has_type: bool;
    public has_value: bool;
    public value: Expr;
    public decls: []Decl;
    public pos: token.Pos;
}

public struct ImportListInfo {
    public name: string;
    public alias_name: string;
    public mut has_custom_alias: bool;
    public pos: token.Pos;
}

public struct ImportedMod {
    public name: string;
    public full_name: string;
    public alias_name: string;
    public found: bool;
    public files: []string;
    public mut mod: Module;
}

public func filter_field_decl(decls: []Decl) -> []Decl {
    mut fields := @vec(Decl);
    for decl in decls {
        if decl is .Field {
            fields.push(decl);
        }
    }
    return fields;
}
