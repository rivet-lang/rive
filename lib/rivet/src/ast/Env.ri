// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{ sys, fs.Path };

import ../prefs;
import ../report;
import ../utils;

#[boxed]
pub struct Env {
    pub mut prefs: prefs.Prefs;
    pub mut source_files: []mut SourceFile;

    pub pointer_size: uint;

    /// `.universe` is the mega-module where all the modules being
    /// compiled reside.
    pub mut universe: Module;

    pub mut c_defines: CDefines;
    pub mut c_include_paths: []string;
    pub mut c_user_include_paths: []string;

    pub mut core_mod: Module;
    pub mut throwable_sym_is_set: bool;

    pub mut builtins: []Builtin;

    /// Primitive type, Throwable and DynArray symbols.
    pub mut bool_sym: TypeSym;
    pub mut rune_sym: TypeSym;
    pub mut int8_sym: TypeSym;
    pub mut int16_sym: TypeSym;
    pub mut int32_sym: TypeSym;
    pub mut int64_sym: TypeSym;
    pub mut int_sym: TypeSym;
    pub mut uint8_sym: TypeSym;
    pub mut uint16_sym: TypeSym;
    pub mut uint32_sym: TypeSym;
    pub mut uint64_sym: TypeSym;
    pub mut uint_sym: TypeSym;
    pub mut comptime_int_sym: TypeSym;
    pub mut comptime_float_sym: TypeSym;
    pub mut float32_sym: TypeSym;
    pub mut float64_sym: TypeSym;
    pub mut string_sym: TypeSym;
    pub mut throwable_sym: TypeSym;
    pub mut dyn_array_sym: TypeSym; // from `core` module

    /// Primitive types.
    pub mut bool_t: Type;
    pub mut rune_t: Type;
    pub mut int8_t: Type;
    pub mut int16_t: Type;
    pub mut int32_t: Type;
    pub mut int64_t: Type;
    pub mut int_t: Type;
    pub mut uint8_t: Type;
    pub mut uint16_t: Type;
    pub mut uint32_t: Type;
    pub mut uint64_t: Type;
    pub mut uint_t: Type;
    pub mut comptime_int_t: Type;
    pub mut comptime_float_t: Type;
    pub mut float32_t: Type;
    pub mut float64_t: Type;
    pub mut string_t: Type;
    pub mut throwable_t: Type;

    #[inline]
    pub func new(prefs_: prefs.Prefs) -> Env {
        report.report_table.prefs = prefs_;
        universe_ := universe();
        mut env := Env(
            prefs: prefs_,
            universe: universe_,
            pointer_size: if prefs_.target_is_64bit {
                8
            } else {
                4
            }
        );
        env.setup_primitives();
        env.setup_builtins();
        return env;
    }

    pub func setup_primitives(mut self) {
        self.bool_sym = self.universe.scope.find_type_symbol_by_index_or_panic(0);
        self.rune_sym = self.universe.scope.find_type_symbol_by_index_or_panic(1);
        self.int8_sym = self.universe.scope.find_type_symbol_by_index_or_panic(2);
        self.int16_sym = self.universe.scope.find_type_symbol_by_index_or_panic(3);
        self.int32_sym = self.universe.scope.find_type_symbol_by_index_or_panic(4);
        self.int64_sym = self.universe.scope.find_type_symbol_by_index_or_panic(5);
        self.int_sym = self.universe.scope.find_type_symbol_by_index_or_panic(6);
        self.uint8_sym = self.universe.scope.find_type_symbol_by_index_or_panic(7);
        self.uint16_sym = self.universe.scope.find_type_symbol_by_index_or_panic(8);
        self.uint32_sym = self.universe.scope.find_type_symbol_by_index_or_panic(9);
        self.uint64_sym = self.universe.scope.find_type_symbol_by_index_or_panic(10);
        self.uint_sym = self.universe.scope.find_type_symbol_by_index_or_panic(11);
        self.comptime_int_sym = self.universe.scope.find_type_symbol_by_index_or_panic(12);
        self.comptime_float_sym = self.universe.scope.find_type_symbol_by_index_or_panic(13);
        self.float32_sym = self.universe.scope.find_type_symbol_by_index_or_panic(14);
        self.float64_sym = self.universe.scope.find_type_symbol_by_index_or_panic(15);
        self.string_sym = self.universe.scope.find_type_symbol_by_index_or_panic(16);

        self.bool_t = .Basic(self.bool_sym);
        self.rune_t = .Basic(self.rune_sym);
        self.int8_t = .Basic(self.int8_sym);
        self.int16_t = .Basic(self.int16_sym);
        self.int32_t = .Basic(self.int32_sym);
        self.int64_t = .Basic(self.int64_sym);
        self.int_t = .Basic(self.int_sym);
        self.uint8_t = .Basic(self.uint8_sym);
        self.uint16_t = .Basic(self.uint16_sym);
        self.uint32_t = .Basic(self.uint32_sym);
        self.uint64_t = .Basic(self.uint64_sym);
        self.uint_t = .Basic(self.uint_sym);
        self.comptime_int_t = .Basic(self.comptime_int_sym);
        self.comptime_float_t = .Basic(self.comptime_float_sym);
        self.float32_t = .Basic(self.float32_sym);
        self.float64_t = .Basic(self.float64_sym);
        self.string_t = .Basic(self.string_sym);
    }

    pub func filter_files(self, inputs: []string) -> []string {
        mut new_inputs := []string(cap: inputs.len);
        for input in inputs {
            base_name_input := Path.base_name(input);
            if base_name_input.count(".") == 1 {
                new_inputs.push(input);
                continue;
            }
            exts := base_name_input.substr(end: base_name_input.len - 3).split(".")[1:];
            mut already_exts := []string(cap: exts.len);
            mut should_compile := false;
            for ext in exts {
                if ext in already_exts {
                    utils.error("{}: duplicate special extension `{}`", input, ext);
                }
                already_exts.push(ext);
                if ext.starts_with("d_") || ext.starts_with("notd_") {
                    should_compile = if ext.starts_with("d_") {
                        ext.substr(2) in self.prefs.flags
                    } else {
                        ext.substr(4) !in self.prefs.flags
                    };
                } else if os := sys.OS.from_string(ext) {
                    should_compile = self.prefs.target_os == os;
                } else if arch := sys.Arch.from_string(ext) {
                    should_compile = self.prefs.target_arch == arch;
                } else if ext in ["x32", "x64"] {
                    should_compile = if ext == "x32" {
                        !self.prefs.target_is_64bit
                    } else {
                        self.prefs.target_is_64bit
                    };
                } else if ext in ["little_endian", "big_endian"] {
                    should_compile = if ext == "little_endian" {
                        self.prefs.target_is_little_endian
                    } else {
                        !self.prefs.target_is_little_endian
                    };
                } else if backend := prefs.Backend.from_string(ext) {
                    should_compile = backend == self.prefs.target_backend;
                } else {
                    utils.error("{}: unknown special extension `{}`", input, ext);
                }
                if !should_compile {
                    break;
                }
            }
            if should_compile {
                new_inputs.push(input);
            }
        }
        return new_inputs;
    }
}
