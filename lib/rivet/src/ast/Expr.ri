// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/strings;

import ../token;

#[default_value(.Empty(token.noPos))]
pub enum Expr < traits.Stringable {
    Empty: token.Pos,
    Paren {
        mut expr: Expr;
        pos: token.Pos;
        mut type: Type;
    },
    Type: Type,
    Assign {
        mut left: Expr;
        op: token.Kind;
        mut right: Expr;
        pos: token.Pos;
    },
    Ident {
        name: string;
        scope: Scope;
        is_comptime: bool;
        mut is_obj: bool;
        mut is_sym: bool;
        mut found: bool;
        mut sym: Sym;
        mut builtin: Builtin := .Invalid();
        pos: token.Pos;
        mut type: Type;
    },
    SelfTy {
        scope: Scope;
        pos: token.Pos;
        mut found: bool;
        mut sym: TypeSym;
    },
    SelfLiteral {
        mut scope: Scope;
        pos: token.Pos;
        mut found: bool;
        mut sym: TypeSym;
        mut obj: Var;
        mut type: Type;
    },
    NoneLiteral {
        pos: token.Pos;
    },
    BoolLiteral {
        value: bool;
        pos: token.Pos;
    },
    CharLiteral {
        value: string;
        is_byte: bool;
        pos: token.Pos;
        mut type: Type;
    },
    IntegerLiteral {
        value: string;
        pos: token.Pos;
        mut type: Type;
    },
    FloatLiteral {
        value: string;
        pos: token.Pos;
        mut type: Type;
    },
    StringLiteral {
        value: string;
        is_raw: bool;
        is_bytestr: bool;
        is_cstr: bool;
        pos: token.Pos;
        mut type: Type;
    },
    EnumLiteral {
        value: string;
        mut is_instance: bool;
        from_is_cmp: bool;
        pos: token.Pos;
        mut type: Type;
        mut sym: TypeSym;
        mut variant: EnumVariant;
    },
    TupleLiteral {
        values: []mut Expr;
        pos: token.Pos;
        mut type: Type;
    },
    ArrayLiteral {
        values: []mut Expr;
        is_dyn: bool;
        pos: token.Pos;
        mut type: Type;
    },
    Selector {
        mut left: Expr;
        mut left_type: Type;
        mut left_sym: Sym;
        field_name: string;
        field_pos: token.Pos;
        mut field_is_mut: bool;
        mut field_type: Type;
        mut is_path: bool;
        mut found: bool;
        mut sym: Sym;
        pos: token.Pos;
        mut type: Type;
    },
    Indirect {
    	mut left: Expr;
    	mut pos: token.Pos;
    	mut left_type: Type;
    	mut type: Type;
    	mut is_mut: bool;
    },
    OptionCheck {
    	mut left: Expr;
    	mut pos: token.Pos;
    	mut left_type: Type;
    	mut type: Type;
    },
    Branch {
        op: token.Kind;
        pos: token.Pos;
    },
    Range {
        mut start: Expr;
        mut end: Expr;
        has_start: bool;
        has_end: bool;
        is_inclusive: bool;
        pos: token.Pos;
        mut type: Type;
    },
    Index {
        mut left: Expr;
        mut left_type: Type;
        mut index: Expr;
        pos: token.Pos;
        mut type: Type;
        mut is_ref: bool;
        mut is_mut_ptr: bool;
    },
    Call {
        mut left: Expr;
        mut args: []CallArg;
        mut spread_expr: Expr;
        has_spread_expr: bool;
        mut err_handler: CallErrorHandler;
        pos: token.Pos;
        mut type: Type;
        mut func_: Func;

        mut is_closure: bool;
        mut is_constructor: bool;

        mut is_enum_variant: bool;
        mut enum_variant_sym: TypeSym;

        func has_named_args(self) -> bool {
            for arg in self.args {
                if arg.is_named {
                    return true;
                }
            }
            return false;
        }

        func get_named_arg(self, name: string) -> ?CallArg {
            for arg in self.args {
                if arg.is_named and arg.name == name {
                    return arg;
                }
            }
            return none;
        }

        /// Returns the number of pure arguments, that is, not named, that
        /// this call has.
        func pure_args_count(self) -> uint {
            mut l: uint := 0;
            for arg in self.args {
                if !arg.is_named {
                    l += 1;
                }
            }
            if self.has_spread_expr {
                l += 1;
            }
            return l;
        }

        #[inline]
        func has_err_handler(self) -> bool {
            return self.err_handler.has_expr or self.err_handler.is_propagate;
        }
    },
    BuiltinCall {
        name: string;
        args: []CallArg;
        dyn_array_is_mut: bool;
        pos: token.Pos;
        mut builtin: Builtin := .Invalid();
        mut type: Type;
    },
    Unary {
        mut right: Expr;
        op: token.Kind;
        is_mut_ptr: bool;
        pos: token.Pos;
        mut type: Type;
    },
    Binary {
        mut left: Expr;
        mut right: Expr;
        op: token.Kind;
        has_var_obj: bool;
        mut var_obj: ObjectData;
        mut scope: Scope;
        pos: token.Pos;
        mut type: Type;
    },
    Return {
        mut expr: Expr;
        has_expr: bool;
        pos: token.Pos;
    },
    Throw {
        mut expr: Expr;
        pos: token.Pos;
    },
    Block {
        is_unsafe: bool;
        mut stmts: []mut Stmt;
        mut expr: Expr;
        mut is_expr: bool;
        scope: Scope;
        pos: token.Pos;
        mut type: Type;
        mut defer_stmts: []Stmt.Defer;
    },
    If {
        branches: []IfBranch;
        has_else: bool;
        pos: token.Pos;
        mut expected_type: Type;
        mut type: Type;
    },
    Match {
        mut expr: Expr;
        branches: []MatchBranch;
        is_typematch: bool;
        has_else: bool;
        mut scope: Scope;
        pos: token.Pos;
        mut expected_type: Type;
        mut type: Type;
        mut is_exhaustive: bool;
    },
    // Examples:
    // - if x := optional_or_result_fn() { ... }
    // - while byte := reader.read() { ... }
    Guard {
        vars: []ObjectData;
        mut expr: Expr;
        has_cond: bool;
        mut cond: Expr;
        mut scope: Scope;
        pos: token.Pos;
    };

    pub func clean_paren(self) -> Self {
        mut res := self;
        while res is .Paren(paren) {
            res = paren.expr;
        }
        return res;
    }

    #[inline]
    pub func position(self) -> token.Pos {
        return match self is {
            .Empty(empty_pos) -> empty_pos,
            .Paren(paren) -> paren.pos,
            .Type(type) -> type.position(),
            .Assign(assign) -> assign.pos,
            .Ident(ident) -> ident.pos,
            .SelfTy(self_ty) -> self_ty.pos,
            .SelfLiteral(self_lit) -> self_lit.pos,
            .NoneLiteral(none_lit) -> none_lit.pos,
            .BoolLiteral(bool_lit) -> bool_lit.pos,
            .CharLiteral(char_lit) -> char_lit.pos,
            .IntegerLiteral(int_lit) -> int_lit.pos,
            .FloatLiteral(float_lit) -> float_lit.pos,
            .StringLiteral(string_lit) -> string_lit.pos,
            .EnumLiteral(enum_lit) -> enum_lit.pos,
            .TupleLiteral(tuple_lit) -> tuple_lit.pos,
            .ArrayLiteral(array_lit) -> array_lit.pos,
            .Index(index) -> index.pos,
            .Selector(selector) -> selector.pos,
            .Indirect(indirect) -> indirect.pos,
            .OptionCheck(option_check) -> option_check.pos,
            .Branch(branch) -> branch.pos,
            .Range(range) -> range.pos,
            .Call(call) -> call.pos,
            .BuiltinCall(builtin_call) -> builtin_call.pos,
            .Unary(unary) -> unary.pos,
            .Binary(binary) -> binary.pos,
            .Return(return_expr) -> return_expr.pos,
            .Throw(throw_expr) -> throw_expr.pos,
            .Block(block) -> block.pos,
            .If(if_expr) -> if_expr.pos,
            .Match(match_expr) -> match_expr.pos,
            .Guard(guard) -> guard.pos
        };
    }

    #[inline]
    pub func to_string(self) -> string {
        return match self is {
            .Empty -> "<empty-expression>",
            .Paren(paren) -> "({})".fmt(paren.expr),
            .Type(type) -> type.to_string(),
            .Assign(assign) -> "{} {} {}".fmt(assign.left, assign.op, assign.right),
            .Ident(ident) -> if ident.is_comptime {
                "@".concat(ident.name)
            } else {
                ident.name
            },
            .SelfTy -> "Self",
            .SelfLiteral -> "self",
            .NoneLiteral -> "none",
            .BoolLiteral(bool_lit) -> bool_lit.value.to_string(),
            .CharLiteral(char_lit) -> if char_lit.is_byte {
                "b'{}'".fmt(char_lit.value)
            } else {
                "'{}'".fmt(char_lit.value)
            },
            .IntegerLiteral(int_lit) -> int_lit.value,
            .FloatLiteral(float_lit) -> float_lit.value,
            .StringLiteral(string_lit) -> if string_lit.is_bytestr {
                "b\"{}\"".fmt(string_lit.value)
            } else if string_lit.is_raw {
                "r\"{}\"".fmt(string_lit.value)
            } else if string_lit.is_cstr {
                "c\"{}\"".fmt(string_lit.value)
            } else {
                "\"{}\"".fmt(string_lit.value)
            },
            .EnumLiteral(enum_lit) -> ".".concat(enum_lit.value),
            .TupleLiteral(tuple_lit) -> {
                mut sb := strings.Builder.from_string("(");
                for i, value in tuple_lit.values {
                    sb.write_string(value.to_string());
                    if i < tuple_lit.values.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_byte(b')');
                sb.to_string()
            },
            .ArrayLiteral(array_lit) -> {
                mut sb := strings.Builder.new(100);
                if array_lit.is_dyn {
                    sb.write_byte(b'+');
                }
                sb.write_byte(b'[');
                for i, value in array_lit.values {
                    sb.write_string(value.to_string());
                    if i < array_lit.values.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_byte(b']');
                sb.to_string()
            },
            .Selector(selector) -> "{}.{}".fmt(selector.left, selector.field_name),
            .Indirect(indirect) -> "{}.*".fmt(indirect.left),
            .OptionCheck(option_check) -> "{}?".fmt(option_check.left),
            .Branch(branch_expr) -> branch_expr.op.to_string(),
            .Range(range) -> {
                mut sb := strings.Builder.new();
                if range.has_start {
                    sb.write_string(range.start.to_string());
                }
                sb.write_string(if range.is_inclusive {
                    "..."
                } else {
                    ".."
                });
                if range.has_end {
                    sb.write_string(range.end.to_string());
                }
                sb.to_string()
            },
            .Index(index) -> "{}[{}]".fmt(index.left, index.index),
            .Call(call) -> {
                mut sb := strings.Builder.new();
                sb.write_string(call.left.to_string());
                sb.write_byte(b'(');
                for i, arg in call.args {
                    if arg.is_named {
                        sb.write_string(arg.name);
                        sb.write_string(": ");
                    }
                    sb.write_string(arg.expr.to_string());
                    if i < call.args.len - 1 {
                        sb.write_string(", ");
                    }
                }
                if call.has_spread_expr {
                    if call.args.len > 0 {
                        sb.write_string(", ");
                    }
                    sb.write_string("...");
                    sb.write_string(call.spread_expr.to_string());
                }
                sb.write_byte(b')');
                if call.err_handler.has_expr {
                    sb.write_string("catch ");
                    if call.err_handler.has_varname {
                        sb.write_fmt("|{}| ", call.err_handler.varname);
                    }
                    sb.write_string(call.err_handler.expr.to_string());
                } else if call.err_handler.is_propagate {
                    sb.write_byte(b'!');
                }
                sb.to_string()
            },
            .BuiltinCall(builtin_call) -> {
                mut sb := strings.Builder.from_string("@");
                sb.write_string(builtin_call.name);
                sb.write_byte(b'(');
                for i, arg in builtin_call.args {
                    sb.write_string(arg.expr.to_string());
                    if i < builtin_call.args.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_byte(b')');
                sb.to_string()
            },
            .Unary(unary) -> "{}{}".fmt(unary.op, unary.right),
            .Binary(binary) -> "{} {} {}".fmt(binary.left, binary.op, binary.right),
            .Return(return_expr) -> if return_expr.has_expr {
                "return {}".fmt(return_expr.expr)
            } else {
                "return"
            },
            .Throw(throw_expr) -> "throw {}".fmt(throw_expr.expr),
            .Block(block) -> {
                mut sb := strings.Builder.new();
                if block.is_unsafe {
                    sb.write_string("unsafe ");
                }
                sb.write_string("{ ");
                sb.write_fmt(" {} statements", block.stmts.len);
                if block.is_expr {
                    sb.write_string("; ");
                    sb.write_string(block.expr.to_string());
                }
                sb.write_string(" }");
                sb.to_string()
            },
            .If(if_expr) -> {
                mut sb := strings.Builder.new();
                for branch in if_expr.branches {
                    if branch.is_else {
                        sb.write_string("else ");
                    } else if branch.is_else_if {
                        sb.write_string("else if ");
                        sb.write_string(branch.cond.to_string());
                    } else {
                        sb.write_string("if ");
                        sb.write_string(branch.cond.to_string());
                    }
                    sb.write_fmt("{{ {} }}", branch.expr);
                }
                sb.to_string()
            },
            .Match(match_expr) -> {
                mut sb := strings.Builder.new();
                sb.write_fmt("match {} ", match_expr.expr);
                if match_expr.is_typematch {
                    sb.write_string("is ");
                }
                sb.write_string("{ ");
                for i, branch in match_expr.branches {
                    if branch.is_else {
                        sb.write_string("else ");
                    } else {
                        for ip, case in branch.cases {
                            sb.write_string(case.to_string());
                            if ip < branch.cases.len - 1 {
                                sb.write_string(", ");
                            }
                        }
                    }
                    if branch.has_var {
                        if branch.var_is_mut {
                            sb.write_string("mut ");
                        }
                        sb.write_string(branch.var_name);
                    }
                    if branch.has_cond {
                        sb.write_fmt(" if {} ", branch.cond);
                    }
                    sb.write_fmt("-> {}", branch.expr.to_string());
                    if i < match_expr.branches.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_string("} ");
                sb.to_string()
            },
            .Guard(guard) -> {
                mut sb := strings.Builder.new();
                if guard.vars.len > 0 {
                    sb.write_string("(");
                }
                for i, var_g in guard.vars {
                    if var_g.is_mut {
                        sb.write_string("mut ");
                    }
                    sb.write_string(var_g.name);
                    if i < guard.vars.len - 1 {
                        sb.write_string(", ");
                    }
                }
                if guard.vars.len > 0 {
                    sb.write_string(")");
                }
                sb.write_fmt(" := {}", guard.expr);
                if guard.has_cond {
                    sb.write_fmt("; {}", guard.cond);
                }
                sb.to_string()
            }
        };
    }
}

#[boxed]
pub struct CallArg {
    pub name: string;
    pub mut expr: Expr;
    pub is_named: bool;
    pub pos: token.Pos;
    pub mut type: Type;
}

#[boxed]
pub struct CallErrorHandler {
    pub varname: string;
    pub varname_pos: token.Pos;
    pub has_varname: bool;
    pub is_propagate: bool;
    pub mut expr: Expr;
    pub has_expr: bool;
    pub mut scope: Scope;
    pub pos: token.Pos;
}

#[boxed]
pub struct IfBranch {
    pub mut cond: Expr;
    pub mut expr: Expr;
    pub is_else: bool;
    pub is_else_if: bool;
    pub pos: token.Pos;
    pub mut type: Type;
}

#[boxed]
pub struct MatchBranch {
    pub cases: []mut Expr;
    pub has_var: bool;
    pub var_is_mut: bool;
    pub var_name: string;
    pub var_pos: token.Pos;
    pub has_cond: bool;
    pub mut var_type: Type;
    pub mut cond: Expr;
    pub mut expr: Expr;
    pub is_else: bool;
    pub pos: token.Pos;
    pub mut type: Type;
}
