// Copyright (C) 2023-2024 Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/traits.Stringable;

import ../token;

#[boxed]
pub enum Node < Stringable {
    Decl(^mut Decl),
    Stmt(^mut Stmt),
    Expr(^mut Expr);

    pub func position(^self) -> token.Pos {
        return match self.^ {
            .Decl(decl) -> decl.position(),
            .Stmt(stmt) -> stmt.position(),
            .Expr(expr) -> expr.position()
        };
    }

    pub func to_string(^self) -> string {
        return match self.^ {
            /*.Decl(decl) -> decl.to_string(),
            .Stmt(stmt) -> stmt.to_string(),*/
            .Expr(expr) -> expr.to_string(),
            else -> "<not-implemented>"
        };
    }
}

pub func nodes_to_decls(nodes: []^mut Node) -> []^mut Decl {
    mut decls := []^mut Decl(cap: nodes.len);
    for node in nodes {
        if node is .Decl(decl) {
            decls.push(decl);
        }
    }
    return decls;
}

pub func nodes_to_stmts(nodes: []^mut Node) -> []^mut Stmt {
    mut stmts := []^mut Stmt(cap: nodes.len);
    for node in nodes {
        if node is .Stmt(stmt) {
            stmts.push(stmt);
        }
    }
    return stmts;
}

pub func nodes_to_exprs(nodes: []^mut Node) -> []^mut Expr {
    mut exprs := []^mut Expr(cap: nodes.len);
    for node in nodes {
        if node is .Expr(expr) {
            exprs.push(expr);
        }
    }
    return exprs;
}
