// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/process;

#[boxed]
pub struct Scope {
    pub start: uint;
    pub mut end: uint;
    pub mut owner: ?Sym;
    pub mut parent: ?Scope;
    pub mut detached_from_parent: bool;
    pub mut childrens: []Scope;
    pub mut syms: []Sym;
    pub mut is_local: bool;

    pub func add(mut self, sym: Sym) -> ! {
        if _ := self.find(sym.name) {
            throw DuplicateSymbolError(
                "duplicate symbol `{}` in {} `{}`".fmt(
                    sym.name, self.owner?.type_of(), self.owner?.qualname()
                )
            );
        }
        self.syms.push(sym);
    }

    pub func add_or_get(mut self, sym: Sym) -> !Sym {
        if old_sym := self.find(sym.name) {
            if sym is TypeSym(type_sym) && old_sym is TypeSym(mut old_type_sym) {
                if old_type_sym.update(type_sym)! {
                    return old_sym;
                }
            }
            throw DuplicateSymbolError(
                "duplicate symbol `{}` in {} `{}`".fmt(
                    sym.name, self.owner?.type_of(), self.owner?.qualname()
                )
            );
        }
        self.syms.push(sym);
        return sym;
    }

    pub func add_local(mut self, sym: Sym) -> ! {
        if self.is_local {
            if sym is Var && sym.name == "_" {
                return; // ignore blank variable
            } else if _ := self.lookup(sym.name) {
                throw DuplicateSymbolError(
                    "duplicate {} `{}` in this scope".fmt(sym.type_of(), sym.name)
                );
            }
            self.syms.push(sym);
        }
    }

    #[inline]
    pub func exists(self, name: string) -> bool {
        return self.find(name) != none;
    }

    pub func find(self, name: string) -> ?Sym {
        for sym in self.syms {
            if sym.name == name {
                return sym;
            }
        }
        return none;
    }

    pub func find_or_panic(self, name: string) -> Sym {
        if x := self.find(name) {
            return x;
        }
        process.panic("cannot found symbol `{}`", name);
    }

    pub func find_by_index_or_panic(self, idx: uint) -> Sym {
        if idx >= self.syms.len {
            process.panic("symbol index out of range `{}`", idx);
        }
        return self.syms[idx];
    }

    #[inline]
    pub func find_type_symbol_or_panic(self, name: string) -> TypeSym {
        return @as(TypeSym, self.find_or_panic(name));
    }

    #[inline]
    pub func find_type_symbol_by_index_or_panic(self, idx: uint) -> TypeSym {
        return @as(TypeSym, self.find_by_index_or_panic(idx));
    }

    pub func lookup(self, name: string) -> ?Sym {
        if self.is_local {
            mut sc_: ?Scope := self;
            while sc := sc_ {
                if sym := sc.find(name) {
                    return sym;
                }
                if sc.dont_lookup_parent() {
                    break;
                }
                sc_ = sc.parent;
            }
        }
        return none;
    }

    #[inline]
    func dont_lookup_parent(self) -> bool {
        return self.parent == none || self.detached_from_parent;
    }

    pub func update_type(self, name: string, type: Type) {
        if sym := self.lookup(name) {
            if sym is Var(var_info) {
                var_info.type = type;
            }
        }
    }

    pub func update_is_hidden_ref(self, name: string, is_hidden_ref: bool) {
        if sym := self.lookup(name) {
            if sym is Var(var_info) {
                var_info.is_hidden_ref = is_hidden_ref;
            }
        }
    }

    pub func update_is_used(self, name: string, is_used: bool) {
        if sym := self.lookup(name) {
            if sym is Var(var_info) {
                var_info.is_used = is_used;
            }
        }
    }
}
