// Copyright (C) 2023-2024 Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../token;

#[boxed]
pub enum Stmt {
    Empty(token.Pos),
    Comment(Comment),
    ComptimeIf(ComptimeIf),
    Expr(^mut Expr),
    VarDecl {
        lefts: []^mut ObjectData;
        right: ^mut Expr;
        scope: ^mut Scope;
        pos: token.Pos;
    },
    While {
        mut cond: ^mut Expr;
        mut continue_expr: ^mut Expr;
        has_continue_expr: bool;
        mut stmt: ^mut Stmt;
        mut else_stmt: ^mut Stmt;
        has_else_stmt: bool;
        is_inf: bool;
        pos: token.Pos;
    },
    For {
        index: ^mut ObjectData;
        has_index: bool;
        values: []^mut ObjectData;
        iterable: ^mut Expr;
        stmt: ^mut Stmt;
        scope: ^mut Scope;
        pos: token.Pos;
    },
    Defer {
        pub enum Mode {
            Normal,
            Error,
            Success
        }

        expr: ^mut Expr;
        mode: Mode;
        pos: token.Pos;
    };

    pub func position(^self) -> token.Pos {
        return match self.^ {
            .Empty(empty_pos) -> empty_pos,
            .Comment(comment) -> comment.pos,
            .ComptimeIf(comptime_if) -> comptime_if.pos,
            .Expr(expr) -> expr.position(),
            .VarDecl(var_decl) -> var_decl.pos,
            .While(while_stmt) -> while_stmt.pos,
            .For(for_stmt) -> for_stmt.pos,
            .Defer(defer_stmt) -> defer_stmt.pos
        };
    }
}
