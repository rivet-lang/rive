// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../token;

#[boxed]
pub enum Stmt {
    Empty(token.Pos),
    Comment(Comment),
    Expr(Expr),
    VarDecl {
        mut lefts: []mut ObjectData;
        mut right: Expr;
        mut scope: Scope;
        pos: token.Pos;
    },
    While {
        mut cond: Expr;
        mut continue_expr: Expr;
        has_continue_expr: bool;
        mut stmt: Stmt;
        mut else_stmt: Stmt;
        has_else_stmt: bool;
        is_inf: bool;
        pos: token.Pos;
    },
    For {
        mut index: ObjectData;
        has_index: bool;
        mut values: []mut ObjectData;
        mut iterable: Expr;
        mut stmt: Stmt;
        mut scope: Scope;
        pos: token.Pos;
    },
    Defer {
        pub enum Mode {
            Normal,
            Error,
            Success
        }

        mut expr: Expr;
        mode: Mode;
        pos: token.Pos;
    };

    pub func position(self) -> token.Pos {
        return match self {
            .Empty(empty_pos) -> empty_pos,
            .Comment(comment) -> comment.pos,
            .Expr(expr) -> expr.position(),
            .VarDecl(var_decl) -> var_decl.pos,
            .While(while_stmt) -> while_stmt.pos,
            .For(for_stmt) -> for_stmt.pos,
            .Defer(defer_stmt) -> defer_stmt.pos
        };
    }
}
