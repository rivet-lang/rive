// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../token;

public enum Stmt {
    Empty: token.Pos,
    Expr: Expr,
    VarDecl {
        lefts: []ObjectData;
        mut right: Expr;
        mut scope: Scope;
        pos: token.Pos;
    },
    While {
        mut cond: Expr;
        mut continue_expr: Expr;
        has_continue_expr: bool;
        mut stmt: Stmt;
        mut else_stmt: Stmt;
        has_else_stmt: bool;
        is_inf: bool;
        pos: token.Pos;
    },
    For {
        mut index: ObjectData;
        has_index: bool;
        values: []ObjectData;
        mut iterable: Expr;
        mut stmt: Stmt;
        mut scope: Scope;
        pos: token.Pos;
    },
    Defer {
        mut expr: Expr;
        is_errdefer: bool;
        pos: token.Pos;
    };

    public func position(self) token.Pos {
        return switch self is {
            .Empty as empty_pos => empty_pos,
            .Expr as expr => expr.position(),
            .VarDecl as var_decl => var_decl.pos,
            .While as while_stmt => while_stmt.pos,
            .For as for_stmt => for_stmt.pos,
            .Defer as defer_stmt => defer_stmt.pos
        };
    }
}
