// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/process;

import ../token;

var mut SYM_IDS: usize = 0;

func new_sym_id() usize {
    res := SYM_IDS;
    SYM_IDS += 1;
    return res;
}

[boxed]
public struct DuplicateSymbolError : Error {
    msg: string;

    public func to_string(self) string {
        return self.msg;
    }
}

public enum ABI as uint8 : traits.Stringable {
    Rivet,
    C;

    [inline]
    public func from_string(abi: string) ?ABI {
        return switch abi {
            "C" => .C,
            "Rivet" => .Rivet,
            else => none
        };
    }

    [inline]
    public func to_string(&self) string {
        return switch self.* {
            .C => "C",
            .Rivet => "Rivet"
        };
    }
}

public trait Sym {
    id: usize = new_sym_id();
    abi: ABI;
    mut is_public: bool;
    parent: ?Sym;
    name: string;
    mut scope: Scope;
    mut mangled_name: string;
    mut qualified_name: string;
    is_universe: bool;
    is_root: bool;

    func mod(self) Module {
        mut p := self;
        while {
            if p is Module {
                break;
            } else if p_ := p.parent {
                p = p_;
            } else {
                break;
            }
        }
        return @cast(Module, p);
    }

    func has_access_to(self, other: Sym) bool {
        self_mod := self.mod();
        other_mod := other.mod();
        return (
            other_mod.is_universe or self_mod.id == other.id
            or self_mod.id == other_mod.id
            or self_mod.id == other_mod.parent?.id
            or self_mod.parent?.id == other.parent?.id
        );
    }

    [inline]
    func type_of(self) string {
        return switch self is {
            SymRef as ref => ref.type_of(),
            Module => "module",
            Const => "constant",
            Var => "variable",
            TypeSym as type_sym => if type_sym.info.is_compound() {
                type_sym.info.to_string()
            } else {
                "type"
            },
            Func as func_info => if func_info.is_method {
                "method"
            } else {
                "function"
            },
            else => "unknown symbol kind"
        };
    }

    [inline]
    func qualname(self) string {
        return if parent := self.parent {
            if parent.is_universe {
                self.name
            } else {
                parent.qualname().concat(".", self.name)
            }
        } else {
            self.name
        };
    }

    [inline]
    func ==(self, other: Self) bool {
        return self.id == other.id;
    }
}

[boxed]
public struct SymRef : Sym {
    public mut ref: Sym;
    public mut ref_expr: Expr;
    public mut ref_resolved: bool;
}

[boxed]
public struct Module : Sym {
    [inline]
    public func is_core(self) bool {
        return self.name == "core";
    }
}

[boxed]
public struct Const : Sym {
    public mut expr: Expr;
    public mut evaled_expr: Expr;
    public type: Type;
}

public enum VarLevel as uint8 {
    Mod, // module-level
    Rec, // receiver: `self`
    Arg, // argument-level
    Local // inside function
}

[boxed]
public struct Var : Sym {
    public is_extern: bool;
    public ir_name: string; // used for duplicate objects in IR
    public is_mut: bool;
    public is_used: bool;
    public is_changed: bool;
    public is_hidden_ref: bool;
    public level: VarLevel;
    public type: Type;
}

[boxed]
public struct Field {
    public is_public: bool;
    public name: string;
    public is_mut: bool;
    public has_def_expr: bool;
    public def_expr: Expr;
    public type: Type;
}

public enum TypeInfo : traits.Stringable {
    Placeholder,
    None,
    Bool,
    Rune,
    Int {
        size: usize;
    },
    Uint {
        size: usize;
    },
    Isize,
    Usize,
    ComptimeInt,
    ComptimeFloat,
    Float {
        size: usize;
    },
    String,
    Alias {
        parent: Type;
    },
    Array {
        elem_type: Type;
        size: isize;
        has_contains_method: bool;
    },
    Vector{
        elem_type: Type;
        has_contains_method: bool;
    },
    Tuple {
        types: []Type;
    },
    Enum {
        underlying_type: Type;
        mut variants: []EnumVariant;
        is_boxed: bool;

        [inline]
        func add_variant(mut self, variant: EnumVariant) {
            self.variants.push(variant);
        }

        func has_variant(self, name: string) bool {
            return self.get_variant(name) !is none;
        }

        func get_variant(self, name: string) ?EnumVariant {
            for v in self.variants {
                if v.name == name {
                    return v;
                }
            }
            return none;
        }

        func get_variant_by_type(self, type: Type) ?EnumVariant {
            for v in self.variants {
                if v.has_type and v.type == type {
                    return v;
                }
            }
            return none;
        }
    },
    Trait {
        bases: []mut TypeSym;
        mut implements: []TypeSym;
        mut has_objects: bool;

        func index_of(self, type_sym: TypeSym) ?usize {
            for i, ts in self.implements {
                if ts.id == type_sym.id {
                    return i;
                }
            }
            return none;
        }

        func implement(mut self, type_sym: TypeSym) {
            self.implements.push(type_sym);
            for mut b in self.bases {
                @cast(TypeInfo.Trait, b).implement(type_sym);
            }
        }

        func mark_has_objects(mut self) {
            self.has_objects = true;
        }
    },
    Struct {
        is_boxed: bool;
        is_opaque: bool;
        is_enum_variant: bool;
        bases: []mut TypeSym;
        traits: []TypeSym;
    };

    [inline]
    public func is_primitive(self) bool {
        return self is .Bool or self is .Rune or self is .Int
            or self is .Uint or self is .ComptimeInt or self is .ComptimeFloat
            or self is .ComptimeFloat or self is .Float;
    }

    [inline]
    public func is_compound(self) bool {
        return self is .Struct or self is .Trait or self is .Enum or self is .Tuple;
    }

    [inline]
    public func to_string(self) string {
        return switch self is {
            .None => "none",
            .Bool => "bool",
            .Rune => "rune",
            .Int as int_info => "int{}".fmt(int_info.size),
            .Isize => "isize",
            .Uint as uint_info => "uint{}".fmt(uint_info.size),
            .Usize => "usize",
            .ComptimeInt => "comptime_int",
            .ComptimeFloat => "comptime_float",
            .Float as float_info => "float{}".fmt(float_info.size),
            .String => "string",
            .Alias => "alias",
            .Array => "array",
            .Vector => "vector",
            .Tuple => "tuple",
            .Trait => "trait",
            .Struct as struct_info => if struct_info.is_enum_variant {
                "enum variant"
            } else {
                "struct"
            },
            .Enum => "enum",
            else => "placeholder"
        };
    }
}

[boxed]
public struct EnumVariant {
    public name: string;
    public value: isize;
    public has_type: bool;
    public type: Type;
    public has_fields: bool;
}

[boxed]
public struct TypeSym : Sym {
    public mut fields: []Field;
    public mut full_fields_: []Field;
    public mut info: TypeInfo;
    public mut size: isize = -1;
    public mut align: isize = -1;

    public func lookup_field(self, name: string) ?Field {
        for f in self.fields {
            if f.name == name {
                return f;
            }
        }
        if self.info is .Struct as struct_info {
            for b in struct_info.bases {
                if f := b.lookup_field(name) {
                    return f;
                }
            }
        }
        return none;
    }

    [inline]
    public func has_field(self, name: string) bool {
        return self.lookup_field(name) !is none;
    }

    public func lookup_in_base(self, name: string) ?Sym {
        if self.info is .Struct as struct_info {
            for b in struct_info.bases {
                if s := b.lookup(name) {
                    return s;
                }
            }
        }
        return none;
    }

    [inline]
    public func lookup(self, name: string) ?Sym {
        return if s := self.scope.lookup(name) {
            s
        } else if s := self.lookup_in_base(name) {
            s
        } else {
            none
        };
    }

    public func full_fields(mut self) []Field {
        if !self.full_fields_.is_empty() {
            return self.full_fields_;
        }
        mut fields := @vec(Field);
        if self.info is .Struct as struct_info {
            for mut b in struct_info.bases {
                for bf in b.full_fields() {
                    fields.push(bf);
                }
            }
        }
        for f in self.fields {
            fields.push(f);
        }
        self.full_fields_ = fields;
        return fields;
    }

    public func update(mut self, other: TypeSym) ! {
        if self.info is .Placeholder {
            // update placeholder
            self.is_public = other.is_public;
            self.info = other.info;
            self.fields = other.fields;
            for s in other.scope.syms {
                self.scope.add(s)!;
            }
        }
    }

    [inline]
    public func is_boxed(self) bool {
        return if self.info is .Enum as enum_info {
            enum_info.is_boxed
        } else if self.info is .Struct as struct_info {
            struct_info.is_boxed
        } else {
            self.info is .Trait or self.info is .String or self.info is .Vector
        };
    }

    [inline]
    public func is_primitive(self) bool {
        return if self.info is .Enum as enum_info {
            !enum_info.is_boxed
        } else {
            self.info.is_primitive()
        };
    }

    [inline]
    public func ==(self, rhs: Self) bool {
        return self.id == rhs.id;
    }
}

[boxed]
public struct Arg {
    public name: string;
    public is_mut: bool;
    public is_self: bool;
    public has_def_expr: bool;
    public def_expr: Expr;
    public pos: token.Pos;
    public mut type: Type;
}

[boxed]
public struct Func : Sym {
    public is_extern: bool;
    public is_unsafe: bool;
    public is_main: bool;
    public is_method: bool;
    public is_variadic: bool;
    public self_type: Type;
    public self_is_mut: bool;
    public self_is_ref: bool;
    public args: []Arg;
    public has_named_args: bool;
    public has_body: bool;
    public ret_type: Type;

    public func get_arg(self, idx: usize) Arg {
        arg := self.args[idx];
        return if arg.is_self {
            self.args[idx + 1]
        } else {
            arg
        };
    }

    public func args_len(self) usize {
        mut len: usize := 0;
        for arg in self.args {
            if !(arg.is_self or arg.type is .Variadic) {
                len += 1;
            }
        }
        return len;
    }

    [inline]
    public func kind(self) string {
        return if self.is_method { "method" } else { "function" };
    }
}

[boxed]
public struct Scope {
    public start: usize;
    public mut end: usize;
    public mut owner: Sym;
    public mut parent: ?Scope;
    public mut detached_from_parent: bool;
    public mut childrens: []Scope;
    public mut syms: []Sym;

    public func add(mut self, sym: Sym) ! {
        if sym.name == "_" and sym is Var {
            return; // ignore blank var
        } else if self.exists(sym.name) {
            return DuplicateSymbolError(
                "duplicate symbol `{}` in {} `{}`".fmt(
                    sym.name, self.owner.type_of(), self.owner.qualname()
                )
            );
        }
        self.syms.push(sym);
    }

    [inline]
    public func exists(self, name: string) bool {
        return self.lookup(name) !is none;
    }

    public func find(self, name: string) ?Sym {
        for sym in self.syms {
            if sym.name == name {
                return sym;
            }
        }
        return none;
    }

    public func find_or_panic(self, name: string) Sym {
        if x := self.find(name) {
            return x;
        }
        process.panic("cannot found symbol `{}`", name);
        return Sym(Module()); // TODO: remove this line
    }

    public func find_by_index_or_panic(self, idx: usize) Sym {
        if idx >= self.syms.len {
            process.panic("symbol index out of range `{}`", idx);
        }
        return self.syms[idx];
    }

    [inline]
    public func find_type_symbol_or_panic(self, name: string) TypeSym {
        return @cast(TypeSym, self.find_or_panic(name));
    }

    [inline]
    public func find_type_symbol_by_index_or_panic(self, idx: usize) TypeSym {
        return @cast(TypeSym, self.find_by_index_or_panic(idx));
    }

    public func lookup(self, name: string) ?Sym {
        mut sc_: ?Scope := self;
        while sc := sc_ {
            for sym in sc.syms {
                if sym.name == name {
                    return sym;
                }
            }
            if sc.dont_lookup_parent() {
                break;
            }
            sc_ = sc.parent;
        }
        return none;
    }

    [inline]
    func dont_lookup_parent(self) bool {
        return self.detached_from_parent or self.parent is none;
    }
}

[inline]
public func universe() Module {
    return Module(is_public: false, name: "universe", scope: Scope(syms: [
        TypeSym(name: "none", info: .None()),
        TypeSym(name: "bool", info: .Bool()),
        TypeSym(name: "rune", info: .Rune()),
        TypeSym(name: "int8", info: .Int(8)),
        TypeSym(name: "int16", info: .Int(16)),
        TypeSym(name: "int32", info: .Int(32)),
        TypeSym(name: "int64", info: .Int(64)),
        TypeSym(name: "isize", info: .Isize()),
        TypeSym(name: "uint8", info: .Uint(8)),
        TypeSym(name: "uint16", info: .Uint(16)),
        TypeSym(name: "uint32", info: .Uint(32)),
        TypeSym(name: "uint64", info: .Uint(64)),
        TypeSym(name: "usize", info: .Usize()),
        TypeSym(name: "comptime_int", info: .ComptimeInt()),
        TypeSym(name: "comptime_float", info: .ComptimeFloat()),
        TypeSym(name: "float32", info: .Float(32)),
        TypeSym(name: "float64", info: .Float(64)),
        TypeSym(name: "string", info: .Struct(is_boxed: true))
    ]));
}
