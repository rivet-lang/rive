// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/sys;
import std/fs/path;
import std/process;

import ../token;
import ../prefs;
import ../report;
import ../utils;

@[boxed]
public struct Table {
    /// `.universe` is the mega-module where all the modules being
    /// compiled reside.
    public mut universe: Module;
    public mut prefs: prefs.Prefs;

    public pointer_size: usize;

    public mut core_mod: Module;
    public mut error_sym_is_set: bool;

    public mut builtins: []Builtin;

    /// Primitive type, Error and Vector symbols.
    public mut bool_sym: TypeSym;
    public mut rune_sym: TypeSym;
    public mut int8_sym: TypeSym;
    public mut int16_sym: TypeSym;
    public mut int32_sym: TypeSym;
    public mut int64_sym: TypeSym;
    public mut isize_sym: TypeSym;
    public mut uint8_sym: TypeSym;
    public mut uint16_sym: TypeSym;
    public mut uint32_sym: TypeSym;
    public mut uint64_sym: TypeSym;
    public mut usize_sym: TypeSym;
    public mut comptime_int_sym: TypeSym;
    public mut comptime_float_sym: TypeSym;
    public mut float32_sym: TypeSym;
    public mut float64_sym: TypeSym;
    public mut string_sym: TypeSym;
    public mut error_sym: TypeSym;
    public mut vector_sym: TypeSym; // from `core` module

    /// Primitive types.
    public mut bool_t: Type = .Void();
    public mut rune_t: Type = .Void();
    public mut int8_t: Type = .Void();
    public mut int16_t: Type = .Void();
    public mut int32_t: Type = .Void();
    public mut int64_t: Type = .Void();
    public mut isize_t: Type = .Void();
    public mut uint8_t: Type = .Void();
    public mut uint16_t: Type = .Void();
    public mut uint32_t: Type = .Void();
    public mut uint64_t: Type = .Void();
    public mut usize_t: Type = .Void();
    public mut comptime_int_t: Type = .Void();
    public mut comptime_float_t: Type = .Void();
    public mut float32_t: Type = .Void();
    public mut float64_t: Type = .Void();
    public mut string_t: Type = .Void();
    public mut error_t: Type = .Void();

    public mut source_files: []SourceFile;

    @[inline]
    public func new(prefs_: prefs.Prefs) Table {
        universe_ := universe();
        mut table := Table(
            universe: universe_,
            prefs: prefs_,
            pointer_size: if prefs_.target_is_64bit {
                8
            } else {
                4
            }
        );
        table.setup_primitives();
        table.setup_builtins();
        return table;
    }

    func setup_primitives(mut self) {
        self.bool_sym = self.universe.scope.find_type_symbol_by_index_or_panic(0);
        self.rune_sym = self.universe.scope.find_type_symbol_by_index_or_panic(1);
        self.int8_sym = self.universe.scope.find_type_symbol_by_index_or_panic(2);
        self.int16_sym = self.universe.scope.find_type_symbol_by_index_or_panic(3);
        self.int32_sym = self.universe.scope.find_type_symbol_by_index_or_panic(4);
        self.int64_sym = self.universe.scope.find_type_symbol_by_index_or_panic(5);
        self.isize_sym = self.universe.scope.find_type_symbol_by_index_or_panic(6);
        self.uint8_sym = self.universe.scope.find_type_symbol_by_index_or_panic(7);
        self.uint16_sym = self.universe.scope.find_type_symbol_by_index_or_panic(8);
        self.uint32_sym = self.universe.scope.find_type_symbol_by_index_or_panic(9);
        self.uint64_sym = self.universe.scope.find_type_symbol_by_index_or_panic(10);
        self.usize_sym = self.universe.scope.find_type_symbol_by_index_or_panic(11);
        self.comptime_int_sym = self.universe.scope.find_type_symbol_by_index_or_panic(12);
        self.comptime_float_sym = self.universe.scope.find_type_symbol_by_index_or_panic(13);
        self.float32_sym = self.universe.scope.find_type_symbol_by_index_or_panic(14);
        self.float64_sym = self.universe.scope.find_type_symbol_by_index_or_panic(15);
        self.string_sym = self.universe.scope.find_type_symbol_by_index_or_panic(16);

        self.bool_t = .Basic(self.bool_sym);
        self.rune_t = .Basic(self.rune_sym);
        self.int8_t = .Basic(self.int8_sym);
        self.int16_t = .Basic(self.int16_sym);
        self.int32_t = .Basic(self.int32_sym);
        self.int64_t = .Basic(self.int64_sym);
        self.isize_t = .Basic(self.isize_sym);
        self.uint8_t = .Basic(self.uint8_sym);
        self.uint16_t = .Basic(self.uint16_sym);
        self.uint32_t = .Basic(self.uint32_sym);
        self.uint64_t = .Basic(self.uint64_sym);
        self.usize_t = .Basic(self.usize_sym);
        self.comptime_int_t = .Basic(self.comptime_int_sym);
        self.comptime_float_t = .Basic(self.comptime_float_sym);
        self.float32_t = .Basic(self.float32_sym);
        self.float64_t = .Basic(self.float64_sym);
        self.string_t = .Basic(self.string_sym);
    }

    func setup_builtins(mut self) {
        self.builtins = [
            // variables
            .Const("_FILE_", self.string_t),
            .Const("_LINE_", self.usize_t),
            .Const("_COLUMN_", self.usize_t),
            .Const("_FUNCTION_", self.string_t),
            .Const("_RIVET_VERSION_", self.string_t),
            .Const("_RIVET_COMMIT_", self.string_t),

            // functions
            .Func("size_of", [BuiltinArg("value", is_any: true)], self.usize_t),
            .Func("align_of", [BuiltinArg("value", is_any: true)], self.usize_t),

            .Func("ptr_add", [
                BuiltinArg("pointer", is_any: true),
                BuiltinArg("value", is_any: true)
            ], checks: [
                .ArgumentTypeShouldBe(0, .Pointer),
                .ArgumentTypeShouldBe(1, .Integer),
                .ReturnTypeEqualToArgumentType(0)
            ]),
            .Func("ptr_diff", [
                BuiltinArg("pointer", is_any: true),
                BuiltinArg("pointer2", is_any: true)
            ], self.usize_t, checks: [
                .ArgumentTypeShouldBe(0, .Pointer),
                .ArgumentTypeEqualToArgumentType(1, 0)
            ]),

            .Func("cast", [
                BuiltinArg("type", is_any: true),
                BuiltinArg("value", is_any: true)
            ], checks: [
                .ReturnTypeEqualToArgumentType(0)
            ]),

            .Func("unreachable", [], .Never(token.noPos)),
            .Func("breakpoint", []),
            .Func("assert", [
                BuiltinArg("cond", type: self.bool_t),
                BuiltinArg("msg", type: self.string_t, is_optional: true)
            ]),

            .Func("vec", [
                BuiltinArg("type", is_any: true),
                BuiltinArg("cap", type: self.usize_t, is_optional: true)
            ], checks: [
                .ReturnTypeEqualToArgumentType(0)
            ]),

            .Func("set_enum_ref_value", [
                BuiltinArg("enum_value", is_any: true, is_mut: true),
                BuiltinArg("new_value", is_any: true)
            ], is_unsafe: true, checks: [
                .ArgumentTypeShouldBe(0, .Enum),
                .ArgumentTypeEqualToArgumentType(1, 0)
            ]),

            // TODO: rename to `ignore_warn`: `@ignore_warn("not_mutated", expr)`.
            .Func("ignore_not_mutated_warn", [
                BuiltinArg("expr", is_any: true, is_mut: true)
            ])
        ];
    }

    public func find_builtin(self, name: string) ?Builtin {
        for builtin in self.builtins {
            is_equal := switch builtin is {
                .Const as b_var => b_var.name == name,
                .Func as b_func => b_func.name == name,
                else => false
            };
            if is_equal {
                return builtin;
            }
        }
        return none;
    }

    public func exist_builtin(self, name: string) bool {
        return self.find_builtin(name) !is none;
    }

    @[inline]
    public func is_number(self, type: Type) bool {
        return self.is_int(type) or self.is_float(type);
    }

    @[inline]
    public func is_int(self, type: Type) bool {
        return self.is_signed_int(type) or self.is_unsigned_int(type);
    }

    @[inline]
    public func is_signed_int(self, type: Type) bool {
        return type in [
            self.int8_t, self.int16_t, self.int32_t, self.int64_t, self.isize_t,
            self.comptime_int_t
        ];
    }

    @[inline]
    public func is_unsigned_int(self, type: Type) bool {
        return type in [
            self.uint8_t, self.uint16_t, self.uint32_t, self.uint64_t, self.usize_t
        ];
    }

    @[inline]
    public func is_float(self, type: Type) bool {
        return type in [self.float32_t, self.float64_t, self.comptime_float_t];
    }

    @[inline]
    public func is_comptime_number(self, type: Type) bool {
        return type == self.comptime_int_t or type == self.comptime_float_t;
    }

    public func comptime_number_to_type(self, type: Type) Type {
        return if type == self.comptime_int_t {
            self.int32_t
        } else if type == self.comptime_float_t {
            self.float64_t
        } else {
            type
        };
    }

    public func number_bits(self, type: Type) usize {
        return if self.is_int(type) {
            self.int_bits(type)
        } else if self.is_float(type) {
            self.float_bits(type)
        } else {
            0
        };
    }

    public func int_bits(self, type: Type) usize {
        type_sym := type.symbol()?;
        return if type_sym.info is .Int as int_info {
            int_info.size
        } else if type_sym.info is .Uint as uint_info {
            uint_info.size
        } else if type_sym.info is .Isize or type_sym.info is .Usize {
            if self.prefs.target_is_64bit { 64 } else { 32 }
        } else {
            75
        };
    }

    public func float_bits(self, type: Type) usize {
        _ = self;
        type_sym := type.symbol()?;
        return if type_sym.info is .Float as float_info {
            float_info.size
        } else {
            75
        };
    }

    /// Returns the size and alignment (in bytes) of `typ`, similarly to
    /// C's `sizeof(T)` and `_Alignof(T)`.
    public func type_size(mut self, type: Type, is_raw: bool = false) (usize, usize) {
        return switch type is {
            .Result, .Option => self.type_symbol_size(self.error_sym, is_raw),
            .Anyptr, .Pointer, .Reference, .Func => (self.pointer_size, self.pointer_size),
            else => if mut type_sym := type.symbol() {
                self.type_symbol_size(type_sym, is_raw)
            } else {
                (0, 0)
            }
        };
    }

    public func type_symbol_size(mut self, mut type_sym: TypeSym, is_raw: bool = false) (usize, usize) {
        return if type_sym.size != 0 {
            (type_sym.size, type_sym.align)
        } else {
            (mut size: usize, mut align: usize) := (0, 0);
            (size, align) = if type_sym.is_boxed() and !is_raw {
                (self.pointer_size, self.pointer_size)
            } else {
                switch type_sym.info is {
                    .Func => (self.pointer_size, self.pointer_size),
                    .Alias as alias_info => self.type_size(alias_info.parent),
                    .Bool => (1, 1),
                    .Usize, .Isize => (self.pointer_size, self.pointer_size),
                    .Int as int => switch int.size {
                        8 => (1, 1),
                        16 => (2, 2),
                        32 => (4, 4),
                        64 => (8, 8),
                        else => (0, 0)
                    },
                    .Uint as uint => switch uint.size {
                        8 => (1, 1),
                        16 => (2, 2),
                        32 => (4, 4),
                        64 => (8, 8),
                        else => (0, 0)
                    },
                    .Float as float => switch float.size {
                        32 => (4, 4),
                        64 => (8, 8),
                        else => (0, 0)
                    },
                    .Rune => (4, 4),
                    .ComptimeFloat, .ComptimeInt => (8, 8),
                    .Enum as enum_info => if enum_info.is_boxed {
                        ((type_sym.fields.len + 2) * self.pointer_size, self.pointer_size)
                    } else {
                        self.type_size(enum_info.underlying_type)
                    },
                    .Vector => self.type_symbol_size(self.vector_sym, is_raw),
                    .Array as array_info => {
                        (elem_size, elem_align) := self.type_size(array_info.elem_type);
                        (array_info.size * elem_size, elem_align)
                    },
                    .Struct, .Tuple => {
                        mut total_size: usize := 0;
                        mut max_alignment: usize := 0;
                        types := if type_sym.info is .Tuple as tuple_lit {
                            tuple_lit.types
                        } else {
                            mut tmp := @vec(Type);
                            for field in type_sym.full_fields() {
                                tmp.push(field.type);
                            }
                            tmp
                        };
                        for ftype in types {
                            (field_size, alignment) := self.type_size(ftype);
                            if alignment > max_alignment {
                                max_alignment = alignment;
                            }
                            total_size = utils.round_up(total_size, alignment) + field_size;
                        }
                        (utils.round_up(total_size, max_alignment), max_alignment)
                    },
                    .Trait as trait_info => {
                        (size, align) = ((type_sym.fields.len + 2) * self.pointer_size, self.pointer_size);
                        for mut btype in trait_info.bases {
                            (bsize, _balign) := self.type_symbol_size(btype, is_raw);
                            size += bsize - 2 * self.pointer_size;
                        }
                        (size, align)
                    },
                    else => process.panic(
                        "Table.type_size: unsupported type `{}`", type_sym.qualname()
                    )
                }
            };
            type_sym.size = size;
            type_sym.align = align;
            (size, align)
        };
    }

    public func filter_files(self, inputs: []string) []string {
        mut new_inputs := @vec(string, inputs.len);
        for input in inputs {
            basename_input := path.basename(input);
            if basename_input == "project.ri" {
                continue; // Skip `project.ri` file, loaded after
            } else if basename_input.count(".") == 1 {
                new_inputs.push(input);
                continue;
            }
            exts := basename_input[..basename_input.len - 3].split(".")[1..];
            mut already_exts := @vec(string, exts.len);
            mut should_compile := false;
            for ext in exts {
                if ext in already_exts {
                    utils.error("{}: duplicate special extension `{}`", input, ext);
                }
                already_exts.push(ext);
                if ext.starts_with("d_") or ext.starts_with("notd_") {
                    should_compile = should_compile and if ext.starts_with("d_") {
                        ext[2..] in self.prefs.flags
                    } else {
                        ext[2..] !in self.prefs.flags
                    };
                } else if os := sys.OS.from_string(ext) {
                    should_compile = should_compile and self.prefs.target_os == os;
                } else if arch := sys.Arch.from_string(ext) {
                    should_compile = should_compile and self.prefs.target_arch == arch;
                } else if ext in ["x32", "x64"] {
                    should_compile = should_compile and if ext == "x32" {
                        !self.prefs.target_is_64bit
                    } else {
                        self.prefs.target_is_64bit
                    };
                } else if ext in ["little_endian", "big_endian"] {
                    should_compile = should_compile and if ext == "little_endian" {
                        self.prefs.target_is_little_endian
                    } else {
                        !self.prefs.target_is_little_endian
                    };
                } else if backend := prefs.Backend.from_string(ext) {
                    should_compile = should_compile and backend == self.prefs.target_backend;
                } else {
                    utils.error("{}: unknown special extension `{}`", input, ext);
                }
            }
            if should_compile {
                new_inputs.push(input);
            }
        }
        return new_inputs;
    }

    public func evalue_pp_symbol(self, name: string, pos: token.Pos) bool {
        switch name {
            // operating systems
            "_LINUX_", "_WINDOWS_" => {
                return if os := sys.OS.from_string(name) {
                    os == self.prefs.target_os
                } else {
                    false
                };
            },
            // architectures
            "_X86_", "_AMD64_" => {
                return if os := sys.Arch.from_string(name) {
                    os == self.prefs.target_arch
                } else {
                    false
                };
            },
            // bits
            "_x32_", "_x64_" => {
                return if name == "_x32_" {
                    !self.prefs.target_is_64bit
                } else {
                    self.prefs.target_is_64bit
                };
            },
            // endian
            "_LITTLE_ENDIAN_", "_BIG_ENDIAN_" => {
                return if name == "_LITTLE_ENDIAN_" {
                    self.prefs.target_is_little_endian
                } else {
                    !self.prefs.target_is_little_endian
                };
            },
            // optimize modes
            "_DEBUG_", "_RELEASE_" => {
                return if name == "_DEBUG_" {
                    self.prefs.optimize_mode == .Debug
                } else {
                    self.prefs.optimize_mode == .Release
                };
            },
            "_TESTS_" => return self.prefs.is_test,
            else => return if name.starts_with("_") and name.ends_with("_") {
                report.error("unknown builtin flag: `{}`".fmt(name), pos);
                false
            } else {
                name in self.prefs.flags
            }
        }
    }
}

public func universe() Module {
    return Module(
        name: "universe",
        scope: Scope(syms: [
            TypeSym(name: "bool", info: .Bool()),
            TypeSym(name: "rune", info: .Rune()),
            TypeSym(name: "int8", info: .Int(8)),
            TypeSym(name: "int16", info: .Int(16)),
            TypeSym(name: "int32", info: .Int(32)),
            TypeSym(name: "int64", info: .Int(64)),
            TypeSym(name: "isize", info: .Isize()),
            TypeSym(name: "uint8", info: .Uint(8)),
            TypeSym(name: "uint16", info: .Uint(16)),
            TypeSym(name: "uint32", info: .Uint(32)),
            TypeSym(name: "uint64", info: .Uint(64)),
            TypeSym(name: "usize", info: .Usize()),
            TypeSym(name: "comptime_int", info: .ComptimeInt()),
            TypeSym(name: "comptime_float", info: .ComptimeFloat()),
            TypeSym(name: "float32", info: .Float(32)),
            TypeSym(name: "float64", info: .Float(64)),
            TypeSym(name: "string", info: .Struct(is_boxed: true))
        ])
    );
}

public enum Builtin {
    Invalid,
    Const {
        name: string;
        type: Type;
    },
    Func {
        name: string;
        args: []BuiltinArg;
        type: Type = .Void();
        is_unsafe: bool;
        checks: []BuiltinFuncCheck;

        func args_len(self) usize {
            mut l: usize := 0;
            for arg in self.args {
                if arg.is_optional {
                    break;
                }
                l += 1;
            }
            return l;
        }
    };

    public func type(self) Type {
        return switch self is {
            .Const as b_const => b_const.type,
            .Func as b_func => b_func.type,
            else => .Void()
        };
    }
}

struct BuiltinArg {
    public name: string;
    public is_mut: bool;
    public is_any: bool; // any type
    public type: Type = .Void();
    public is_optional: bool;
}

enum BuiltinFuncType {
    Pointer,
    Reference,
    Enum,
    Integer
}

enum BuiltinFuncCheck {
    ReturnTypeEqualToArgumentType: usize,
    ArgumentTypeEqualToArgumentType {
        arg1_idx: usize;
        arg2_idx: usize;
    },
    ArgumentTypeShouldBe {
        arg_idx: usize;
        type: BuiltinFuncType;
    }
}
