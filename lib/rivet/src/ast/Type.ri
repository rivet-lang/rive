// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import { Builder } from std/strings;

import ../token;

public enum Type : traits.Stringable {
    Unresolved: Expr,
    Void,
    Option: Type,
    Result: Type,
    Tuple {
        inners: []Type;
        sym: TypeSym;

        func ==(self, other: Self) bool {
            for i, inner in self.inners {
                if inner != other.inners[i] {
                    return false;
                }
            }
            return true;
        }
    },
    Variadic {
        inner: Type;
        is_mut: bool;
        sym: TypeSym;
    },
    Vector {
        inner: Type;
        is_mut: bool;
        sym: TypeSym;
    },
    Array {
        inner: Type;
        is_mut: bool;
        size: Expr;
        sym: TypeSym;
    },
    Reference {
        inner: Type;
        is_mut: bool;
    },
    Pointer {
        inner: Type;
        is_mut: bool;
        is_indexable: bool;
    },
    Anyptr {
        is_mut: bool;
        pos: token.Pos;
    },
    Func {
        is_unsafe: bool;
        is_extern: bool;
        abi: ABI;
        is_method: bool;
        self_is_mut: bool;
        self_is_ref: bool;
        args: []Arg;
        is_variadic: bool;
        ret_typ: Type;
    },
    Resolved: TypeSym;

    public func unalias(self) ?Self {
        // NOTE: `.unalias()` returns an option, so we use the same type without unaliasing
        // instead.
        switch self is {
            .Result as result_inner => return .Result(result_inner.unalias() ?? result_inner),
            .Option as option_inner => return .Option(option_inner.unalias() ?? option_inner),
            .Tuple as tuple_data => {
                unaliased_types := @vec(mut Type, tuple_data.inners.len);
                for i, tuple_type in tuple_data.inners {
                    unaliased_types[i] = tuple_type.unalias() ?? tuple_type;
                }
                return .Tuple(unaliased_types, tuple_data.sym);
            },
            .Vector as vector_data => return .Vector(
                vector_data.inner.unalias() ?? vector_data.inner, vector_data.is_mut
            ),
            .Array as array_data => return .Array(
                array_data.inner.unalias() ?? array_data.inner, ...self
            ),
            .Reference as reference_data => return .Reference(
                reference_data.inner.unalias() ?? reference_data.inner, ...self
            ),
            .Pointer as pointer_data => return .Pointer(
                pointer_data.inner.unalias() ?? pointer_data.inner, ...self
            ),
            .Anyptr => return self,
            .Func as func_data => {
                args := @vec(mut Arg, func_data.args.len);
                for i, arg in args {
                    args[i].typ = arg.typ.unalias() ?? arg.typ;
                }
                return .Func(
                    args: args, ret_typ: func_data.ret_typ.unalias() ?? func_data.ret_typ,
                    ...self
                );
            },
            .Resolved as resolved_sym => return if resolved_sym.info is .Alias as alias_info {
                .Resolved(
                    (alias_info.parent.unalias() ?? alias_info.parent)
                        .symbol() ?? resolved_sym
                )
            } else {
                .Resolved(resolved_sym)
            },
            else => return none // for `.Void` or `.Unresolved`
        }
    }

    [inline]
    public func symbol(self) ?TypeSym {
        // NOTE: `.Func` has no TypeSym, so it does not appear in this typeswitch,
        // the same is for `.Void` and `.Anyptr`.
        return switch self is {
            .Result as result_inner => result_inner.symbol(),
            .Option as option_inner => option_inner.symbol(),
            .Tuple as tuple_data => tuple_data.sym,
            .Variadic as variadic_data => variadic_data.sym,
            .Vector as vector_data => vector_data.sym,
            .Array as array_data => array_data.sym,
            .Reference as reference_data => reference_data.inner.symbol(),
            .Pointer as pointer_data => pointer_data.inner.symbol(),
            .Resolved as resolved => resolved,
            else => none
        };
    }

    [inline]
    public func ==(self, rhs: Type) bool {
        return switch self is {
            .Result as result_lhs => if rhs is .Result as result_rhs {
                result_lhs == result_rhs
            } else {
                false
            },
            .Option as option_lhs => if rhs is .Option as option_rhs {
                option_lhs == option_rhs
            } else {
                false
            },
            .Tuple as tuple_lhs => if rhs is .Tuple as tuple_rhs {
                tuple_lhs == tuple_rhs
            } else {
                false
            },
            .Variadic as variadic_lhs => if rhs is .Variadic as variadic_rhs {
                variadic_lhs.inner == variadic_rhs.inner
            } else {
                false
            },
            .Vector as vector_lhs => if rhs is .Vector as vector_rhs {
                vector_lhs.inner == vector_rhs.inner and vector_lhs.is_mut == vector_rhs.is_mut
            } else {
                false
            },
            .Array as array_lhs => if rhs is .Array as array_rhs {
                array_lhs.inner == array_rhs.inner
                    /* and array_lhs.size == array_rhs.size */
                    and array_lhs.is_mut == array_rhs.is_mut
            } else {
                false
            },
            .Reference as ref_lhs => if rhs is .Reference as ref_rhs {
                if ref_lhs.is_mut and !ref_rhs.is_mut {
                    false
                } else {
                    ref_lhs.inner == ref_rhs.inner
                }
            } else {
                false
            },
            .Pointer as ptr_lhs => if rhs is .Pointer as ptr_rhs {
                if ptr_lhs.is_mut and !ptr_rhs.is_mut {
                    false
                } else if ptr_lhs.is_indexable and !ptr_rhs.is_indexable {
                    false
                } else {
                    ptr_lhs.inner == ptr_rhs.inner
                }
            } else {
                false
            },
            .Anyptr as anyptr_lhs => if rhs is .Anyptr as anyptr_rhs {
                anyptr_lhs.is_mut == anyptr_rhs.is_mut
            } else {
                false
            },
            .Func as func_lhs => if rhs is .Func as func_rhs {
                switch {
                    func_lhs.is_unsafe != func_rhs.is_unsafe,
                    func_lhs.is_extern != func_rhs.is_extern,
                    func_lhs.abi != func_rhs.abi,
                    func_lhs.is_method != func_rhs.is_method,
                    func_lhs.self_is_mut != func_rhs.self_is_mut,
                    func_lhs.self_is_ref != func_rhs.self_is_ref,
                    func_lhs.args.len != func_rhs.args.len => false,
                    else => {
                        mut final_res := func_lhs.ret_typ == func_rhs.ret_typ;
                        for i, arg_lhs in func_lhs.args {
                            arg_rhs := func_rhs.args[i];
                            if arg_lhs.is_mut != arg_rhs.is_mut {
                                final_res = false;
                                break;
                            }
                            if arg_lhs.typ != arg_rhs.typ {
                                final_res = false;
                                break;
                            }
                        }
                        final_res
                    }
                }
            } else {
                false
            },
            .Resolved as resolved_lhs => if rhs is .Resolved as resolved_rhs {
                resolved_lhs == resolved_rhs
            } else {
                false
            },
            else => false
        };
    }

    public func to_string(self) string {
        return switch self is {
            .Result as result_inner => "!".concat(result_inner.to_string()),
            .Option as option_inner => "?".concat(option_inner.to_string()),
            .Tuple as tuple_data => {
                mut sb := Builder.new(100);
                sb.write_byte(b'(');
                for i, inner in tuple_data.inners {
                    sb.write_string(inner.to_string());
                    if i < tuple_data.inners.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_byte(b')');
                sb.to_string()
            },
            .Variadic as variadic_data => "...".concat(variadic_data.inner.to_string()),
            .Vector as vector_data => if vector_data.is_mut {
                "[]mut"
            } else {
                "[]"
            }.concat(vector_data.inner.to_string()),
            .Array as array_data => "[".concat(
                /* array_data.expr.to_string(), */ "]", if array_data.is_mut {
                    "mut "
                } else {
                    ""
                }, array_data.inner.to_string()
            ),
            .Reference as reference_data => if reference_data.is_mut {
                "&mut "
            } else {
                "&"
            }.concat(reference_data.inner.to_string()),
            .Pointer as pointer_data => {
                if pointer_data.is_mut {
                    if pointer_data.is_indexable {
                        "[*]mut "
                    } else {
                        "*mut "
                    }
                } else {
                    if pointer_data.is_indexable {
                        "[*]"
                    } else {
                        "*"
                    }
                }.concat(pointer_data.inner.to_string())
            },
            .Anyptr as anyptr_data => {
                if anyptr_data.is_mut {
                    "mut_anyptr"
                } else {
                    "anyptr"
                }
            },
            .Func as func_data => {
                mut sb := Builder.new(150);
                if func_data.is_extern {
                    sb.write_fmt("extern ({}) ", func_data.abi);
                }
                sb.write_string("func(");
                if func_data.is_method {
                    if func_data.self_is_mut {
                        sb.write_string("mut ");
                    } else if func_data.self_is_ref {
                        sb.write_string("&");
                    }
                    sb.write_string("self");
                    if func_data.args.len > 0 {
                        sb.write_string(", ");
                    }
                }
                if func_data.is_extern and func_data.is_variadic {
                    if func_data.args.len > 0 {
                        sb.write_string(", ");
                    }
                    sb.write_string("...");
                }
                sb.write_string(")");
                if func_data.ret_typ !is .Void {
                    sb.write_string(" ");
                    sb.write_string(func_data.ret_typ.to_string());
                }
                sb.to_string()
            },
            .Resolved as resolved_sym => resolved_sym.qualname(),
            else => "" // TODO: handle `.Unresolved`
        };
    }
}
