// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import { Builder } from std/strings;

import ../token;

public enum Type : traits.Stringable {
    Basic {
        mut sym: TypeSym;
        mut is_unresolved: bool;
        mut expr: Expr;
        pos: token.Pos;
    },
    Never: token.Pos,
    Void,
    None,
    Option {
        mut inner: Type;
        pos: token.Pos;
    },
    Result {
        mut inner: Type;
        pos: token.Pos;
    },
    Tuple {
        inners: []mut Type;
        mut sym: TypeSym;
        pos: token.Pos;

        func ==(self, other: Self) bool {
            if self.inners.len != other.inners.len {
                return false;
            }
            for i, inner in self.inners {
                if inner != other.inners[i] {
                    return false;
                }
            }
            return true;
        }
    },
    Variadic {
        mut inner: Type;
        is_mut: bool;
        mut sym: TypeSym;
        pos: token.Pos;
    },
    Vector {
        mut inner: Type;
        is_mut: bool;
        mut sym: TypeSym;
        pos: token.Pos;
    },
    Array {
        mut inner: Type;
        is_mut: bool;
        mut size: Expr;
        mut size_value: usize;
        mut sym: TypeSym;
        pos: token.Pos;
    },
    Reference {
        mut inner: Type;
        is_mut: bool;
        pos: token.Pos;
    },
    Pointer {
        mut inner: Type;
        is_mut: bool;
        is_indexable: bool;
        pos: token.Pos;
    },
    Anyptr {
        is_mut: bool;
        pos: token.Pos;
    },
    Func {
        is_method: bool;
        self_is_mut: bool;
        self_is_ref: bool;
        args: []Arg;
        mut ret_type: Type;
        pos: token.Pos;
        mut sym: TypeSym;
        mut has_sym: bool;

        [inline]
        func symbol(self) Func {
            return if self.has_sym and self.sym.info is .Func as func_sym {
                func_sym
            } else {
                Func(
                    is_method: self.is_method,
                    self_is_mut: self.self_is_mut,
                    self_is_ref: self.self_is_ref,
                    args: self.args,
                    ret_type: self.ret_type
                )
            };
        }
    };

    [inline]
    public func ptr_or_ref_inner(self) Self {
        return switch self is {
            .Pointer as ptr => ptr.inner,
            .Reference as ref => ref.inner,
            .Anyptr => self,
            else => .Void()
        };
    }

    public func unalias(self) ?Self {
        // NOTE: `.unalias()` returns an option, so we use the same type without
        // unaliasing instead.
        return switch self is {
            .Anyptr => self,
            .Result as result => .Result(result.inner.unalias() ?? result.inner),
            .Option as option => .Option(option.inner.unalias() ?? option.inner),
            .Tuple as tuple_data => {
                unaliased_types := @vec(mut Type, tuple_data.inners.len);
                for i, tuple_type in tuple_data.inners {
                    unaliased_types[i] = tuple_type.unalias() ?? tuple_type;
                }
                .Tuple(unaliased_types, tuple_data.sym)
            },
            .Vector as vector_data => .Vector(
                vector_data.inner.unalias() ?? vector_data.inner, vector_data.is_mut
            ),
            .Array as array_data => .Array(
                array_data.inner.unalias() ?? array_data.inner, ...self
            ),
            .Reference as reference_data => .Reference(
                reference_data.inner.unalias() ?? reference_data.inner, ...self
            ),
            .Pointer as pointer_data => .Pointer(
                pointer_data.inner.unalias() ?? pointer_data.inner, ...self
            ),
            .Func as func_data => {
                for arg in func_data.args {
                    arg.type = arg.type.unalias() ?? arg.type;
                }
                .Func(
                    ret_type: func_data.ret_type.unalias() ?? func_data.ret_type,
                    ...self
                )
            },
            .Basic as basic if !basic.is_unresolved => if basic.sym.info is .Alias as alias_info {
                alias_info.parent.unalias() ?? alias_info.parent
            } else {
                .Basic(basic.sym)
            },
            else => none // for `.Void`, `.None` or `.Never`
        };
    }

    public func unalias_in_place(mut self) {
        if unaliased_type := self.unalias() {
            unsafe {
                @set_enum_ref_value(self, unaliased_type);
            }
        }
    }

    [inline]
    public func symbol(self) ?TypeSym {
        // NOTE: `.Void`, `.None`, `.Never` and `.Anyptr` has no `TypeSym` value.
        return switch self is {
            .Result as result => result.inner.symbol(),
            .Option as option => option.inner.symbol(),
            .Tuple as tuple_data => tuple_data.sym,
            .Variadic as variadic_data => variadic_data.sym,
            .Vector as vector_data => vector_data.sym,
            .Array as array_data => array_data.sym,
            .Reference as reference_data => reference_data.inner.symbol(),
            .Pointer as pointer_data => pointer_data.inner.symbol(),
            .Func as func_data => func_data.sym,
            .Basic as basic if !basic.is_unresolved => basic.sym,
            else => none
        };
    }

    [inline]
    public func is_boxed(self) bool {
        return if type_sym := self.symbol() {
            type_sym.is_boxed()
        } else {
            false
        };
    }

    [inline]
    public func is_void(self) bool {
        return switch self is {
            .Void, .Never => true,
            .Result as result => result.inner.is_void(),
            else => false
        };
    }

    [inline]
    public func is_pointer(self) bool {
        return self is .Pointer or self is .Anyptr;
    }

    [inline]
    public func is_ptr_or_ref(self) bool {
        return self.is_pointer() or self is .Reference;
    }

    [inline]
    public func is_mut_ptr_or_ref(self) bool {
        return switch self is {
            .Pointer as ptr => ptr.is_mut,
            .Reference as ref => ref.is_mut,
            .Anyptr as anyptr_ => anyptr_.is_mut,
            else => false
        };
    }

    [inline]
    public func position(self) token.Pos {
        return switch self is {
            .Void, .None => token.noPos,
            .Never as never_pos => never_pos,
            .Option as opt_t => opt_t.pos,
            .Result as res_t => res_t.pos,
            .Tuple as tuple_t => tuple_t.pos,
            .Variadic as variadic_t => variadic_t.pos,
            .Vector as vec_t => vec_t.pos,
            .Array as arr_t => arr_t.pos,
            .Reference as ref_t => ref_t.pos,
            .Pointer as ptr_t => ptr_t.pos,
            .Anyptr as anyptr_t => anyptr_t.pos,
            .Func as func_t => func_t.pos,
            .Basic as basic_t => if basic_t.is_unresolved {
                basic_t.expr.position()
            } else {
                basic_t.pos
            }
        };
    }

    [inline]
    public func ==(self, rhs: Self) bool {
        return switch self is {
            .None if rhs is .None => true,
            .Void if rhs is .Void => true,
            .Never if rhs is .Never => true,
            .Result as result_lhs if rhs is .Result as result_rhs =>
                result_lhs.inner == result_rhs.inner,
            .Option as option_lhs if rhs is .Option as option_rhs =>
                option_lhs.inner == option_rhs.inner,
            .Tuple as tuple_lhs if rhs is .Tuple as tuple_rhs => tuple_lhs == tuple_rhs,
            .Variadic as variadic_lhs if rhs is .Variadic as variadic_rhs =>
                variadic_lhs.inner == variadic_rhs.inner,
            .Vector as vector_lhs if rhs is .Vector as vector_rhs =>
                vector_lhs.inner == vector_rhs.inner and vector_lhs.is_mut == vector_rhs.is_mut,
            .Array as array_lhs if rhs is .Array as array_rhs =>
                array_lhs.inner == array_rhs.inner and array_lhs.size_value == array_rhs.size_value
                and array_lhs.is_mut == array_rhs.is_mut,
            .Reference as ref_lhs if rhs is .Reference as ref_rhs => if ref_lhs.is_mut
                and !ref_rhs.is_mut {
                false
            } else {
                ref_lhs.inner == ref_rhs.inner
            },
            .Pointer as ptr_lhs if rhs is .Pointer as ptr_rhs => if ptr_lhs.is_mut
                and !ptr_rhs.is_mut {
                false
            } else if ptr_lhs.is_indexable and !ptr_rhs.is_indexable {
                false
            } else {
                ptr_lhs.inner == ptr_rhs.inner
            },
            .Anyptr as anyptr_lhs if rhs is .Anyptr as anyptr_rhs =>
                anyptr_lhs.is_mut == anyptr_rhs.is_mut,
            .Func as func_lhs if rhs is .Func as func_rhs => switch {
                func_lhs.is_method != func_rhs.is_method,
                func_lhs.self_is_mut != func_rhs.self_is_mut,
                func_lhs.self_is_ref != func_rhs.self_is_ref,
                func_lhs.args.len != func_rhs.args.len => false,
                else => {
                    mut final_res := func_lhs.ret_type == func_rhs.ret_type;
                    for i, arg_lhs in func_lhs.args {
                        arg_rhs := func_rhs.args[i];
                        if arg_lhs.is_mut != arg_rhs.is_mut {
                            final_res = false;
                            break;
                        }
                        if arg_lhs.type != arg_rhs.type {
                            final_res = false;
                            break;
                        }
                    }
                    final_res
                }
            },
            .Basic as basic_lhs if rhs is .Basic as basic_rhs =>
                !(basic_lhs.is_unresolved and basic_rhs.is_unresolved)
                and basic_lhs.sym == basic_rhs.sym,
            else => false
        };
    }

    public func !=(self, rhs: Self) bool {
    	return !(self == rhs);
    }

    public func to_string(self) string {
        return self.to_string_(false);
    }

    public func to_qualstring(self) string {
        return self.to_string_(true);
    }

    public func to_string_(self, qualstr: bool) string {
        return switch self is {
            .None => "<none>",
        	.Void => "<void>",
            .Never => "never",
            .Result as result => "!".concat(result.inner.to_string_(qualstr)),
            .Option as option => "?".concat(option.inner.to_string_(qualstr)),
            .Tuple as tuple_data => {
                mut sb := Builder.new(100);
                sb.write_byte(b'(');
                for i, inner in tuple_data.inners {
                    sb.write_string(inner.to_string_(qualstr));
                    if i < tuple_data.inners.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_byte(b')');
                sb.to_string()
            },
            .Variadic as variadic_data => "...".concat(variadic_data.inner.to_string_(qualstr)),
            .Vector as vector_data => if vector_data.is_mut {
                "[]mut"
            } else {
                "[]"
            }.concat(vector_data.inner.to_string_(qualstr)),
            .Array as array_data => "[".concat(
                array_data.size.to_string(), "]", if array_data.is_mut {
                    "mut "
                } else {
                    ""
                }, array_data.inner.to_string_(qualstr)
            ),
            .Reference as reference_data => if reference_data.is_mut {
                "&mut "
            } else {
                "&"
            }.concat(reference_data.inner.to_string_(qualstr)),
            .Pointer as pointer_data => {
                if pointer_data.is_mut {
                    if pointer_data.is_indexable {
                        "[*]mut "
                    } else {
                        "*mut "
                    }
                } else {
                    if pointer_data.is_indexable {
                        "[*]"
                    } else {
                        "*"
                    }
                }.concat(pointer_data.inner.to_string_(qualstr))
            },
            .Anyptr as anyptr_data => {
                if anyptr_data.is_mut {
                    "mut_anyptr"
                } else {
                    "anyptr"
                }
            },
            .Func as func_data => {
                mut sb := Builder.new(150);
                sb.write_string("func(");
                if func_data.is_method {
                    if func_data.self_is_mut {
                        sb.write_string("mut ");
                    } else if func_data.self_is_ref {
                        sb.write_string("&");
                    }
                    sb.write_string("self");
                    if func_data.args.len > 0 {
                        sb.write_string(", ");
                    }
                }
                for i, arg in func_data.args {
                    sb.write_string(arg.type.to_string_(qualstr));
                    if i < func_data.args.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_string(")");
                if func_data.ret_type !is .Void {
                    sb.write_string(" ");
                    sb.write_string(func_data.ret_type.to_string_(qualstr));
                }
                sb.to_string()
            },
            .Basic as basic => if basic.is_unresolved {
                basic.expr.to_string()
            } else if qualstr {
                basic.sym.qualname()
            } else {
                basic.sym.name
            }
        };
    }
}
