// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{ traits, process, strings.Builder };

import ../token;
import ../utils;

#[boxed; default_value(.Void)]
pub enum Type < traits.Stringable {
    Basic {
        mut sym: ?TypeSym;
        mut is_unresolved: bool;
        mut expr: Expr;
        pos: token.Pos;
    },
    Never(token.Pos),
    Void,
    None,
    Option {
        mut inner: Type;
        pos: token.Pos;
    },
    Result {
        mut inner: Type;
        pos: token.Pos;
    },
    Tuple {
        mut inners: []mut Type;
        mut sym: TypeSym;
        pos: token.Pos;

        func ==(&self, other: &Self) -> bool {
            if self.inners.len != other.inners.len {
                return false;
            }
            for i, inner in self.inners {
                if inner != other.inners[i] {
                    return false;
                }
            }
            return true;
        }
    },
    Variadic {
        mut inner: Type;
        is_mut: bool;
        mut sym: TypeSym;
        pos: token.Pos;
    },
    Slice {
        mut inner: Type;
        is_mut: bool;
        mut sym: TypeSym;
        pos: token.Pos;
    },
    DynArray {
        mut inner: Type;
        is_mut: bool;
        mut sym: TypeSym;
        pos: token.Pos;
    },
    Array {
        mut inner: Type;
        is_mut: bool;
        mut size: Expr;
        mut size_value: uint;
        mut sym: TypeSym;
        pos: token.Pos;
    },
    Pointer {
        mut inner: Type;
        is_mut: bool;
        is_indexable: bool;
        pos: token.Pos;
    },
    Rawptr {
        pos: token.Pos;
    },
    Func {
        is_method: bool;
        self_is_mut: bool;
        self_is_ptr: bool;
        mut args: []mut Arg;
        mut ret_type: Type;
        pos: token.Pos;
        mut sym: TypeSym;
        mut has_sym: bool;

        #[inline]
        func symbol(&self) -> Func {
            return if self.has_sym && self.sym.info is .Func(func_sym) {
                func_sym
            } else {
                Func(
                    is_method: self.is_method,
                    self_type: .Void,
                    self_is_mut: self.self_is_mut,
                    self_is_ptr: self.self_is_ptr,
                    args: self.args,
                    ret_type: self.ret_type
                )
            };
        }
    };

    #[inline]
    pub func ptr_or_ref_inner(self) -> Self {
        return match self {
            .Pointer(ptr) -> ptr.inner,
            .Rawptr -> self,
            else -> .Void
        };
    }

    pub func unalias(mut self) -> ?Self {
        // NOTE: `.unalias()` returns an option, so we use the same type without
        // unaliasing instead.
        return match self {
            .Rawptr -> self,
            .Result(mut result) -> .Result(result.inner.unalias() ?? result.inner),
            .Option(mut option) -> .Option(option.inner.unalias() ?? option.inner),
            .Tuple(mut tuple_data) -> {
                mut unaliased_types := []mut Type(cap: tuple_data.inners.len);
                for i, mut tuple_type in tuple_data.inners {
                    unaliased_types[i] = tuple_type.unalias() ?? tuple_type;
                }
                .Tuple(unaliased_types, tuple_data.sym)
            },
            .Slice(mut slice_data) -> .Slice(
                slice_data.inner.unalias() ?? slice_data.inner, slice_data.is_mut
            ),
            .DynArray(mut dyn_array_data) -> .DynArray(
                dyn_array_data.inner.unalias() ?? dyn_array_data.inner, dyn_array_data.is_mut
            ),
            .Array(mut array_data) -> .Array(
                array_data.inner.unalias() ?? array_data.inner, ...self
            ),
            .Pointer(mut pointer_data) -> .Pointer(
                pointer_data.inner.unalias() ?? pointer_data.inner, ...self
            ),
            .Func(mut func_data) -> {
                for mut arg in func_data.args {
                    arg.type = arg.type.unalias() ?? arg.type;
                }
                .Func(
                    ret_type: func_data.ret_type.unalias() ?? func_data.ret_type,
                    ...self
                )
            },
            .Basic(mut basic) if !basic.is_unresolved -> if basic.sym?.info is .Alias(mut alias_info) {
                alias_info.parent.unalias() ?? alias_info.parent
            } else {
                .Basic(basic.sym)
            },
            else -> none // for `.Void`, `.None` or `.Never`
        };
    }

    pub func unalias_in_place(mut self) {
        if unaliased_type := self.unalias() {
            unsafe {
                @set_enum_ref_value(self, unaliased_type);
            }
        }
    }

    #[inline]
    pub func symbol(self) -> ?TypeSym {
        // NOTE: `.Void`, `.None`, `.Never` and `.Rawptr` has no `TypeSym` value.
        return match self {
            .Result(result) -> result.inner.symbol(),
            .Option(option) -> option.inner.symbol(),
            .Tuple(tuple_data) -> tuple_data.sym,
            .Variadic(variadic_data) -> variadic_data.sym,
            .Slice(slice_data) -> slice_data.sym,
            .DynArray(dyn_array_data) -> dyn_array_data.sym,
            .Array(array_data) -> array_data.sym,
            .Pointer(pointer_data) -> pointer_data.inner.symbol(),
            .Func(func_data) -> func_data.sym,
            .Basic(basic) if !basic.is_unresolved -> basic.sym,
            else -> none
        };
    }

    #[inline]
    pub func is_primitive(self) -> bool {
        return if type_sym := self.symbol() {
            type_sym.is_primitive()
        } else {
            false
        };
    }

    #[inline]
    pub func is_boxed(self) -> bool {
        return if type_sym := self.symbol() {
            type_sym.is_boxed()
        } else {
            false
        };
    }

    #[inline]
    pub func is_void(self) -> bool {
        return match self {
            .Void, .Never -> true,
            .Result(result) -> result.inner.is_void(),
            else -> false
        };
    }

    #[inline]
    pub func is_pointer(self) -> bool {
        return self is .Pointer || self is .Rawptr;
    }

    #[inline]
    pub func is_mut_pointer(self) -> bool {
        return match self {
            .Pointer(ptr) -> ptr.is_mut,
            .Rawptr -> true,
            else -> false
        };
    }

    #[inline]
    pub func is_any_kind_of_pointer(self) -> bool {
        return match self {
            .Pointer, .Rawptr, .Func -> true,
            else -> if type_sym := self.symbol() {
                type_sym.is_boxed()
            } else {
                false
            }
        };
    }

    #[inline]
    pub func position(self) -> token.Pos {
        return match self {
            .Void, .None -> token.no_pos,
            .Never(never_pos) -> never_pos,
            .Option(opt_t) -> opt_t.pos,
            .Result(res_t) -> res_t.pos,
            .Tuple(tuple_t) -> tuple_t.pos,
            .Variadic(variadic_t) -> variadic_t.pos,
            .Slice(slice_t) -> slice_t.pos,
            .DynArray(dyn_array_t) -> dyn_array_t.pos,
            .Array(arr_t) -> arr_t.pos,
            .Pointer(ptr_t) -> ptr_t.pos,
            .Rawptr(rawptr_t) -> rawptr_t.pos,
            .Func(func_t) -> func_t.pos,
            .Basic(basic_t) -> if basic_t.is_unresolved {
                basic_t.expr.position()
            } else {
                basic_t.pos
            }
        };
    }

    #[inline]
    pub func ==(self, rhs: Self) -> bool {
        return match self {
            .None if rhs is .None -> true,
            .Void if rhs is .Void -> true,
            .Never if rhs is .Never -> true,
            .Result(result_lhs) if rhs is .Result(result_rhs) ->
                result_lhs.inner == result_rhs.inner,
            .Option(option_lhs) if rhs is .Option(option_rhs) ->
                option_lhs.inner == option_rhs.inner,
            .Tuple(tuple_lhs) if rhs is .Tuple(tuple_rhs) -> tuple_lhs == tuple_rhs,
            .Variadic(variadic_lhs) if rhs is .Variadic(variadic_rhs) ->
                variadic_lhs.inner == variadic_rhs.inner,
            .Slice(slice_lhs) if rhs is .Slice(slice_rhs) ->
                slice_lhs.inner == slice_rhs.inner && slice_lhs.is_mut == slice_rhs.is_mut,
            .DynArray(dyn_array_lhs) if rhs is .DynArray(dyn_array_rhs) ->
                dyn_array_lhs.inner == dyn_array_rhs.inner && dyn_array_lhs.is_mut == dyn_array_rhs.is_mut,
            .Array(array_lhs) if rhs is .Array(array_rhs) ->
                array_lhs.inner == array_rhs.inner && array_lhs.size_value == array_rhs.size_value
                && array_lhs.is_mut == array_rhs.is_mut,
            .Pointer(ptr_lhs) if rhs is .Pointer(ptr_rhs) -> if ptr_lhs.is_mut
                && !ptr_rhs.is_mut {
                false
            } else if ptr_lhs.is_indexable && !ptr_rhs.is_indexable {
                false
            } else {
                ptr_lhs.inner == ptr_rhs.inner
            },
            .Rawptr if rhs is .Rawptr -> true,
            .Func(func_lhs) if rhs is .Func(func_rhs) -> match {
                func_lhs.is_method != func_rhs.is_method,
                func_lhs.self_is_mut != func_rhs.self_is_mut,
                func_lhs.self_is_ptr != func_rhs.self_is_ptr,
                func_lhs.args.len != func_rhs.args.len -> false,
                else -> {
                    mut final_res := func_lhs.ret_type == func_rhs.ret_type;
                    for i, arg_lhs in func_lhs.args {
                        arg_rhs := func_rhs.args[i];
                        if arg_lhs.is_mut != arg_rhs.is_mut {
                            final_res = false;
                            break;
                        }
                        if arg_lhs.type != arg_rhs.type {
                            final_res = false;
                            break;
                        }
                    }
                    final_res
                }
            },
            .Basic(basic_lhs) if rhs is .Basic(basic_rhs) ->
                !(basic_lhs.is_unresolved && basic_rhs.is_unresolved)
                && basic_lhs.sym? == basic_rhs.sym?,
            else -> false
        };
    }

    pub func !=(self, rhs: Self) -> bool {
    	return !(self == rhs);
    }

    pub func to_string(self) -> string {
        return self.to_string_(false);
    }

    pub func to_qualstring(self) -> string {
        return self.to_string_(true);
    }

    pub func to_string_(self, qualstr: bool) -> string {
        return match self {
            .None -> "<none>",
        	.Void -> "<void>",
            .Never -> "never",
            .Result(result) -> if result.inner is .Void {
                "!"
            } else {
                "!".concat(result.inner.to_string_(qualstr))
            },
            .Option(option) -> if option.inner is .Void {
                "?"
            } else {
                "?".concat(option.inner.to_string_(qualstr))
            },
            .Tuple(tuple_data) -> {
                mut sb := Builder.new(100);
                sb.write_byte('(');
                for i, inner in tuple_data.inners {
                    sb.write(inner.to_string_(qualstr));
                    if i < tuple_data.inners.len - 1 {
                        sb.write(", ");
                    }
                }
                sb.write_byte(')');
                sb.to_string()
            },
            .Variadic(variadic_data) -> "...".concat(variadic_data.inner.to_string_(qualstr)),
            .Slice(slice_data) -> if slice_data.is_mut {
                "[:]mut"
            } else {
                "[:]"
            }.concat(slice_data.inner.to_string_(qualstr)),
            .DynArray(dyn_array_data) -> if dyn_array_data.is_mut {
                "[]mut"
            } else {
                "[]"
            }.concat(dyn_array_data.inner.to_string_(qualstr)),
            .Array(array_data) -> "[".concat(
                array_data.size.to_string(), "]", if array_data.is_mut {
                    "mut "
                } else {
                    ""
                }, array_data.inner.to_string_(qualstr)
            ),
            .Pointer(pointer_data) -> {
                if pointer_data.is_mut {
                    if pointer_data.is_indexable {
                        "[&]mut "
                    } else {
                        "&mut "
                    }
                } else {
                    if pointer_data.is_indexable {
                        "[&]"
                    } else {
                        "&"
                    }
                }.concat(pointer_data.inner.to_string_(qualstr))
            },
            .Rawptr -> "rawptr",
            .Func(func_data) -> {
                mut sb := Builder.new(150);
                sb.write("func(");
                if func_data.is_method {
                    if func_data.self_is_mut {
                        sb.write("mut ");
                    } else if func_data.self_is_ptr {
                        sb.write("&");
                    }
                    sb.write("self");
                    if func_data.args.len > 0 {
                        sb.write(", ");
                    }
                }
                for i, arg in func_data.args {
                    sb.write(arg.type.to_string_(qualstr));
                    if i < func_data.args.len - 1 {
                        sb.write(", ");
                    }
                }
                sb.write(")");
                if func_data.ret_type !is .Void {
                    sb.write(" -> ");
                    sb.write(func_data.ret_type.to_string_(qualstr));
                }
                sb.to_string()
            },
            .Basic(basic) -> if type_sym := basic.sym {
                if qualstr {
                    type_sym.qualname()
                } else {
                    type_sym.name
                }
            } else {
                basic.expr.to_string()
            }
        };
    }
}

extend Env {
    #[inline]
    pub func is_number(self, type: Type) -> bool {
        return self.is_int(type) || self.is_float(type);
    }

    #[inline]
    pub func is_int(self, type: Type) -> bool {
        return self.is_signed_int(type) || self.is_unsigned_int(type);
    }

    #[inline]
    pub func is_signed_int(self, type: Type) -> bool {
        return type in [
            self.int8_t, self.int16_t, self.int32_t, self.int64_t, self.int_t,
            self.comptime_int_t
        ];
    }

    #[inline]
    pub func is_unsigned_int(self, type: Type) -> bool {
        return type in [
            self.uint8_t, self.uint16_t, self.uint32_t, self.uint64_t, self.uint_t
        ];
    }

    #[inline]
    pub func is_float(self, type: Type) -> bool {
        return type in [self.float32_t, self.float64_t, self.comptime_float_t];
    }

    #[inline]
    pub func is_comptime_number(self, type: Type) -> bool {
        return type == self.comptime_int_t || type == self.comptime_float_t;
    }

    pub func comptime_number_to_type(self, type: Type) -> Type {
        return if type == self.comptime_int_t {
            self.int_t
        } else if type == self.comptime_float_t {
            self.float64_t
        } else {
            type
        };
    }

    pub func number_bits(self, type: Type) -> uint {
        return if self.is_int(type) {
            self.int_bits(type)
        } else if self.is_float(type) {
            self.float_bits(type)
        } else {
            0
        };
    }

    pub func int_bits(self, type: Type) -> uint {
        type_sym := type.symbol()?;
        return if type_sym.info is .SizedInt(int_info) {
            int_info.size
        } else if type_sym.info is .SizedUint(uint_info) {
            uint_info.size
        } else if type_sym.info is .Int || type_sym.info is .Uint {
            if self.prefs.target_is_64bit { 64 } else { 32 }
        } else {
            75
        };
    }

    pub func float_bits(self, type: Type) -> uint {
        _ = self;
        type_sym := type.symbol()?;
        return if type_sym.info is .Float(float_info) {
            float_info.size
        } else {
            75
        };
    }

    /// Returns the size and alignment (in bytes) of `typ`, similarly to
    /// C's `sizeof(T)` and `_Alignof(T)`.
    pub func type_size(mut self, type: Type, is_raw: bool := false) -> (uint, uint) {
        return match type {
            .Result, .Option -> self.type_symbol_size(self.throwable_sym, is_raw),
            .Rawptr, .Pointer, .Func -> (self.pointer_size, self.pointer_size),
            else -> if mut type_sym := type.symbol() {
                self.type_symbol_size(type_sym, is_raw)
            } else {
                (0, 0)
            }
        };
    }

    pub func type_symbol_size(mut self, mut type_sym: TypeSym, is_raw: bool := false) -> (uint, uint) {
        return if type_sym.size != 0 {
            (type_sym.size, type_sym.align)
        } else {
            (mut size: uint, mut align: uint) := (0, 0);
            (size, align) = if type_sym.is_boxed() && !is_raw {
                (self.pointer_size, self.pointer_size)
            } else {
                match type_sym.info {
                    .Func -> (self.pointer_size, self.pointer_size),
                    .Alias(alias_info) -> self.type_size(alias_info.parent),
                    .Bool -> (1, 1),
                    .Uint, .Int -> (self.pointer_size, self.pointer_size),
                    .SizedInt(int) -> match int.size {
                        8 -> (1, 1),
                        16 -> (2, 2),
                        32 -> (4, 4),
                        64 -> (8, 8),
                        else -> (0, 0)
                    },
                    .SizedUint(uint) -> match uint.size {
                        8 -> (1, 1),
                        16 -> (2, 2),
                        32 -> (4, 4),
                        64 -> (8, 8),
                        else -> (0, 0)
                    },
                    .Float(float) -> match float.size {
                        32 -> (4, 4),
                        64 -> (8, 8),
                        else -> (0, 0)
                    },
                    .Rune -> (4, 4),
                    .ComptimeFloat, .ComptimeInt -> (8, 8),
                    .Enum(enum_info) -> if enum_info.is_tagged {
                        if enum_info.is_boxed {
                            ((type_sym.fields.len + 2) * self.pointer_size, self.pointer_size)
                        } else {
                            mut total_size := self.pointer_size;
                            mut max_alignment := self.pointer_size;
                            for variant in enum_info.variants {
                                if variant.has_type {
                                    (variant_size, alignment) := self.type_size(variant.type);
                                    if alignment > max_alignment {
                                        max_alignment = alignment;
                                    }
                                    total_size = utils.round_up(total_size, alignment) + variant_size;
                                }
                            }
                            (utils.round_up(total_size, max_alignment), max_alignment)
                        }
                    } else {
                        self.type_size(enum_info.underlying_type)
                    },
                    .Slice -> (self.pointer_size * 3, self.pointer_size),
                    .DynArray -> self.type_symbol_size(self.dyn_array_sym, is_raw),
                    .Array(array_info) -> {
                        (elem_size, elem_align) := self.type_size(array_info.elem_type);
                        (array_info.size * elem_size, elem_align)
                    },
                    .Struct, .Tuple -> {
                        mut total_size: uint := 0;
                        mut max_alignment: uint := 0;
                        types := if type_sym.info is .Tuple(tuple_lit) {
                            tuple_lit.types
                        } else {
                            mut tmp := []Type();
                            for field in type_sym.full_fields() {
                                tmp.push(field.type);
                            }
                            tmp
                        };
                        for ftype in types {
                            (field_size, alignment) := self.type_size(ftype);
                            if alignment > max_alignment {
                                max_alignment = alignment;
                            }
                            total_size = utils.round_up(total_size, alignment) + field_size;
                        }
                        (utils.round_up(total_size, max_alignment), max_alignment)
                    },
                    .Trait(mut trait_info) -> {
                        (size, align) = ((type_sym.fields.len + 2) * self.pointer_size, self.pointer_size);
                        for mut btype in trait_info.bases {
                            (bsize, _balign) := self.type_symbol_size(btype, is_raw);
                            size += bsize - 2 * self.pointer_size;
                        }
                        (size, align)
                    },
                    else -> process.panic(
                        "Env.type_size: unsupported type `{}`", type_sym.qualname()
                    )
                }
            };
            type_sym.size = size;
            type_sym.align = align;
            (size, align)
        };
    }
}
