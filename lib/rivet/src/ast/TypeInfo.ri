// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;

pub enum TypeInfo < traits.Stringable {
    Invalid,
    Placeholder,
    None,
    Bool,
    Rune,
    ComptimeInt,
    ComptimeFloat,
    Int,
    SizedInt {
        size: uint;
    },
    Uint,
    SizedUint {
        size: uint;
    },
    Float {
        size: uint;
    },
    String,
    Func(Func),
    Alias {
        mut parent: Type;
    },
    Array {
        elem_type: Type;
        size: uint;
        is_mut: bool;
        has_contains_method: bool;
    },
    DynArray {
        elem_type: Type;
        is_mut: bool;
        has_contains_method: bool;
    },
    Tuple {
        types: []Type;
    },
    Trait {
        mut bases: []mut TypeSym;
        mut implements: []TypeSym;
        mut has_objects: bool;

        func index_of(self, type_sym: TypeSym) -> ?uint {
            for i, ts in self.implements {
                if ts.id == type_sym.id {
                    return i;
                }
            }
            return none;
        }

        func implement(mut self, type_sym: TypeSym) {
            if type_sym !in self.implements {
                self.implements.push(type_sym);
                for b in self.bases {
                    @as(TypeInfo.Trait, b.info).implement(type_sym);
                }
            }
        }

        #[inline]
        func mark_has_objects(mut self) {
            self.has_objects = true;
        }
    },
    Enum {
        underlying_type: Type;
        mut variants: []EnumVariant;
        is_tagged: bool;
        mut traits: []mut TypeSym;

        #[inline]
        func add_variant(mut self, variant: EnumVariant) {
            self.variants.push(variant);
        }

        func has_variant(self, name: string) -> bool {
            return self.get_variant(name) !is none;
        }

        func get_variant(self, name: string) -> ?EnumVariant {
            for v in self.variants {
                if v.name == name {
                    return v;
                }
            }
            return none;
        }

        func get_variant_by_type(self, type: Type) -> ?EnumVariant {
            for v in self.variants {
                if v.has_type and v.type == type {
                    return v;
                }
            }
            return none;
        }

        func contains_trait(self, type_sym: TypeSym) -> bool {
            for trait_ in self.traits {
                if trait_.id == type_sym.id {
                    return true;
                }
            }
            return false;
        }
    },
    Struct {
        is_boxed: bool;
        is_opaque: bool;
        is_enum_variant: bool;
        mut parent: TypeSym; // enum type symbol if this is a enum variant
        mut bases: []mut TypeSym;
        mut traits: []mut TypeSym;

        func contains_trait(self, type_sym: TypeSym) -> bool {
            for trait_ in self.traits {
                if trait_.id == type_sym.id {
                    return true;
                }
            }
            return false;
        }
    };

    #[inline]
    pub func elem_type(self) -> ?Type {
        return match self is {
            .Array(arr) -> arr.elem_type,
            .DynArray(vec) -> vec.elem_type,
            else -> none
        };
    }

    #[inline]
    pub func is_mut_arr_or_dyn_array(self) -> bool {
        return match self is {
            .Array(arr) -> arr.is_mut,
            .DynArray(vec) -> vec.is_mut,
            else -> false
        };
    }

    #[inline]
    pub func is_primitive(self) -> bool {
        return self is .Bool or self is .Rune or self is .SizedInt or self is .SizedUint
            or self is .Uint or self is .Int or self is .ComptimeInt
            or self is .ComptimeFloat or self is .ComptimeFloat or self is .Float;
    }

    #[inline]
    pub func is_compound(self) -> bool {
        return self is .Struct or self is .Trait or self is .Enum or self is .Tuple;
    }

    #[inline]
    pub func to_string(self) -> string {
        return match self is {
            .Invalid -> "invalid",
            .Placeholder -> "placeholder",
            .None -> "none",
            .Bool -> "bool",
            .Rune -> "rune",
            .Int -> "int",
            .SizedInt(int_info) -> "int{}".fmt(int_info.size),
            .Uint -> "uint",
            .SizedUint(uint_info) -> "uint{}".fmt(uint_info.size),
            .ComptimeInt -> "comptime_int",
            .ComptimeFloat -> "comptime_float",
            .Float(float_info) -> "float{}".fmt(float_info.size),
            .String -> "string",
            .Func -> "func",
            .Alias -> "alias",
            .Array -> "array",
            .DynArray -> "dynamic array",
            .Tuple -> "tuple",
            .Trait -> "trait",
            .Struct(struct_info) -> if struct_info.is_enum_variant {
                "enum variant"
            } else {
                "struct"
            },
            .Enum -> "enum"
        };
    }
}

#[boxed]
pub struct EnumVariant {
    pub name: string;
    pub value: int;
    pub has_type: bool;
    pub mut type: Type;
    pub has_fields: bool;
}