// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/sys;

import ../token;
import ../report;

pub struct ComptimeIf {
    mut branches: []mut ComptimeIfBranch;
    mut branch_idx: ?uint;
    has_else: bool;
    pos: token.Pos;
    mut type: Type;

    pub func nodes(self) -> ?[]Node {
        if branch_idx := self.branch_idx {
            return self.branches[branch_idx].nodes;
        }
        return none;
    }
}

pub struct ComptimeIfBranch {
    pub mut cond: Expr;
    pub is_else: bool;
    pub is_else_if: bool;
    pub mut nodes: []mut Node;
    pub pos: token.Pos;
    pub mut type: Type;
}

extend Env {
    pub func evalue_comptime_if(self, mut comptime_if: ComptimeIf) -> []mut Node {
        for i, branch in comptime_if.branches {
            if branch.is_else && comptime_if.branch_idx == none {
                comptime_if.branch_idx = i;
            } else if cond := self.evalue_comptime_condition(branch.cond); cond {
                comptime_if.branch_idx = i;
            }
            if branch_idx := comptime_if.branch_idx {
                return comptime_if.branches[branch_idx].nodes;
            }
        }
        return +[];
    }

    func evalue_comptime_condition(self, cond: Expr) -> ?bool {
        return match cond {
            .Paren(paren) -> self.evalue_comptime_condition(paren.expr),
            .Ident(ident) -> self.evalue_comptime_ident(ident.name, ident.pos),
            .Unary(unary) if unary.op == .Bang -> if val := self.evalue_comptime_condition(
                unary.right
            ) {
                !val
            } else {
                none
            },
            .Binary(binary) if binary.op in [.LogicalAnd, .LogicalOr] -> {
                if left := self.evalue_comptime_condition(binary.left) {
                    if binary.op == .LogicalOr && left {
                        left
                    } else if right := self.evalue_comptime_condition(binary.right) {
                        if binary.op == .LogicalAnd {
                            left && right
                        } else {
                            right
                        }
                    } else {
                        none
                    }
                } else {
                    none
                }
            },
            else -> {
                report.error("invalid comptime condition", cond.position());
                none
            }
        };
    }

    func evalue_comptime_ident(self, name: string, pos: token.Pos) -> bool {
        match name {
            // operating systems
            "_LINUX_", "_WINDOWS_" -> {
                return if os := sys.OS.from_string(name) {
                    os == self.prefs.target_os
                } else {
                    false
                };
            },
            // architectures
            "_X86_", "_AMD64_" -> {
                return if os := sys.Arch.from_string(name) {
                    os == self.prefs.target_arch
                } else {
                    false
                };
            },
            // bits
            "_x32_", "_x64_" -> {
                return if name == "_x32_" {
                    !self.prefs.target_is_64bit
                } else {
                    self.prefs.target_is_64bit
                };
            },
            // endian
            "_LITTLE_ENDIAN_", "_BIG_ENDIAN_" -> {
                return if name == "_LITTLE_ENDIAN_" {
                    self.prefs.target_is_little_endian
                } else {
                    !self.prefs.target_is_little_endian
                };
            },
            // optimize modes
            "_DEBUG_", "_RELEASE_" -> {
                return if name == "_DEBUG_" {
                    self.prefs.optimize_mode == .Debug
                } else {
                    self.prefs.optimize_mode == .Release
                };
            },
            "_TESTS_" -> return self.prefs.is_test,
            else -> return if name.starts_with("_") && name.ends_with("_") {
                report.error("unknown builtin flag: `{}`".fmt(name), pos);
                false
            } else {
                name in self.prefs.flags
            }
        }
    }
}
