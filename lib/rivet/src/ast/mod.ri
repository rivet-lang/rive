// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../token;

pub struct Comment {
    pub mut is_doc: bool;
    pub mut text: string;
    pub pos: token.Pos;

    #[inline]
    pub func is_multiline(self) -> bool {
        return self.text.contains("\n");
    }

    #[inline]
    pub func is_empty(self) -> bool {
        return self.text.is_empty();
    }
}

// Used in variable declarations/statements and guard expressions.
#[boxed]
pub struct ObjectData {
    pub name: string;
    pub is_mut: bool;
    pub is_ref: bool;
    pub has_type: bool;
    pub mut type: Type;
    pub level: VarLevel;
    pub pos: token.Pos;
    pub mut sym: Var;
    pub is_extern: bool;
    pub is_global: bool;
}

pub func universe() -> Module {
    return Module(
        name: "universe",
        scope: Scope(syms: +[
            TypeSym(name: "bool", info: .Bool),
            TypeSym(name: "rune", info: .Rune),
            TypeSym(name: "int8", info: .SizedInt(8)),
            TypeSym(name: "int16", info: .SizedInt(16)),
            TypeSym(name: "int32", info: .SizedInt(32)),
            TypeSym(name: "int64", info: .SizedInt(64)),
            TypeSym(name: "int", info: .Int),
            TypeSym(name: "uint8", info: .SizedUint(8)),
            TypeSym(name: "uint16", info: .SizedUint(16)),
            TypeSym(name: "uint32", info: .SizedUint(32)),
            TypeSym(name: "uint64", info: .SizedUint(64)),
            TypeSym(name: "uint", info: .Uint),
            TypeSym(name: "comptime_int", info: .ComptimeInt),
            TypeSym(name: "comptime_float", info: .ComptimeFloat),
            TypeSym(name: "float32", info: .Float(32)),
            TypeSym(name: "float64", info: .Float(64)),
            TypeSym(name: "string", info: .Struct())
        ])
    );
}
