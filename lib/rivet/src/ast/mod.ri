// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../token;

public enum Node {
    Decl: Decl,
    Stmt: Stmt,
    Expr: Expr
}

@[boxed]
public struct SourceFile {
    public file: string;
    public decls: []Decl;
    public mut mod: Module;
    public mut imported_symbols: ImportedSymbols;
}

@[boxed]
public struct ImportedSymbol {
    public name: string;
    public sym: Sym;
    public pos: token.Pos;
    public mut is_used: bool;
}

public struct ImportedSymbols {
    public mut syms: []ImportedSymbol;

    @[inline]
    public func add(mut self, name: string, sym: Sym, pos: token.Pos, is_used: bool = false) {
        self.syms.push(ImportedSymbol(name, sym, pos, is_used));
    }

    public func find(&self, name: string) ?ImportedSymbol {
        for imported_sym in self.syms {
            if name == imported_sym.name {
                return imported_sym;
            }
        }
        return none;
    }

    @[inline]
    public func exists(&self, name: string) bool {
        return self.find(name) !is none;
    }
}

// Used in variable declarations/statements and guard expressions.
@[boxed]
public struct ObjectData {
    public name: string;
    public is_mut: bool;
    public is_ref: bool;
    public has_type: bool;
    public mut type: Type;
    public level: VarLevel;
    public pos: token.Pos;
    public mut sym: Var;
    public is_extern: bool;
    public is_global: bool;
}
