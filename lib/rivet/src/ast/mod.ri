// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../token;

pub enum Node {
    Decl(Decl),
    Stmt(Stmt),
    Expr(Expr);

    pub func position(self) -> token.Pos {
        return match self is {
            .Decl(decl) -> decl.position(),
            .Stmt(stmt) -> stmt.position(),
            .Expr(expr) -> expr.position()
        };
    }
}

#[boxed]
pub struct Comment {
    pub mut is_doc: bool;
    pub mut text: string;
    pub pos: token.Pos;

    #[inline]
    pub func is_multiline(self) -> bool {
        return self.text.contains("\n");
    }

    #[inline]
    pub func is_empty(self) -> bool {
        return self.text.is_empty();
    }
}

#[boxed]
pub struct ImportedSymbol {
    pub name: string;
    pub sym: Sym;
    pub pos: token.Pos;
    pub mut is_used: bool;
}

pub struct ImportedSymbols {
    pub mut syms: []ImportedSymbol;

    #[inline]
    pub func add(mut self, name: string, sym: Sym, pos: token.Pos, is_used: bool := false) {
        self.syms.push(ImportedSymbol(name, sym, pos, is_used));
    }

    pub func find(&self, name: string) -> ?ImportedSymbol {
        for imported_sym in self.syms {
            if name == imported_sym.name {
                return imported_sym;
            }
        }
        return none;
    }

    #[inline]
    pub func exists(&self, name: string) -> bool {
        return self.find(name) !is none;
    }
}

// Used in variable declarations/statements and guard expressions.
#[boxed]
pub struct ObjectData {
    pub name: string;
    pub is_mut: bool;
    pub is_ref: bool;
    pub has_type: bool;
    pub mut type: Type;
    pub level: VarLevel;
    pub pos: token.Pos;
    pub mut sym: Var;
    pub is_extern: bool;
    pub is_global: bool;
}