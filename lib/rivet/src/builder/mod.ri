// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{
    traits, console, process, fs.{ Path, Directory }
};

import ../{
    ast, utils, prefs, token, parser, report, checker, codegen, resolver, depgraph
};

pub struct Builder {
    mut env: +mut ast.Env;

    mut resolver: +mut resolver.Resolver;
    mut checker: +mut checker.Checker;
    mut codegen: +mut codegen.Codegen;

    pub func new(prefs_: +mut prefs.Prefs) -> Self {
        env := ast.Env.new(prefs_);
        return Self(
            env: env,
            resolver: +mut resolver.Resolver(env),
            checker: +mut checker.Checker(env),
            codegen: +mut codegen.Codegen(env)
        );
    }

    pub func run(&mut self) -> ! {
        self.make_rivet_directory()!;

        // if we are compiling the `core` module, avoid autoloading it
        if self.env.prefs.mod_name != "core" {
            _ = self.load_module("core", "core", "", token.no_pos)!;
        }

        self.load_root_module()!;
        self.import_modules()!;

        if !self.env.prefs.check_syntax {
            self.vlog("resolving files...");
            self.resolver.resolve_files(self.env.source_files);
            if report.total_errors() > 0 {
                self.abort();
            }

            self.vlog("checking files...");
            self.checker.check_files(self.env.source_files);
            if report.total_errors() > 0 {
                self.abort();
            }

            if !self.env.prefs.check {
                self.vlog("generating MIR from AST...");
                self.codegen.generate_mirs(self.env.source_files);
                if report.total_errors() > 0 {
                    self.abort();
                }
            }
        }

        total_warns := report.total_warns();
        if total_warns > 0 {
            utils.warn(
                "module `{}` generated {} {}", self.env.prefs.mod_name, total_warns,
                if total_warns == 1 {
                    "warning"
                } else {
                    "warnings"
                }
            );
        }
    }

    func make_rivet_directory(&self) -> ! {
        if !Path.exists(prefs.rivet_dir) {
            self.vlog("making Rivet directory");
            if !Path.exists(prefs.obj_dir) {
                self.vlog("making Rivet object directory");
                Directory.make(prefs.obj_dir)!;
            }
            if !Path.exists(prefs.lib_dir) {
                self.vlog("making Rivet library directory");
                Directory.make(prefs.lib_dir)!;
            }
        }
    }

    func parse_files(&mut self, mod_sym: +mut ast.Module, files: []string) {
        parser_ := +mut parser.Parser(env: self.env);
        for sf in parser_.parse_module(mod_sym, files) {
            self.env.source_files.push(sf);
        }
        if report.total_errors() > 0 {
            self.abort();
        }
    }

    func load_root_module(&mut self) -> ! {
        files := if Path.is_directory(self.env.prefs.input) {
            mut filtered_files := self.env.filter_files(
                Directory.walk(self.env.prefs.input, ".ri")!
            );
            src_dir := Path.join(self.env.prefs.input, "src")!;
            if Path.is_directory(src_dir) { // support `src/` directory
                for file in self.env.filter_files(Directory.walk(src_dir, ".ri")!) {
                    filtered_files.push(file);
                }
            }
            // if the `test` command was used and a `tests` directory exists, try to
            // load files from that directory as well
            if self.env.prefs.is_test {
                tests_dir := Path.join(self.env.prefs.input, "tests")!;
                if Path.is_directory(tests_dir) {
                    for file in self.env.filter_files(Directory.walk(tests_dir, ".ri")!) {
                        filtered_files.push(file);
                    }
                }
            }
            filtered_files
        } else {
            +[self.env.prefs.input]
        };
        if files.is_empty() {
            utils.error("no input received");
        } else if self.env.prefs.is_verbose {
            self.vlog("Builder.load_root_module: loaded root module files:");
            for file in files {
                self.vlog("   > {}", file);
            }
        }
        root_sym := +mut ast.Module(name: self.env.prefs.mod_name, is_root: true);
        self.env.universe.scope.add(root_sym) catch |err| utils.error(
            "Builder.load_root_module: {}", err
        );
        self.parse_files(root_sym, files);
    }

    func import_modules(&mut self) -> ! {
        for sf in self.env.source_files {
            self.import_modules_from_decls(sf, sf.decls)!;
        }
        self.vlog("loaded modules...");
        self.resolve_deps();
        if report.total_errors() > 0 {
            self.abort();
        }
    }

    func import_modules_from_decls(
        mut self, sf: +mut ast.SourceFile, decls: []+mut ast.Decl
    ) -> ! {
        for decl in decls {
            if decl is .Import(&mut import_decl) {
                self.import_module(sf, import_decl)!;
            } else if decl is .ComptimeIf(comptime_if) {
                mut ct_decls := ast.nodes_to_decls(
                    self.env.evalue_comptime_if(comptime_if)
                );
                self.import_modules_from_decls(sf, ct_decls)!;
            }
        }
    }

    func import_module(&mut self, sf: +mut ast.SourceFile, import_decl: &mut ast.ImportDecl) -> ! {
        if !import_decl.subimports.is_empty() {
            for &mut subimport in import_decl.subimports {
                self.import_module(sf, subimport)!;
            }
            return;
        }
        if self.env.universe.scope.exists(import_decl.info.full_name) {
            return;
        }
        import_decl.info = self.load_module(
            import_decl.path, import_decl.alias_name, sf.path,
            import_decl.path_pos
        )!;
        import_decl.alias_name = import_decl.info.alias_name;
    }

    func load_module(
        mut self, path: string, alias_name: string, file_path: string, pos: token.Pos
    ) -> !ast.ImportedMod {
        mod := self.load_module_files(alias_name, path, file_path)!;
        if mod.found {
             if mod.files.is_empty() {
                self.vlog("        > module contains no rivet files", path);
                report.error("module `{}` contains no rivet files".fmt(path), pos);
            } else {
                self.vlog("    module `{}` loaded", path);
                mod.mod = if mod_mod_ := self.env.universe.scope.find(mod.full_name) {
                    @as(+mut ast.Module, mod_mod_)
                } else {
                    mod_sym := +mut ast.Module(name: mod.full_name);
                    self.env.universe.scope.add(mod_sym) catch |err| {
                        report.error(err.to_string(), pos)
                    };
                    self.parse_files(mod_sym, mod.files);
                    mod_sym
                };
            }
        } else {
            self.vlog("        > module not found", path);
            report.error("module `{}` not found".fmt(path), pos);
        }
        return mod;
    }

    func load_module_files(&self, alias_name: string, path: string, file_path: string) -> !ast.ImportedMod {
        self.vlog("Builder.load_module_files: searching module `{}`", path);
        mut found := false;
        mut name := "";
        mut full_name := "";
        mut abspath := "";
        mut files := []string();
        is_super := path.starts_with("../");
        if path.starts_with("./") || is_super {
            self.vlog("    searching module in local path");
            path2 := path.substr(if is_super { 3 } else { 2 });
            name = if last_idx := path2.last_index_of_byte('/') {
                path2.substr(last_idx + 1)
            } else {
                path2
            };
            dir_name := Path.resolve(Path.dir_name(file_path) ?? file_path)!;
            old_wd := process.get_cwd()!;
            process.set_cwd(dir_name)!;
            if Path.is_directory(path) {
                found = true;
                abspath = Path.resolve(path)!;
                mut mod_basedir := Path.dir_name(abspath) ?? abspath;
                if mod_basedir.ends_with("/src") {
                    mod_basedir = mod_basedir.substr(end: mod_basedir.len - 4); // skip `/src`
                } else if mod_basedir.contains("/src") {
                    first_part := mod_basedir.substr(end: mod_basedir.last_index_of_byte('/') ?? 0);
                    mod_basedir = mod_basedir.substr(end: first_part.last_index_of_byte('/') ?? 0);
                }
                names := abspath.substr((mod_basedir.last_index_of_byte('/') ?? 0) + 1).split(
                    "/"
                );
                full_name = if "src" in names {
                    src_idx := utils.index_of(names[:], "src");
                    utils.join(names[:src_idx], ".").concat(
                        ".", utils.join(names[src_idx + 1:], ".")
                    )
                } else {
                    utils.join(names[:], ".")
                };
            }
            if found {
                self.vlog("      > found");
                files = self.env.filter_files(Directory.walk(path, ".ri")!);
            }
            process.set_cwd(old_wd)!;
        } else {
            self.vlog("    searching module in global path");
            name = if last_idx := path.last_index_of_byte('/') {
                path.substr(last_idx + 1)
            } else {
                path
            };
            full_name = path.replace("/", ".");
            for l in self.env.prefs.library_path {
                self.vlog("        searching module in `{}`", l);
                mod_path := Path.resolve(Path.join(l, path)!)!;
                if Path.is_directory(mod_path) {
                    found = true;
                    files = self.env.filter_files(Directory.walk(mod_path, ".ri")!);
                }
                // support `src/` directory
                src_dir := if path.contains("/") {
                    slash_idx := (path.index_of_byte('/') ?? 0) + 1;
                    Path.join(l, path.substr(end: slash_idx), "src", path.substr(slash_idx))!
                } else {
                    Path.join(mod_path, "src")!
                };
                if Path.is_directory(src_dir) {
                    if !found {
                        found = true;
                    }
                    files = self.env.filter_files(Directory.walk(src_dir, ".ri")!);
                }
                if found {
                    self.vlog("        > found");
                    break;
                }
            }
        }
        return ast.ImportedMod(
            found: found,
            name: name,
            alias_name: if alias_name.is_empty() { name } else { alias_name },
            full_name: full_name,
            files: files
        );
    }

    func resolve_deps(&mut self) {
        g := self.import_graph();
        g_resolved := g.resolve();
        self.vlog(
            "-----= resolved dependencies graph =-----\n".concat(g_resolved.display())
        );
        self.vlog("-----------------------------------------");
        cycles := g_resolved.display_cycles();
        if cycles.len > 1 {
            utils.error("import cycle detected between the following modules:\n{}", cycles);
        }
        self.vlog("----------= imported modules =-----------");
        for node in g_resolved.nodes {
            self.vlog("> {}", node.name);
        }
        self.vlog("-----------------------------------------");
        source_files := self.env.source_files;
        self.env.source_files = []+mut ast.SourceFile(cap: source_files.len);
        for node in g_resolved.nodes {
            for pf in source_files {
                if pf.mod.name == node.name {
                    self.env.source_files.push(pf);
                }
            }
        }
        self.vlog("module dependencies resolved...");
    }

    func import_graph(&mut self) -> +depgraph.DepGraph {
        g := depgraph.DepGraph.new();
        for pf in self.env.source_files {
            mut deps := []string();
            if pf.mod.name !in ["c.ctypes", "c.libc", "c", "core", "core.mem"] {
                deps.push("core");
            }
            self.import_graph_decls(pf, deps, pf.decls);
            g.add(pf.mod.name, deps);
        }
        return g;
    }

    func import_graph_decls(&mut self, pf: +mut ast.SourceFile, mut deps: []string, decls: []+mut ast.Decl) {
        for d in decls {
            if d is .Import(import_decl) {
                if import_decl.subimports.len > 0 {
                    for subimport in import_decl.subimports {
                        if dep := import_graph_mod(&subimport, pf) {
                            deps.push(dep);
                        }
                    }
                } else if dep := import_graph_mod(&import_decl, pf) {
                    deps.push(dep);
                }
            } else if d is .ComptimeIf(comptime_if) {
                ct_decls := ast.nodes_to_decls(self.env.evalue_comptime_if(comptime_if));
                self.import_graph_decls(pf, deps, ct_decls);
            }
        }
    }

    func import_graph_mod(import_decl: &ast.ImportDecl, pf: +mut ast.SourceFile) -> ?string {
        if !import_decl.info.found {
            return none; // module not found
        }
        if import_decl.info.full_name == pf.mod.name {
            report.error("import cycle detected", import_decl.pos);
            return none;
        }
        return import_decl.info.full_name;
    }

    func vlog(&self, msg: string, args: ...traits.Stringable) {
        if self.env.prefs.is_verbose {
            console.writeln(utils.bold(utils.green("[rivet-log] ")).concat(msg), args);
        }
    }

    func abort(&self) {
        mut msg := if report.total_errors() == 1 {
            "could not compile module `{}`, aborting due to previous error".fmt(self.env.prefs.mod_name)
        } else {
            "could not compile module `{}`, aborting due to {} previous errors".fmt(
                self.env.prefs.mod_name, report.total_errors()
            )
        };
        total_warns := report.total_warns();
        if total_warns > 0 {
            msg = msg.concat("; {} {} emitted").fmt(total_warns, if total_warns == 1 {
                "warning"
            } else {
                "warnings"
            });
        }
        utils.error(msg);
    }
}
