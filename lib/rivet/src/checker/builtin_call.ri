// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../ast;
import ../report;

extend Checker {
    func check_builtin_call(mut self, mut builtin_call: ast.Expr.BuiltinCall) -> ast.Type {
        builtin_call.type = if builtin_call.builtin is .Func(b_func) {
            if b_func.is_unsafe && !self.inside_unsafe() {
                report.warn(
                    "builtin function `{}` should be called inside `unsafe` block".fmt(
                        b_func.name
                    ), builtin_call.pos
                );
            }
            b_func_args_len := b_func.args_len();
            if builtin_call.args.len != b_func_args_len {
                expr_msg := "expected {} argument(s), found {}".fmt(
                    b_func_args_len, builtin_call.args.len
                );
                if builtin_call.args.len < b_func_args_len {
                    mut err := report.error_builder(
                        "too few arguments to builtin function `{}`".fmt(builtin_call.name),
                        builtin_call.pos
                    );
                    err.add_note(expr_msg);
                    err.emit();
                } else if builtin_call.args.len > b_func.args.len {
                    mut err := report.error_builder(
                        "too many arguments to builtin function `{}`".fmt(builtin_call.name),
                        builtin_call.pos
                    );
                    err.add_note(expr_msg);
                    err.emit();
                }
            } else {
                for i, arg in builtin_call.args {
                    arg_info := b_func.args[i];
                    arg.type = self.check_expr(arg.expr);
                    if arg_info.is_mut {
                        self.check_expr_is_mut(arg.expr);
                    }
                    if !arg_info.is_any {
                        self.check_types(arg.type, arg_info.type) catch |err| {
                            mut err2 := report.error_builder(err.to_string(), arg.pos);
                            err2.add_note(
                                "in argument `{}` of builtin function `{}`", arg_info.name,
                                b_func.name
                            );
                            err2.emit();
                        };
                    }
                }
            }
            mut return_type := b_func.type;
            for check in b_func.checks {
                match check {
                    .ArgumentTypeEqualToArgumentType(at) -> {
                        arg1 := builtin_call.args[at.arg1_idx];
                        arg2 := builtin_call.args[at.arg2_idx];
                        if arg2.type != arg1.type {
                            mut err2 := report.error_builder(
                                "expected type `{}`, found `{}`".fmt(arg2.type, arg1.type),
                                arg1.pos
                            );
                            err2.add_note(
                                "in argument `{}` of builtin function `{}`", arg2.name,
                                b_func.name
                            );
                            err2.emit();
                        }
                    },
                    .ArgumentTypeShouldBe(ats) -> {
                        arg := builtin_call.args[ats.arg_idx];
                        match ats.type {
                            .Enum -> if ts := arg.type.symbol(); ts.info !is .Enum {
                                report.error(
                                    "expected `enum` type, found `{}`".fmt(ts.info),
                                    arg.pos
                                );
                            },
                            .Pointer if !arg.type.is_pointer() -> report.error(
                                "expected pointer type, found {}".fmt(arg.type), arg.pos
                            ),
                            .Integer if !self.table.is_number(arg.type) -> report.error(
                                "expected integer type, found {}".fmt(arg.type), arg.pos
                            ),
                            else -> {}
                        }
                    },
                    .ReturnTypeEqualToArgumentType(arg_idx) ->
                        return_type = builtin_call.args[arg_idx].type
                }
            }
            match b_func.name {
                "as" -> self.check_builtin_as(builtin_call),
                else -> {}
            }
            return_type
        } else {
            .Void
        };
        return builtin_call.type;
    }

    func check_builtin_as(mut self, builtin_call: ast.Expr.BuiltinCall) {
        to_type := builtin_call.args[0].type;
        from_type := builtin_call.args[1].type;
        if to_type == from_type {
            report.warn(
                "attempt to cast an expression that is already of type `{}`".fmt(to_type),
                builtin_call.pos
            );
        } else if (from_type is .Pointer && to_type is .Rawptr)
            || (from_type is .Rawptr && to_type is .Pointer)
            || (from_type is .Pointer && to_type is .Pointer)
            || (from_type is .Pointer && self.table.is_int(to_type)) {
            if !self.inside_unsafe() {
                report.error(
                    "cast type `{}` to `{}` is unsafe and requires `unsafe` block".fmt(
                        from_type, to_type
                    ), builtin_call.pos
                );
            }
        } else if from_ts := from_type.symbol() {
            match from_ts.info {
                .Trait(mut trait_info) -> if to_ts := to_type.symbol() {
                    if to_ts in trait_info.implements {
                        trait_info.mark_has_objects();
                        return;
                    }
                },
                .Enum(enum_info) -> {
                    if enum_info.is_tagged && enum_info.get_variant_by_type(to_type) == none {
                        report.error(
                            "cannot cast type `{}` to `{}`".fmt(from_type, to_type),
                            builtin_call.pos
                        );
                    }
                },
                else -> if ((self.table.is_float(from_type) && self.table.is_int(to_type))
                    || (self.table.is_int(from_type) && self.table.is_float(to_type))
                    // ===============================================================
                    || (self.table.is_int(from_type) && self.table.is_int(to_type))
                    || (self.table.is_float(from_type) && self.table.is_float(to_type))
                    // ===============================================================
                    || (from_type == self.table.rune_t && to_type == self.table.uint32_t)
                    || (from_type == self.table.rune_t && to_type == self.table.int32_t)
                    || (from_type == self.table.uint32_t && to_type == self.table.rune_t
                        && self.inside_unsafe())) {
                    return; // TODO: advanced check
                } else if to_ts := to_type.symbol() {
                    mod_sym := self.sym.module()?;
                    if mod_sym.is_core() {
                        if (from_ts == self.table.dyn_array_sym && to_ts.info is .DynArray)
                            || (to_ts == self.table.dyn_array_sym && from_ts.info is .DynArray) {
                            return; // Valid inside `core` module
                        }
                    }
                    match to_ts.info {
                        .Enum(enum_info2) if !enum_info2.is_tagged -> {
                            if self.table.is_int(to_type) && !self.inside_unsafe() {
                                report.warn(
                                    "casting numbers to enums should be done inside `unsafe` blocks",
                                    builtin_call.pos
                                );
                            }
                        },
                        else -> report.error(
                            "cannot cast type `{}` to `{}`".fmt(from_type, to_type),
                            builtin_call.pos
                        )
                    }
                } else {
                    report.error(
                        "cannot cast type `{}` to `{}`".fmt(from_type, to_type),
                        builtin_call.pos
                    );
                }
            }
        } else {
            report.error(
                "cannot cast type `{}` to `{}`".fmt(from_type, to_type), builtin_call.pos
            );
        }
    }
}
