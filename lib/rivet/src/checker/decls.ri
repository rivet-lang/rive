// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ ast, report };

extend Checker {
    func check_global_vars(+mut self, decls: []+mut ast.Decl) {
        for decl in decls {
            old_sym := self.sym;
            if decl is .Const || decl is .Var {
                self.check_decl(decl);
            } else if decl_decls := decl.decls() {
                self.check_global_vars(decl_decls);
            }
            self.sym = old_sym;
        }
    }

    func check_decls(+mut self, decls: []+mut ast.Decl) {
        for decl in decls {
            if !(decl is .Const || decl is .Var) {
                self.check_decl(decl);
            }
        }
    }

    func check_decl(+mut self, decl: +mut ast.Decl) {
        old_sym := self.sym;
        defer self.sym = old_sym;
        match decl.+ {
            .ComptimeIf(&mut comptime_if) -> {
                decls := ast.nodes_to_decls(
                    self.env.evalue_comptime_if(comptime_if)
                );
                self.check_decls(decls);
            },
            .Import(&import_decl) -> if import_decl.import_list.is_empty() && !import_decl.glob {
                if import_decl.has_custom_alias {
                    self.check_name_case(
                        .Snake, "import alias", import_decl.alias_name, import_decl.pos
                    );
                }
            } else {
                for import_info in import_decl.import_list {
                    if !import_info.has_custom_alias {
                        continue;
                    }
                    self.check_name_case(
                        .Snake, "import alias", import_info.alias_name, import_info.pos
                    );
                }
            },
            .Alias(&alias_decl) -> {
                alias_sym := if alias_decl.sym is ast.SymRef(sym_ref) { sym_ref.ref } else { alias_decl.sym };
                self.check_name_case(match {
                        alias_decl.is_typealias || alias_sym is ast.TypeSym -> .Pascal,
                        alias_sym is ast.Const -> .Upper,
                        else -> .Snake
                    }, "alias", alias_decl.name, alias_decl.pos
                );
            },
            .Extern(&extern_decl) -> {
                self.inside_extern = true;
                self.check_decls(extern_decl.decls);
                self.inside_extern = false;
            },
            .Var(&mut var_decl) -> {
                self.inside_var_decl = true;
                self.check_var_decl(
                    var_decl.lefts, var_decl.right, var_decl.scope, var_decl.pos
                );
                self.inside_var_decl = false;
            },
            .Const(&mut const_decl) -> {
                self.check_name_case(.Upper, "constant", const_decl.name, const_decl.pos);
                if const_decl.has_type {
                    old_expected_type := self.expected_type;
                    self.expected_type = const_decl.type;
                    const_type := self.check_expr(const_decl.expr);
                    self.expected_type = old_expected_type;
                    self.check_types(const_type, const_decl.type) catch |err| {
                        report.error(err.to_string(), const_decl.expr.position());
                    };
                } else {
                    const_decl.type = self.check_expr(const_decl.expr);
                    @as(+mut ast.Const, const_decl.sym).type = const_decl.type;
                }
                if const_decl.type is .Option || const_decl.type is .None {
                    report.error(
                        "cannot assign option values to constants",
                        const_decl.expr.position()
                    );
                } else if type_sym := const_decl.type.symbol() {
                    if type_sym.is_boxed() {
                        report.error(
                            "cannot assign boxed values to constants",
                            const_decl.expr.position()
                        );
                    }
                }
            },
            .Trait(&trait_decl) -> {
                self.check_name_case(.Pascal, "trait", trait_decl.name, trait_decl.pos);
                self.check_decls(trait_decl.decls);
            },
            .Enum(&enum_decl) -> {
                self.check_name_case(.Pascal, "enum", enum_decl.name, enum_decl.pos);
                for base in enum_decl.bases {
                    if sym := base.symbol() {
                        if sym.info is .Trait {
                            self.check_trait_impl(
                                @as(+mut ast.TypeSym, enum_decl.sym), sym, enum_decl.pos
                            );
                        }
                    }
                }
                for variant in enum_decl.variants {
                    self.check_name_case(.Pascal, "enum variant", variant.name, variant.pos);
                    self.check_decls(variant.decls);
                }
                self.check_decls(enum_decl.decls);
            },
            .Struct(&struct_decl) -> {
                self.check_name_case(.Pascal, "struct", struct_decl.name, struct_decl.pos);
                for base in struct_decl.bases {
                    if sym := base.symbol() {
                        if sym.info is .Trait {
                            self.check_trait_impl(
                                @as(+mut ast.TypeSym, struct_decl.sym), sym, struct_decl.pos
                            );
                        }
                    }
                }
                self.check_decls(struct_decl.decls);
            },
            .Field(&field_decl) -> {
                self.check_name_case(.Snake, "field", field_decl.name, field_decl.pos);
                if field_decl.has_def_expr {
                    old_expected_type := self.expected_type;
                    self.expected_type = field_decl.type;
                    field_type := self.check_expr(field_decl.def_expr);
                    self.expected_type = old_expected_type;
                    self.check_types(field_type, field_decl.type) catch |err| {
                        report.error(err.to_string(), field_decl.def_expr.position());
                    };
                }
            },
            .Extend(&extend_decl) -> {
                type_sym := extend_decl.type.symbol()?;
                for base in extend_decl.bases {
                    if sym := base.symbol() {
                        if sym.info is .Trait {
                            self.check_trait_impl(type_sym, sym, extend_decl.type.position());
                        }
                    }
                }
                self.check_decls(extend_decl.decls);
            },
            .Func(&mut func_decl) -> self.check_func(func_decl),
            .Test(&test_decl) -> {
                old_cur_func := self.cur_func;
                self.cur_func = +mut ast.Func(ret_type: +mut .Void);
                self.inside_test = true;
                self.check_stmts(test_decl.stmts);
                self.inside_test = false;
                self.cur_func = old_cur_func;
                self.check_scope_vars(test_decl.scope);
            },
            else -> {}
        }
    }

    func check_func(+mut self, func_decl: &mut ast.Decl.Func) {
        if !func_decl.is_operator {
            name := if func_decl.is_method && func_decl.is_special_method {
                func_decl.name.substr(2, func_decl.name.len - 2) // skip `__`
            } else {
                func_decl.name
            };
            self.check_name_case(
                .Snake, if func_decl.is_method {
                    if func_decl.is_special_method {
                        "special method"
                    } else {
                        "method"
                    }
                } else {
                    "function"
                }, name, func_decl.pos
            );
        }
        if func_decl.is_special_method {
            if func_decl.is_method {
                if func_decl.is_public {
                    report.error(
                        "special methods cannot be public", func_decl.pos
                    );
                }
                if !func_decl.attributes.is_empty() {
                    report.error(
                        "special methods cannot have attributes", func_decl.pos
                    );
                }
                match func_decl.name {
                    "__destroy__" -> {},
                    else -> report.error(
                        "unknown special method `{}`".fmt(func_decl.name),
                        func_decl.pos
                    )
                }
            } else {
                report.error(
                    "this special function should be a method", func_decl.pos
                );
            }
        }
        if func_decl.is_method && func_decl.self_is_ptr && func_decl.self_type.is_boxed() {
            report.error("cannot take the address of a boxed value as receiver", func_decl.self_pos);
        }
        for arg in func_decl.args {
            self.check_name_case(.Snake, "argument", arg.name, arg.pos);
            if arg.has_def_expr {
                if func_decl.abi != .Rivet {
                    report.error("extern functions cannot have default arguments", arg.pos);
                    break;
                }
                old_expected_type := self.expected_type;
                self.expected_type = arg.type;
                def_expr_t := self.check_expr(arg.def_expr);
                self.expected_type = old_expected_type;
                self.check_types(def_expr_t, arg.type) catch |err| {
                    report.error(err.to_string(), arg.def_expr.position());
                };
            }
        }
        if func_decl.ret_type is .Pointer && func_decl.abi != .Rivet {
            err := report.error_builder(
                "function `{}` should return an optional pointer".fmt(func_decl.name),
                func_decl.ret_type.position()
            );
            err.add_note("this is because Rivet cannot ensure that the function does not always return a null pointer");
            err.emit();
        }
        self.cur_func = @as(+mut ast.Func, func_decl.sym);
        self.check_stmts(func_decl.stmts);
        func_decl.defer_stmts = self.defer_stmts;
        self.defer_stmts = +[];
        self.check_scope_vars(func_decl.scope);
        if func_decl.ret_type is .Never && !self.inside_extern {
            if func_decl.stmts.len > 0 {
                match func_decl.stmts[func_decl.stmts.len - 1].+ {
                    .While(while_stmt) if while_stmt.is_inf
                        && while_stmt.stmt is .Expr(expr) && expr is .Block(block) -> {
                        if !block.stmts.is_empty() {
                            report.error("infinite loop should be empty", while_stmt.pos);
                        }
                    },
                    .Expr(expr2) if expr2 is .Call(call_expr) -> {
                        if call_expr.type !is .Never {
                            report.error(
                                "`{}` is not a `never` function".fmt(
                                    call_expr.func_.name
                                ), call_expr.pos
                            );
                        }
                    },
                    .Expr(expr3) if expr3 is .Block(block1) && block1.stmts.len > 0 -> {
                        last_stmt := block1.stmts[block1.stmts.len - 1];
                        if last_stmt is .Expr(last_expr) && last_expr is .Call(call_expr) {
                            if call_expr.type !is .Never {
                                report.error(
                                    "`{}` is not a `never` function".fmt(
                                        call_expr.func_.name
                                    ), call_expr.pos
                                );
                            }
                        } else {
                            err := report.error_builder(
                                "`never` functions cannot return",
                                func_decl.pos
                            );
                            err.add_note("`never` functions should end with a call to another `never` function, or with a `while {}`");
                            err.emit();
                        }
                    },
                    else -> {
                        err := report.error_builder(
                            "`never` functions cannot return",
                            func_decl.pos
                        );
                        err.add_note("`never` functions should end with a call to another `never` function, or with a `while {}`");
                        err.emit();
                    }
                }
            } else {
                err := report.error_builder(
                    "`never` functions cannot be empty",
                    func_decl.pos
                );
                err.add_note("`never` functions should end with a call to another `never` function, or with a `while {}`");
                err.emit();
            }
        } else if func_decl.has_body && !func_decl.ret_type.is_void()
            && !self.has_return(func_decl.stmts, func_decl.ret_type is .Result) {
            report.error(
                "missing `return` statement at end of {} `{}`".fmt(
                    if func_decl.is_method { "method" } else { "function" },
                    func_decl.name
                ),
                func_decl.pos
            );
        }
    }
}
