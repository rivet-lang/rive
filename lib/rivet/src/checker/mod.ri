// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ ast, token, utils, report };

enum LoopControlLegalityTracker {
    None,
    AnyLoop,
    Defer
}

enum ReturnLegalityTracker {
    None,
    Lambda, // TODO
    Defer
}

#[boxed]
pub struct Checker {
    mut env: +mut ast.Env;

    mut source_file: +mut ast.SourceFile;
    mut sym: ast.Sym := ast.InvalidSym();
    mut cur_func: +mut ast.Func;

    mut inside_extern: bool;
    mut inside_test: bool;
    mut inside_var_decl: bool;
    mut inside_unsafe_block: bool;
    mut inside_guard_expr: bool;
    mut inside_match_cond_expr: bool;

    mut loop_control_tracker: LoopControlLegalityTracker;
    mut return_tracker: ReturnLegalityTracker;

    mut expected_type: +mut ast.Type;
    mut scope_returns: bool;
    mut unsafe_operations: uint;

    mut defer_stmts_start: uint;
    mut defer_stmts: []+mut ast.Stmt.Defer;

    pub func check_files(+mut self, mut source_files: []+mut ast.SourceFile) {
        // check global variables
        for mut source_file in source_files {
            self.sym = source_file.mod;
            self.source_file = source_file;
            self.expected_type = .Void;
            self.check_global_vars(source_file.decls);
        }
        // check the source code
        for mut source_file in source_files {
            self.sym = source_file.mod;
            self.source_file = source_file;
            self.expected_type = .Void;
            self.check_decls(source_file.decls);
            // check unused imports
            for imported_sym in source_file.imported_symbols.syms {
                if !imported_sym.is_used && imported_sym.name != "_" {
                    report.warn(
                        "{} `{}` is imported but never used".fmt(
                            imported_sym.sym.type_of(), imported_sym.sym.name
                        ), imported_sym.pos
                    );
                }
            }
        }
        // check global mutable variables
        for sym in self.env.universe.scope.syms {
            if sym is ast.Module(module) {
                for mod_sym in module.scope.syms {
                    if mod_sym is ast.Var(mod_var) {
                        if !mod_var.is_public && mod_var.is_mut && !mod_var.is_changed {
                            report.warn(
                                "variable `{}` does not need to be mutable".fmt(mod_var.name),
                                mod_var.pos
                            );
                        }
                    }
                }
                if module.name == self.env.prefs.mod_name && !self.env.prefs.is_test && !module.scope.exists("main") {
                    utils.error("function `main` was not defined on module `{}`".fmt(self.env.prefs.mod_name));
                }
            }
        }
    }

    func check_var_decl(
        mut self, mut lefts: []+mut ast.ObjectData, mut right: +mut ast.Expr, scope: +mut ast.Scope,
        pos: token.Pos
    ) {
        if lefts.len == 1 {
            old_expected_type := self.expected_type;
            mut left0 := lefts[0];
            if !left0.is_extern {
                if left0.name == "_" && left0.is_mut {
                    report.error("cannot use `mut` on `_`", left0.pos);
                }
                self.check_name_case(.Snake, "variable", left0.name, left0.pos);
                if self.inside_match_cond_expr {
                    if left0.sym.name.is_empty() {
                        scope.update_is_used(left0.name, true);
                    } else {
                        left0.sym.is_used = true;
                    }
                }
                if left0.has_type {
                    self.expected_type = left0.type;
                }
                mut right_type := self.check_expr(right);
                if self.inside_guard_expr {
                    right_type = if right_type is .Result(result_t) {
                        result_t.inner
                    } else if right_type is .Option(option_t) {
                        option_t.inner
                    } else {
                        report.error("expected result or option value", right.position());
                        right_type
                    };
                }
                if left0.has_type {
                    self.check_types(right_type, left0.type) catch |err| {
                        report.error(err.to_string(), pos);
                    };
                    self.expected_type = old_expected_type;
                } else {
                    right_type = self.env.comptime_number_to_type(right_type);
                    left0.type = right_type;
                    if left0.sym.name.is_empty() {
                        scope.update_type(left0.name, right_type);
                    } else {
                        left0.sym.type = right_type;
                    }
                }
            }
        } else {
            mut right_type := self.check_expr(right);
            if self.inside_guard_expr {
                right_type = if right_type is .Result(result_t) {
                    result_t.inner
                } else if right_type is .Option(option_t) {
                    option_t.inner
                } else {
                    report.error("expected result or option value", right.position());
                    right_type
                };
            }
            right_sym := right_type.symbol()?;
            if right_sym.info is .Tuple(tuple_info) {
                if tuple_info.types.len == lefts.len {
                    for i, mut vd in lefts {
                        if vd.name == "_" && vd.is_mut {
                            report.error("cannot use `mut` on `_`", vd.pos);
                        }
                        self.check_name_case(.Snake, "variable", vd.name, vd.pos);
                        if self.inside_match_cond_expr {
                            if vd.sym.name.is_empty() {
                                scope.update_is_used(vd.name, true);
                            } else {
                                vd.sym.is_used = true;
                            }
                        }
                        value_type := tuple_info.types[i];
                        if vd.has_type {
                            self.check_types(value_type, vd.type) catch |err| {
                                mut errb := report.error_builder(
                                    err.to_string(), right.position()
                                );
                                errb.add_note("in element {} of tuple value", i);
                                errb.emit();
                            };
                        } else {
                            v_type := self.env.comptime_number_to_type(value_type);
                            vd.type = v_type;
                            if vd.sym.name.is_empty() {
                                scope.update_type(vd.name, right_type);
                            } else {
                                vd.sym.type = v_type;
                            }
                        }
                    }
                } else {
                    report.error(
                        "expected {} values, found {}".fmt(
                            lefts.len, tuple_info.types.len
                        ), right.position()
                    );
                }
            } else {
                report.error(
                    "expected tuple value, found `{}`".fmt(right_type),
                    right.position()
                );
            }
        }
    }

    func check_scope_vars(+self, scope: +mut ast.Scope) {
        if !self.inside_extern {
            for sym in scope.syms {
                if sym is ast.Var(var_info) {
                    if !var_info.is_used && !var_info.name.starts_with("_") {
                        mut warn_b := report.warn_builder(
                            if var_info.level == .Receiver {
                                "receiver `self` is not used"
                            } else {
                                if var_info.level == .Argument {
                                    "argument `{}` is not used"
                                } else {
                                    "variable `{}` declared but never used"
                                }.fmt(var_info.name)
                            },
                            var_info.pos
                        );
                        warn_b.add_help(
                            "if this is intentional, prefix it with an underscore (`_{}`) or use the blank identifier (`_`)",
                            var_info.name
                        );
                        warn_b.emit();
                    } else if var_info.is_mut && !var_info.is_changed {
                        mut warn_b := report.warn_builder(
                            if var_info.level == .Receiver {
                                "receiver `self` does not need to be mutable"
                            } else {
                                if var_info.level == .Argument {
                                    "argument `{}` does not need to be mutable"
                                } else {
                                    "variable `{}` does not need to be mutable"
                                }.fmt(var_info.name)
                            },
                            var_info.pos
                        );
                        warn_b.add_help(if var_info.level == .Local {
                            "remove `mut` from the assignment"
                        } else if var_info.level == .Receiver {
                            "remove `mut` from receiver definition"
                        } else {
                            "remove `mut` from the declaration"
                        });
                        warn_b.emit();
                    }
                }
            }
            for ch in scope.childrens {
                self.check_scope_vars(ch);
            }
        }
    }

    func check_expr_evaluated_but_not_used(+self, expr_type: +mut ast.Type, pos: token.Pos) {
        _ = self;
        if !((expr_type is .Result(res) && !res.inner.is_void())
            || (expr_type is .Option(opt) && !opt.inner.is_void())
            || expr_type.is_void()) {
            report.warn("expression evaluated but not used", pos);
        }
    }

    func has_return(+self, mut stmts: []+mut ast.Stmt, allow_throw: bool := false) -> bool {
        for mut stmt in stmts {
            if stmt is .Expr(expr) && self.expr_has_return(expr, allow_throw) {
                return true;
            } else if stmt is .ComptimeIf(comptime_if) {
                mut ct_stmts := ast.nodes_to_stmts(self.env.evalue_comptime_if(comptime_if));
                return self.has_return(ct_stmts);
            }
        }
        return false;
    }

    func expr_has_return(+self, mut expr: +mut ast.Expr, allow_throw: bool := false) -> bool {
        return match expr {
            .ComptimeIf(comptime_if) -> {
                mut ct_expr := ast.nodes_to_exprs(self.env.evalue_comptime_if(comptime_if))[0];
                self.expr_has_return(ct_expr)
            },
            .Match(match_expr) -> {
                for i, mut branch in match_expr.branches {
                    if match_expr.is_exhaustive && i == match_expr.branches.len {
                        if self.expr_has_return(branch.expr, allow_throw) {
                            return true;
                        }
                    } else if branch.is_else && self.expr_has_return(branch.expr, allow_throw) {
                        return true;
                    }
                }
                false
            },
            .If(if_expr) -> {
                for mut branch in if_expr.branches {
                    if branch.is_else && self.expr_has_return(branch.expr, allow_throw) {
                        return true;
                    }
                }
                false
            },
            .Call(call_expr) -> call_expr.type is .Never,
            .Block(block) -> self.has_return(block.stmts, allow_throw),
            .Return -> true,
            .Throw if allow_throw -> true,
            else -> false
        };
    }

    func inside_unsafe(+mut self) -> bool {
        self.unsafe_operations += 1;
        return self.inside_unsafe_block;
    }
}
