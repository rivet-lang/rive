// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../ast;
import ../token;
import ../prefs;
import ../report;

[boxed]
public struct Checker {
    mut table: ast.Table;
    mut prefs: prefs.Prefs;

    mut source_file: ast.SourceFile;
    mut sym: ast.Sym;
    mut cur_fn: ast.Func;

    mut expected_type: ast.Type = .Void();

    mut inside_extern: bool;
    mut inside_test: bool;
    mut inside_var_decl: bool;
    mut inside_defer: bool;
    mut inside_unsafe: bool;
    mut inside_guard_expr: bool;

    mut defer_stmts: []ast.Stmt.Defer;

    public func check_files(mut self, source_files: []ast.SourceFile) {
        // check global variables
        for source_file in source_files {
            self.sym = source_file.mod;
            self.source_file = source_file;
            self.expected_type = .Void();
            self.check_global_vars(source_file.decls);
        }
        // check the source code
        for source_file in source_files {
            self.sym = source_file.mod;
            self.source_file = source_file;
            self.expected_type = .Void();
            self.check_decls(source_file.decls);
        }
        // check global mutable variables
        for sym in self.table.universe.scope.syms {
            if sym is ast.Module as module {
                for mod_sym in module.scope.syms {
                    if mod_sym is ast.Var as mod_var {
                        if !mod_var.is_public and mod_var.is_mut and !mod_var.is_changed {
                            report.warn(
                                "variable `{}` does not need to be mutable".fmt(mod_var.name),
                                mod_var.pos
                            );
                        }
                    }
                }
            }
        }
    }

    func check_global_vars(mut self, decls: []ast.Decl) {
        for decl in decls {
            old_sym := self.sym;
            if decl is .Const or decl is .Var {
                self.check_decl(decl);
            } else if decl_decls := decl.decls() {
                self.check_global_vars(decl_decls);
            }
            self.sym = old_sym;
        }
    }

    func check_decls(mut self, decls: []ast.Decl) {
        for decl in decls {
            if decl !is .Const and decl !is .Var {
                self.check_decl(decl);
            }
        }
    }

    func check_decl(mut self, decl: ast.Decl) {
        old_sym := self.sym;
        defer self.sym = old_sym;
        switch decl is {
            .Extern as extern_decl => {
                self.inside_extern = true;
                self.check_decls(extern_decl.decls);
                self.inside_extern = false;
            },
            .Var as var_decl => {
                self.inside_var_decl = true;
                self.check_var_decl(
                    var_decl.lefts, var_decl.right, var_decl.scope, var_decl.pos
                );
                self.inside_var_decl = false;
            },
            .Const as const_decl => if const_decl.has_type {
                old_expected_type := self.expected_type;
                self.expected_type = const_decl.type;
                const_type := self.check_expr(const_decl.expr);
                self.expected_type = old_expected_type;
                self.check_types(const_type, const_decl.type) catch |err| {
                    report.error(err.to_string(), const_decl.expr.position());
                };
            } else {
                const_decl.type = self.check_expr(const_decl.expr);
                @cast(ast.Const, const_decl.sym).type = const_decl.type;
            },
            .Func as func_decl => {
                self.cur_fn = @cast(ast.Func, func_decl.sym);
                self.check_stmts(func_decl.stmts);
                self.check_scope_vars(func_decl.scope);
            },
            else => {}
        }
    }

    func check_var_decl(
        mut self, lefts: []ast.ObjectData, mut right: ast.Expr, scope: ast.Scope,
        pos: token.Pos
    ) {
        if lefts.len == 1 {
            old_expected_type := self.expected_type;
            left0 := lefts[0];
            if !left0.is_extern {
                if left0.has_type {
                    self.expected_type = left0.type;
                }
                mut right_type := self.check_expr(right);
                if left0.has_type {
                    self.check_types(right_type, left0.type) catch |err| {
                        report.error(err.to_string(), pos);
                    };
                } else {
                    right_type = self.table.comptime_number_to_type(right_type);
                    left0.type = right_type;
                    scope.update_type(left0.name, right_type);
                }
                self.expected_type = old_expected_type;
            }
        } else {
            right_type := self.check_expr(right);
            right_sym := right_type.symbol()?;
            if right_sym.info is .Tuple as tuple_info {
                if tuple_info.types.len == lefts.len {
                    for i, vd in lefts {
                        if vd.name == "_" {
                            report.error("cannot modify blank identifier (`_`)", vd.pos);
                            continue;
                        }
                        if !vd.has_type {
                            v_type := self.table.comptime_number_to_type(tuple_info.types[i]);
                            vd.type = v_type;
                            scope.update_type(vd.name, v_type);
                        }
                    }
                } else {
                    report.error(
                        "expected {} values, found {}".fmt(
                            lefts.len, tuple_info.types.len
                        ), right.position()
                    );
                }
            } else {
                report.error(
                    "expected tuple value, found `{}`".fmt(right_type),
                    right.position()
                );
            }
        }
    }

    func check_ctor_call(mut self, type_sym: ast.TypeSym, mut call_expr: ast.Expr.Call) {
        //
    }

    func check_func_call(mut self, func_: ast.Func, mut call_expr: ast.Expr.Call) {
        kind := func_.kind();
        call_expr.type = func_.ret_type;

        if func_.is_unsafe and !self.inside_unsafe {
            report.warn(
                "{} `{}` should be called inside `unsafe` block".fmt(kind, func_.name),
                call_expr.pos
            );
        } else if func_.is_method and func_.self_is_mut {
            self.check_expr_is_mut(@cast(ast.Expr.Selector, call_expr.left).left);
        }

        mut func_args_len := func_.args.len;
        if func_.is_variadic and !func_.is_extern {
            func_args_len -= 1;
        }

        // check named arguments
        mut error := false;
        for arg in call_expr.args {
            if !arg.is_named {
                continue;
            }
            mut found := false;
            for arg_func in func_.args {
                if arg_func.name == arg.name {
                    found = true;
                    if !arg_func.has_def_expr {
                        report.error("argument `{}` is not optional".fmt(arg.name), arg.pos);
                    }
                }
            }
            if !found {
                error = true;
                report.error(
                    "{} `{}` does not have an argument called `{}`".fmt(
                        kind, func_.name, arg.name
                    ), arg.pos
                );
            }
        }
        if error {
            return;
        }

        // check default expressions
        if func_.has_named_args {
            args_len := call_expr.pure_args_count();
            mut args := call_expr.args[..args_len];
            mut i: usize := args_len;
            while i < func_args_len : i += 1 {
                arg := func_.args[i];
                if arg.has_def_expr {
                    args.push(if carg := call_expr.get_named_arg(arg.name) {
                        ast.CallArg(
                            expr: carg.expr,
                            pos: carg.expr.position()
                        )
                    } else {
                        ast.CallArg(
                            expr: arg.def_expr,
                            pos: arg.def_expr.position()
                        )
                    });
                }
            }
            call_expr.args = args;
        }

        expr_args_len := call_expr.pure_args_count();
        expr_msg := "expected {} argument(s), found {}".fmt(func_args_len, expr_args_len);
        if expr_args_len < func_args_len {
            mut err := report.error_builder(
                "too few arguments to {} `{}`".fmt(kind, func_.name), call_expr.pos
            );
            err.add_note(expr_msg);
            err.emit();
        } else if !func_.is_variadic and expr_args_len > func_args_len {
            mut err := report.error_builder(
                "too many arguments to {} `{}`".fmt(kind, func_.name), call_expr.pos
            );
            err.add_note(expr_msg);
            err.emit();
        }

        old_expected_type := self.expected_type;
        for i, arg in call_expr.args {
            arg_fn := if func_.is_variadic and i >= func_.args.len - 1 {
                func_.args[func_.args.len - 1]
            } else {
                func_.args[i]
            };

            self.expected_type = if arg_fn.type is .Variadic as variadic {
                variadic.inner
            } else {
                arg_fn.type
            };
            arg.type = self.check_expr(arg.expr);
            self.expected_type = old_expected_type;

            if arg_fn.is_mut and !(arg_fn.type is .Pointer or arg_fn.type is .Reference)
                and !arg_fn.type.symbol()?.is_primitive() {
                self.check_expr_is_mut(arg.expr);

                if !(func_.is_variadic and func_.is_extern and i >= func_.args.len - 1) {
                    self.check_argument_type(
                        arg.type, arg_fn.type, arg.pos, arg_fn.name, kind, func_.name
                    );
                }
            }
        }
        if call_expr.has_spread_expr {
            spread_expr_t := self.check_expr(call_expr.spread_expr);
            spread_expr_sym := spread_expr_t.symbol()?;
            if spread_expr_sym.info is .Vector {
                report.error(
                    "spread operator can only be used with vectors",
                    call_expr.spread_expr.position()
                );
            } else {
                last_arg_type := func_.args[func_.args.len - 1].type;
                vec_t := ast.Type.Vector(last_arg_type, sym: last_arg_type.symbol()?);
                self.check_types(spread_expr_t, vec_t) catch |err| {
                    report.error(err.to_string(), call_expr.spread_expr.position());
                };
            }
        }
        self.expected_type = old_expected_type;
    }

    func check_scope_vars(self, scope: ast.Scope) {
        if !self.inside_extern {
            for sym in scope.syms {
                if sym is ast.Var as var_info {
                    if !var_info.is_used and !var_info.name.ends_with("_") {
                        report.warn(
                            if var_info.level == .Argument {
                                "argument `{}` is not used"
                            } else {
                                "variable `{}` declared but never used"
                            }.fmt(var_info.name),
                            var_info.pos
                        );
                    } else if var_info.is_mut and !var_info.is_changed {
                        report.warn(
                            if var_info.level == .Argument {
                                "argument `{}` does not need to be mutable"
                            } else {
                                "variable `{}` does not need to be mutable"
                            }.fmt(var_info.name),
                            var_info.pos
                        );
                    }
                }
            }
            for ch in scope.childrens {
                self.check_scope_vars(ch);
            }
        }
    }
}
