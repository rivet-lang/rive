// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/traits;

import ../{ token, utils, report };

extend Checker {
    enum NameCase as uint8 < traits.Stringable {
        Snake,
        Camel,
        Pascal,
        Upper;

        pub func to_string(&self) -> string {
            return match self.* {
                .Snake -> "snake",
                .Camel -> "camel",
                .Pascal -> "pascal",
                .Upper -> "upper"
            };
        }
    }

    #[inline]
    func check_name_case(+self, case: NameCase, kind: string, name: string, pos: token.Pos) {
        if !(self.inside_extern || name == "_" || name == "string"
            || self.sym.module()?.name in ["c.libc", "c.ctypes"]) {
            is_valid := match case {
                .Snake -> utils.is_snake_case(name),
                .Camel -> utils.is_camel_case(name),
                .Pascal -> utils.is_pascal_case(name),
                .Upper -> utils.is_upper_case(name)
            };
            if !is_valid {
                report.warn(
                    "{} `{}` should have a {} case name".fmt(kind, name, case),
                    pos
                );
            }
        }
	}
}
