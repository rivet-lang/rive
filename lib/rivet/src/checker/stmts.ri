// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../ast;
import ../token;
import ../report;

extend Checker {
    func check_stmts(mut self, stmts: []mut ast.Stmt) {
        mut unreachable_pos := token.noPos;
        for mut stmt in stmts {
            if self.scope_returns and unreachable_pos.pos == 0 {
                unreachable_pos = stmt.position();
            }
            self.check_stmt(stmt);
        }
        if unreachable_pos.pos > 0 {
            report.warn("unreachable code detected", unreachable_pos);
        }
        self.scope_returns = false;
    }

    func check_stmt(mut self, mut stmt: ast.Stmt) {
        match stmt is {
            .VarDecl as var_decl -> self.check_var_decl(
                var_decl.lefts, var_decl.right, var_decl.scope, var_decl.pos
            ),
            .For as mut for_stmt -> self.check_for(for_stmt),
            .While as while_stmt -> {
                if !while_stmt.is_inf and self.check_expr(
                    while_stmt.cond
                ) != self.table.bool_t {
                    if while_stmt.cond !is .Guard {
                        report.error(
                            "non-boolean expression used as `while` condition",
                            while_stmt.cond.position()
                        );
                    }
                }
                self.check_stmt(while_stmt.stmt);
                if while_stmt.has_continue_expr {
                    _ = self.check_expr(while_stmt.continue_expr);
                }
                if while_stmt.has_else_stmt {
                    self.check_stmt(while_stmt.else_stmt);
                }
            },
            .Defer as defer_stmt -> {
                if self.cur_fn.ret_type is .Never {
                    report.error("`never` functions cannot use `defer` statements", defer_stmt.pos);
                }
                self.inside_defer = true;
                self.check_expr_evaluated_but_not_used(
                    self.check_expr(defer_stmt.expr), defer_stmt.expr.position()
                );
                self.defer_stmts.push(defer_stmt);
                self.inside_defer = false;
            },
            .Expr as mut expr -> self.check_expr_evaluated_but_not_used(
                self.check_expr(expr), expr.position()
            ),
            else -> {}
        }
    }

    func check_for(mut self, mut for_stmt: ast.Stmt.For) {
        iterable_t := self.check_expr(for_stmt.iterable);
        iterable_sym := iterable_t.symbol()?;
        if iterable_sym.info is .Array or iterable_sym.info is .DynArray {
            mut elem_type := self.table.comptime_number_to_type(
                iterable_sym.info.elem_type()?
            );
            elem_sym := elem_type.symbol()?;
            if for_stmt.values.len == 1 {
                value0 := for_stmt.values[0];
                if value0.is_mut and !iterable_sym.info.is_mut_arr_or_vec() {
                    report.error(
                        "cannot modify immutable {}".fmt(iterable_sym.info),
                        for_stmt.iterable.position()
                    );
                } else if value0.is_ref {
                    if elem_sym.is_boxed() {
                        report.error("cannot take the address of a boxed value", value0.pos);
                    }
                    elem_type = .Pointer(elem_type);
                }
            }
            if for_stmt.has_index {
                self.check_name_case(
                    .Snake, "index variable", for_stmt.index.name, for_stmt.index.pos
                );
                for_stmt.index.sym.type = self.table.uint_t;
            }
            if for_stmt.values.len == 1 {
                value0 := for_stmt.values[0];
                self.check_name_case(.Snake, "variable", value0.name, value0.pos);
                value0.sym.type = elem_type;
                value0.sym.is_hidden_ref = value0.is_mut;
            } else {
                types := @as(ast.TypeInfo.Tuple, elem_type.symbol()?.info).types;
                for i, value in for_stmt.values {
                    self.check_name_case(.Snake, "variable", value.name, value.pos);
                    if value.is_ref and elem_sym.is_boxed() {
                        report.error("cannot take the address of a boxed value", value.pos);
                    }
                    value.sym.type = types[i];
                    value.sym.is_hidden_ref = value.is_mut;
                }
            }
            self.check_stmt(for_stmt.stmt);
        } else {
            mut err := report.error_builder(
                "`{}` is not an iterable type".fmt(iterable_t),
                for_stmt.iterable.position()
            );
            err.add_note("expected array value");
            err.emit();
        }
    }
}
