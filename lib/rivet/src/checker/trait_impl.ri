// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ ast, token, report };

extend Checker {
    func check_trait_impl(
        ^mut self, impltor: ^mut ast.TypeSym, trait_sym: ^mut ast.TypeSym, pos: token.Pos
    ) {
        mut impl_does_not_implemented := []string();
        for sym in trait_sym.scope.syms {
            if sym is ast.Func(mut trait_func) {
                if impl := impltor.find_func(trait_func.name); !trait_func.has_body {
                    mut errors := []string();
                    if !impl.is_public {
                        errors.push("method `{}` should be public.".fmt(impl.name));
                    }
                    if !impl.self_is_ptr && !impltor.is_boxed() {
                        errors.push(
                            "receiver `self` should be a reference, or use the attribute `boxed`."
                        );
                    }
                    if impl.args.len == trait_func.args.len {
                        for i, arg in impl.args {
                            trait_arg := trait_func.args[i];
                            if arg.is_mut && !trait_arg.is_mut {
                                errors.push("argument `{}` should not be `mut`.".fmt(arg.name));
                            } else if !arg.is_mut && trait_arg.is_mut {
                                errors.push("argument `{}` should be `mut`.".fmt(arg.name));
                            }
                            if arg.type != trait_arg.type {
                                errors.push("argument `{}` should be of type `{}`.".fmt(arg.name, trait_arg.type));
                            }
                        }
                    } else {
                        errors.push(
                            "expected {} arguments(s), not {}.".fmt(trait_func.args.len, impl.args.len)
                        );
                    }
                    if impl.ret_type != trait_func.ret_type {
                        errors.push("method `{}` should return `{}`.".fmt(
                            impl.name, trait_func.ret_type
                        ));
                    }
                    if errors.len > 0 {
                        mut err := report.error_builder(
                            "type `{}` incorrectly implements method `{}` of trait `{}`".fmt(
                                impltor.qualname(), impl.name, trait_sym.qualname()
                            ), impl.pos
                        );
                        for error in errors {
                            err.add_note(error);
                        }
                        err.add_note("====== method signature for `{}` ======", impl.name);
                        err.add_note(
                            "trait `{}` has `{}`", trait_sym.name,
                            trait_func.type(self.env.universe)
                        );
                        err.add_note(
                            "type `{}` has `{}`", impltor.name,
                            impl.type(self.env.universe)
                        );
                        err.emit();
                    }
                } else if !trait_func.has_body {
                    impl_does_not_implemented.push(
                        "`{}` - {}".fmt(
                            trait_func.name, trait_func.type(self.env.universe)
                        )
                    );
                }
            }
        }
        if impl_does_not_implemented.len > 0 {
            mut err := report.error_builder(
                "type `{}` does not implement trait `{}`".fmt(
                    impltor.qualname(), trait_sym.qualname()
                ), pos
            );
            err.add_note("type `{}` should be implement theses methods:", impltor.name);
            for m in impl_does_not_implemented {
                err.add_note("> {}", m);
            }
            err.emit();
        }
        for base in @as(ast.TypeInfo.Trait, trait_sym.info).bases {
            self.check_trait_impl(impltor, base, pos);
        }
    }
}
