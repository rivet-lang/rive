// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ ast, token, report };

#[boxed]
struct IncompatibleTypesError < Throwable {
    msg: string;

    pub func to_string(+self) -> string {
        return self.msg;
    }
}

extend Checker {
    func check_argument_type(
        +self, got: +mut ast.Type, expected: +mut ast.Type, pos: token.Pos, arg_name: string,
        func_kind: string, func_name: string
    ) {
        if expected_sym := expected.symbol(); expected_sym.info is .Trait(&mut trait_info)
            && expected != got {
            got_t := self.env.comptime_number_to_type(got);
            if got_t.symbol()? in trait_info.implements {
                trait_info.mark_has_objects();
            } else {
                err := report.error_builder(
                    "type `{}` does not implement trait `{}`".fmt(
                        got_t, expected_sym.name
                    ), pos
                );
                err.add_note(
                    "in argument `{}` of {} `{}`".fmt(arg_name, func_kind, func_name)
                );
                err.emit();
            }
        } else {
            self.check_types(got, expected) catch |err| {
                err2 := report.error_builder(err.to_string(), pos);
                err2.add_note(
                    "in argument `{}` of {} `{}`".fmt(arg_name, func_kind, func_name)
                );
                err2.emit();
            };
        }
    }

    func check_types(+self, got: +mut ast.Type, expected: +mut ast.Type) -> ! {
        if !self.check_compatible_types(got, expected) {
            got_str := if got is .None {
                if expected is .Option {
                    "`".concat(expected.to_string(), "`")
                } else if expected is .Void {
                    "option"
                } else {
                    "`?".concat(expected.to_string(), "`")
                }
            } else {
                "`".concat(got.to_string(), "`")
            };
            if expected is .Void {
                throw IncompatibleTypesError(
                    "no value expected, found {} value instead".fmt(got_str)
                );
            } else if got is .Void {
                throw IncompatibleTypesError("void expression used as value");
            } else {
                throw IncompatibleTypesError(
                    "expected type `{}`, found {}".fmt(expected, got_str)
                );
            }
        }
    }

    func check_compatible_types(+self, got: +mut ast.Type, expected: +mut ast.Type) -> bool {
        if got is .Never {
            return true;
        } else if (expected is .Never && got is .Void)
            || (expected is .Void && got is .Never) {
            return true;
        } else if expected is .Void && got is .Void {
            return true;
        }

        if expected is .Result(result) {
            return self.check_compatible_types(got, result.inner);
        }

        if got is .Option(option) && expected is .Pointer {
            return check_pointer(expected, option.inner);
        } else if got is .Option && expected !is .Option {
            return false;
        } else if expected is .Option(option_) && got is .Option(option2) {
            if option_.inner is .Pointer && option2.inner is .Pointer {
                return check_pointer(option_.inner, option2.inner);
            }
            return option_.inner == option2.inner;
        } else if expected is .Option(option_2) && got !is .Option {
            if got is .None {
                return true;
            }
            return self.check_compatible_types(got, option_2.inner);
        } else if expected is .None && got is .Option {
            return true;
        }

        expected_is_ptr := expected.is_pointer();
        got_is_ptr := got.is_pointer();
        if expected_is_ptr && got_is_ptr {
            return check_pointer(expected, got);
        } else if (expected_is_ptr && !got_is_ptr) || (got_is_ptr && !expected_is_ptr) {
            return false;
        }

        expected_sym := expected.symbol() ?? return false;
        got_sym := got.symbol() ?? return false;

        if expected is .Variadic {
            slice_info := @as(ast.TypeInfo.Slice, expected_sym.info);
            if got is .Variadic(variadic) {
                return slice_info.elem_type == variadic.inner;
            }
            elem_sym := slice_info.elem_type.symbol()?;
            if got_sym.info is .Trait(trait_info) && elem_sym in trait_info.bases {
                return true;
            }
            return self.check_compatible_types(got, slice_info.elem_type);
        }

        if expected is .Func && got is .Func {
            return expected == got;
        } else if expected is .DynArray(dyn_array_info) && got is .DynArray(dyn_array_info2) {
            return dyn_array_info.inner == dyn_array_info2.inner;
        }

        if expected == self.env.rune_t && got == self.env.comptime_int_t {
            return true;
        } else if expected == self.env.comptime_int_t && got == self.env.rune_t {
            return true;
        }

        if self.env.is_number(expected) && self.env.is_number(got) {
            if self.env.is_comptime_number(expected) || self.env.is_comptime_number(got) {
                return true;
            }
        }

        match expected_sym.info.+ {
            .Trait(&mut trait_info) -> {
                got_sym2 := self.env.comptime_number_to_type(got).symbol()?;
                if got_sym2 in trait_info.implements {
                    trait_info.mark_has_objects();
                    return true;
                }
            },
            .Slice(&slice_lhs) if got_sym.info is .Slice(&slice_rhs) -> {
                if slice_lhs.is_mut && !slice_rhs.is_mut {
                    return false;
                }
                return slice_lhs.elem_type == slice_rhs.elem_type;
            },
            .Array(&array_info) if got_sym.info is .Array(&array_info2) -> {
                if array_info.is_mut && !array_info2.is_mut {
                    return false;
                }
                return array_info.elem_type == array_info2.elem_type
                    && array_info.size == array_info2.size;
            },
            .DynArray(&dyn_array_lhs) if got_sym.info is .DynArray(&dyn_array_rhs) -> {
                if dyn_array_lhs.is_mut && !dyn_array_rhs.is_mut {
                    return false;
                }
                return dyn_array_lhs.elem_type == dyn_array_rhs.elem_type;
            },
            .Tuple(&tuple_lhs) if got_sym.info is .Tuple(&tuple_rhs) -> {
                if tuple_lhs.types.len != tuple_rhs.types.len {
                    return false;
                }
                for i, type in tuple_lhs.types {
                    if type != tuple_rhs.types[i] {
                        return false;
                    }
                }
                return true;
            },
            else -> if mod_sym := self.sym.module(); mod_sym.is_core() {
                if expected_sym.info is .DynArray && got_sym == self.env.dyn_array_sym {
                    return true;
                } else if expected_sym.info is .Slice && got_sym.name == "Slice" {
                    return true;
                }
            }
        }

        return expected == got;
    }

    func check_pointer(expected: +mut ast.Type, got: +mut ast.Type) -> bool {
        if expected is .Rawptr {
            // rawptr == &T, is valid
            return got is .Rawptr || got is .Pointer || got is .Boxedptr;
        } else if expected is .Pointer(ptr) && got is .Pointer(ptr2) {
            if ptr.is_mut && !ptr2.is_mut {
                return false;
            }
            if ptr.is_indexable && !ptr2.is_indexable {
                return false;
            }
            return ptr.inner == ptr2.inner;
        } else if expected is .Boxedptr && got is .Boxedptr {
            return true;
        }
        return false;
    }
}
