// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ./mir;
import ../ast;

extend Codegen {
    func gen_decls(mut self, decls: []mut ast.Decl) {
        for mut decl in decls {
            self.gen_decl(decl);
        }
    }

    func gen_decl(mut self, mut decl: ast.Decl) {
        switch decl is {
            .Extern as extern_decl => self.gen_decls(extern_decl.decls),
            .Extend as extend_decl => self.gen_decls(extend_decl.decls),
            .Func as mut func_decl => self.gen_func(func_decl),
            else => {}
        }
    }

    func gen_func(mut self, mut func_decl: ast.Decl.Func) {
        ret_type_is_void := func_decl.ret_type.is_void();
        self.cur_func = mir.Func(
            name: self.mangle_symbol(func_decl.sym),
            ret_type: self.gen_type(func_decl.ret_type),
            is_extern: func_decl.is_extern
        );
        if func_decl.is_method {
            self.cur_func.add_arg(mir.Var(
                dbg_name: "self",
                level: .Argument,
                type: self.gen_type(func_decl.self_type)
            ));
        }
        self.add_locals(func_decl.scope);
        if !ret_type_is_void {
            self.cur_func.add_local(mir.Var(
                dbg_name: "_return_value",
                level: .Local,
                type: self.gen_type(func_decl.ret_type)
            ));
        }
        self.cur_func.add_block(
            mir.Block(stmts: [
                if ret_type_is_void {
                    .Return()
                } else {
                    .Return(true, .Ident(self.cur_func.locals[self.cur_func.locals.len - 1]))
                }
            ])
        );
        self.mir.funcs.push(self.cur_func);
    }

    func add_locals(mut self, scope: ast.Scope) {
        for sym in scope.syms {
            if sym is ast.Var as local {
                mut var_ := mir.Var(
                    dbg_name: local.name,
                    level: .Local,
                    type: self.gen_type(local.type)
                );
                if var_.level == .Argument {
                    self.cur_func.add_arg(var_)
                } else {
                    self.cur_func.add_local(var_);
                }
            }
        }
        for children in scope.childrens {
            self.add_locals(children);
        }
    }
}
