// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ./mir;
import ../ast;

extend Codegen {
    func gen_decls(mut self, decls: []mut ast.Decl) {
        for mut decl in decls {
            self.gen_decl(decl);
        }
    }

    func gen_decl(mut self, mut decl: ast.Decl) {
        switch decl is {
            .Var as var_decl => {
                for left in var_decl.lefts {
                    self.mir.globals.push(mir.Global(
                        name: left.name,
                        type: self.gen_type(left.type),
                        fields: self.get_fields(left.type)
                    ));
                }
            },
            .Extern as extern_decl => self.gen_decls(extern_decl.decls),
            .Extend as extend_decl => self.gen_decls(extend_decl.decls),
            .Func as mut func_decl => self.gen_func(func_decl),
            else => {}
        }
    }

    func gen_func(mut self, mut func_decl: ast.Decl.Func) {
        ret_type_is_void := func_decl.ret_type.is_void();
        self.cur_func = mir.Func(
            name: if func_decl.is_extern and func_decl.abi != .Rivet {
                func_decl.name
            } else {
                self.mangle_symbol(func_decl.sym)
            },
            args_len: func_decl.args.len + if func_decl.is_method { 1 } else { 0 },
            ret_type: self.gen_type(func_decl.ret_type),
            is_extern: func_decl.is_extern
        );
        if func_decl.is_method {
            self.cur_func.add_local(mir.Var(
                dbg_name: "self",
                level: .Argument,
                type: self.gen_type(func_decl.self_type)
            ));
        }
        self.add_locals(func_decl.scope);
        if !ret_type_is_void {
            self.cur_func.add_local(mir.Var(
                dbg_name: "_return_value",
                level: .Local,
                type: self.gen_type(func_decl.ret_type)
            ));
        }
        self.cur_func.add_block(
            mir.Block(stmts: [
                if ret_type_is_void {
                    .Return()
                } else {
                    .Return(true, .Ident(self.cur_func.locals[self.cur_func.locals.len - 1]))
                }
            ])
        );
        if self.cur_func.is_extern {
            self.mir.externs.push(self.cur_func);
        } else {
            self.mir.funcs.push(self.cur_func);
        }
    }

    func add_locals(mut self, scope: ast.Scope) {
        for sym in scope.syms {
            if sym is ast.Var as local {
                self.cur_func.add_local(mir.Var(
                    dbg_name: local.name,
                    level: if local.level == .Argument { .Argument } else { .Local },
                    type: self.gen_type(local.type),
                    fields: self.get_fields(local.type)
                ))
            }
        }
        for children in scope.childrens {
            self.add_locals(children);
        }
    }

    func get_fields(mut self, type: ast.Type) []mir.Var {
        mut fields := @vec(mir.Var);
        if type_sym := type.symbol() {
            for i, field in type_sym.fields {
                fields.push(mir.Var(
                    id: i,
                    dbg_name: field.name,
                    level: .Local,
                    type: self.gen_type(field.type),
                    fields: self.get_fields(field.type)
                ));
            }
        }
        return fields;
    }
}
