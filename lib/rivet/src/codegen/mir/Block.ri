// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{ traits, strings };

#[boxed]
pub struct Block < traits.Stringable {
    mut id: uint;
    mut stmts: []+mut Stmt;

    pub func add_stmt(+mut self, stmt: +mut Stmt) {
        self.stmts.push(stmt);
    }

    pub func to_string(+self) -> string {
        mut sb := strings.Builder.new();
        sb.writeln_fmt("@b{} {{", self.id);
        for stmt in self.stmts {
            sb.writeln_fmt("        {};", stmt);
        }
        sb.write("    }");
        return sb.to_string();
    }
}

pub enum Stmt < traits.Stringable {
    Expr(+Expr),
    Assign {
        left: +mut Expr;
        right: +mut Expr;
    },
    Discard(+Expr),
    Goto(string),
    GotoIf {
        label: string;
        cond: +mut Expr;
    },
    GotoIfElse {
        label: string;
        cond: +mut Expr;
        label2: string;
    },
    Return {
        has_expr: bool;
        expr: +mut Expr := .Empty;
    };

    pub func to_string(&self) -> string {
        return match self.* {
            .Expr(expr) -> expr.to_string(),
            .Assign(assign) -> "{} = {}".fmt(assign.left, assign.right),
            .Discard(discard) -> "discard {}".fmt(discard),
            .Goto(goto) -> "goto {}".concat(goto),
            .GotoIf(goto_if) -> "goto {} if {}".fmt(goto_if.label, goto_if.cond),
            .GotoIfElse(goto_if_else) -> "goto {} if {} else {}".fmt(
                goto_if_else.label, goto_if_else.cond, goto_if_else.label2
            ),
            .Return(ret_expr) -> if ret_expr.has_expr {
                "return {}".fmt(ret_expr.expr)
            } else {
                "return"
            }
        };
    }
}
