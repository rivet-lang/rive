// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/strings;

@[boxed]
public struct Block < traits.Stringable {
    mut id: usize;
    mut stmts: []Stmt;

    public func add_stmt(mut self, stmt: Stmt) {
        self.stmts.push(stmt);
    }

    public func to_string(self) -> string {
        mut sb := strings.Builder.new();
        sb.writeln_fmt("@b{} {{", self.id);
        for stmt in self.stmts {
            sb.writeln_fmt("        {};", stmt);
        }
        sb.write_string("    }");
        return sb.to_string();
    }
}

public enum Stmt < traits.Stringable {
    Expr: Expr,
    Assign {
        left: Expr;
        right: Expr;
    },
    Discard: Expr,
    Goto: string,
    GotoIf {
        label: string;
        cond: Expr;
    },
    GotoIfElse {
        label: string;
        cond: Expr;
        label2: string;
    },
    Return {
        has_expr: bool;
        expr: Expr = .Empty();
    };

    public func to_string(self) -> string {
        return switch self is {
            .Expr as expr => expr.to_string(),
            .Assign as assign => "{} = {}".fmt(assign.left, assign.right),
            .Discard as discard => "discard {}".fmt(discard),
            .Goto as goto => "goto {}".concat(goto),
            .GotoIf as goto_if => "goto {} if {}".fmt(goto_if.label, goto_if.cond),
            .GotoIfElse as goto_if_else=> "goto {} if {} else {}".fmt(
                goto_if_else.label, goto_if_else.cond, goto_if_else.label2
            ),
            .Return as ret_expr => if ret_expr.has_expr {
                "return {}".fmt(ret_expr.expr)
            } else {
                "return"
            }
        };
    }
}
