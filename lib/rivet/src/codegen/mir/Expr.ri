// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/strings;

#[default_value(.Empty())]
public enum Expr < traits.Stringable {
    Empty,
    IntConst {
        value: int;
    },
    FloatConst {
        value: float64;
    },
    StringConst {
        value: string;
        type: Type;
    },
    ArrayConst {
        elems: []Expr;
        type: Type;
    },
    Const {
        expr: Expr;
        type: Type;
    },
    Name: string,
    Ident: Var,
    Selector {
        left: Expr;
        name: string;
        var_: Var;
        type: Type;
    },
    Operator {
        enum Op < traits.Stringable {
            Add,
            Sub,
            Mul,
            Div,
            Mod,
            BitNot,
            BitAnd,
            BitOr,
            BitXor,
            Lshift,
            Rshift,
            Move,
            Neg,
            Inc,
            Dec,
            Index,
            AddrOf;

            public func to_string(&self) -> string {
                return match self.* {
                    .Add -> "add",
                    .Sub -> "sub",
                    .Mul -> "mul",
                    .Div -> "div",
                    .Mod -> "mod",
                    .BitNot -> "bit_not",
                    .BitAnd -> "bit_and",
                    .BitOr -> "bit_or",
                    .BitXor -> "bit_xor",
                    .Lshift -> "lshift",
                    .Rshift -> "rshift",
                    .Move -> "move",
                    .Neg -> "neg",
                    .Inc -> "inc",
                    .Dec -> "dec",
                    .Index -> "index",
                    .AddrOf -> "addr_of"
                };
            }
        }

        op: Op;
        args: []Expr;
        type: Type;
    },
    Call {
        func_: Expr;
        args: []Expr;
        type: Type;
    };

    public func to_string(self) -> string {
        return match self is {
            .Empty -> "<empty-expression>",
            .IntConst as int_const -> "{}".fmt(int_const.value),
            .FloatConst as float_const -> "{}".fmt(float_const.value),
            .StringConst as string_const -> "\"{}\"".fmt(string_const.value),
            .ArrayConst as array_const -> {
                mut sb := strings.Builder.from_string("array_const(");
                sb.write_fmt("{}, ", array_const.type);
                for i, elem in array_const.elems {
                    sb.write_string(elem.to_string());
                    if i < array_const.elems.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_byte(b')');
                sb.to_string()
            },
            .Const as const_ -> "const({}, {})".fmt(const_.type, const_.expr),
            .Name as name -> "@".concat(name),
            .Ident as ident -> "%{}".fmt(ident.dbg_name),
            .Selector as selector -> "{}.%{}".fmt(selector.left, selector.name),
            .Operator as operator -> {
                mut sb := strings.Builder.new();
                sb.write_fmt("{}(", operator.op);
                for i, arg in operator.args {
                    sb.write_string(arg.to_string());
                    if i < operator.args.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_byte(b')');
                sb.to_string()
            },
            .Call as call -> {
                mut sb := strings.Builder.from_string("call(");
                sb.write_string(call.func_.to_string());
                if call.args.len > 0 {
                    sb.write_string(", ");
                    for i, arg in call.args {
                        sb.write_string(arg.to_string());
                        if i < call.args.len - 1 {
                            sb.write_string(", ");
                        }
                    }
                }
                sb.write_byte(b')');
                sb.to_string()
            }
        };
    }
}
