// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/strings;
import std/process;

#[default_value(.Void())]
pub enum Type < traits.Stringable {
    Void,
    Never,
    SizedInt {
        bits: uint;
        size: uint;
    },
    SizedUint {
        bits: uint;
        size: uint;
    },
    Basic {
        name: string;
        size: uint;
        is_primitive: bool;
    },
    Rawptr: uint,
    Pointer {
        inner: Type;
        is_managed: bool;
        size: uint;
    },
    Array {
        elem_type: Type;
        count: uint;
        size: uint;
    },
    Func {
        args: []Type;
        ret_type: Type;
        size: uint;
    };

    pub func size(self) -> uint {
        return match self is {
            .SizedInt as int -> int.size,
            .SizedUint as uint -> uint.size,
            .Basic as basic -> basic.size,
            .Rawptr as size -> size,
            .Pointer as ptr -> ptr.size,
            .Array as arr -> arr.size,
            .Func as func_ -> func_.size,
            .Void, .Never -> process.panic("codegen.mir.Type.size(): `void` or `never` type")
        };
    }

    pub func to_string(self) -> string {
        return match self is {
            .Void -> "void",
            .Never -> "never",
            .SizedInt as int -> "int{}".fmt(int.bits),
            .SizedUint as uint -> "uint{}".fmt(uint.bits),
            .Basic as basic -> if basic.is_primitive {
                basic.name
            } else {
                "@".concat(basic.name)
            },
            .Rawptr -> "rawptr",
            .Pointer as ptr -> if ptr.is_managed {
                "^"
            } else {
                "*"
            }.concat(ptr.inner.to_string()),
            .Array as arr -> "[{}]{}".fmt(arr.count, arr.elem_type),
            .Func as fn -> {
                mut sb := strings.Builder.from_string("*func(");
                for i, arg in fn.args {
                    sb.write_string(arg.to_string());
                    if i < fn.args.len - 1 {
                        sb.write_string(", ");
                    }
                }
                sb.write_fmt(") -> {}", fn.ret_type);
                sb.to_string()
            }
        };
    }
}
