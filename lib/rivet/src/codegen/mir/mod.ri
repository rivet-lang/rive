// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/fs;
import std/traits;
import std/strings;

import ../../utils;

[boxed]
public struct ModuleIR : traits.Stringable {
    public name: string;
    public mut structs: []Struct;
    public mut globals: []Global;
    public mut vtables: []VTable;
    public mut externs: []Func;
    public mut funcs: []Func;

    [inline]
    public func to_file(self) ! {
        fs.write_file("{}.mir".fmt(self.name), self.to_string())!;
    }

    public func to_string(self) string {
        mut sb := strings.Builder.new();
        sb.writeln_fmt("// Rivet Intermediate Representation for module `{}`.", self.name);
        sb.writeln_fmt("// Auto-generated by {}.\n//", utils.full_version());
        sb.writeln("// WARNING: This output format is intended for human consumers only");
        sb.writeln("// and is subject to change without notice. Knock yourself out.");
        sb.writeln();
        for global in self.globals {
            sb.writeln(global.to_string());
        }
        sb.writeln();
        for extern_ in self.externs {
            sb.writeln(extern_.to_string());
        }
        sb.writeln();
        for func_ in self.funcs {
            sb.writeln(func_.to_string());
        }
        return sb.to_string().trim_space();
    }
}

[boxed]
public struct Struct {
    public name: string;
    public fields: [](string, Type);
    public is_opaque: bool;
}

[boxed]
public struct Global : traits.Stringable {
    public name: string;
    public type: Type;
    public fields: []Var;

    public func to_string(self) string {
        mut sb := strings.Builder.new();
        sb.write_fmt("var @{}: {};", self.name, self.type);
        return sb.to_string();
    }
}

[boxed]
public struct VTable {
    public funcs: []Func;
}

[boxed]
public struct Func : traits.Stringable {
    public name: string;
    public mut args_len: usize;
    public ret_type: Type;
    public is_variadic: bool;
    public is_extern: bool;
    public mut locals: []Var;
    public mut blocks: []Block;

    public func make_tmp(mut self, type: Type) Var {
        tmp := Var(self.locals.len, level: .Temporal, type: type);
        self.locals.push(tmp);
        return tmp;
    }

    public func add_arg(mut self, mut arg: Var) {
        self.add_local(arg);
        self.args_len = self.locals.len;
    }

    public func add_local(mut self, mut local: Var) {
        local.id = self.locals.len;
        self.locals.push(local);
    }

    public func add_block(mut self, mut block: Block) {
        block.id = self.blocks.len;
        self.blocks.push(block);
    }

    public func to_string(self) string {
        mut sb := strings.Builder.new();
        if self.is_extern {
            sb.write_string("extern ");
        }
        sb.write_string("func @{}(".fmt(self.name));
        for i, arg in self.locals[..self.args_len] {
            sb.write_fmt("%_{}_: {}", arg.id, arg.type);
            if i < self.args_len - 1 {
                sb.write_string(", ");
            }
        }
        sb.write_fmt(") {}", self.ret_type);
        if self.is_extern {
            sb.write_string(";");
        } else {
            sb.writeln(" {");
            if self.blocks.len > 0 {
                locals := self.locals[self.args_len..];
                for local in locals {
                    sb.writeln_fmt("    var %_{}_: {};", local.id, local.type);
                }
                if self.blocks.len > 0 {
                    if locals.len > 0 {
                        sb.writeln();
                    }
                    for block in self.blocks {
                        sb.writeln_fmt("    {}", block);
                    }
                }
            }
            if self.locals.len > 0 {
                if self.blocks.len > 0 {
                    sb.writeln();
                }
                sb.writeln("    scope {");
                for local in self.locals {
                    sb.writeln_fmt("        %_{}_ => {};", local.id, local.dbg_name);
                }
                sb.writeln("    }");
            }
            sb.writeln("}");
        }
        return sb.to_string();
    }
}

public enum VarLevel {
    Argument,
    Local,
    Temporal
}

[boxed]
public struct Var {
    public mut id: usize;
    public dbg_name: string;
    public level: VarLevel;
    public type: Type;
    public mut is_none: bool;
    public mut is_moved: bool;
    public mut is_dropped: bool;
    public mut has_value: bool;
    public mut value: Expr; // comptime value
    public fields: []Var;

    public func get_field(self, name: string) ?Var {
        for field in self.fields {
            if field.dbg_name == name {
                return field;
            }
        }
        return none;
    }

    public func get_field_by_id(self, id: usize) ?Var {
        for field in self.fields {
            if field.id == id {
                return field;
            }
        }
        return none;
    }
}
