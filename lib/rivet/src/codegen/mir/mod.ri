// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/fs;
import std/traits;
import std/strings;

import ../../utils;

[boxed]
public struct ModuleIR : traits.Stringable {
    public name: string;
    public mut structs: []Struct;
    public mut globals: []Global;
    public mut vtables: []VTable;
    public mut funcs: []Func;

    [inline]
    public func to_file(self) ! {
        fs.write_file("{}.mir".fmt(self.name), self.to_string())!;
    }

    public func to_string(self) string {
        mut sb := strings.Builder.new();
        sb.writeln_fmt("// Rivet Intermediate Representation for module `{}`.", self.name);
        sb.writeln_fmt("// Auto-generated by {}.\n//", utils.full_version());
        sb.writeln("// WARNING: This output format is intended for human consumers only");
        sb.writeln("// and is subject to change without notice. Knock yourself out.");
        sb.writeln();
        for func_ in self.funcs {
            sb.writeln(func_.to_string());
        }
        return sb.to_string();
    }
}

[boxed]
public struct Struct {
    public name: string;
    public fields: [](string, Type);
    public is_opaque: bool;
}

[boxed]
public struct Global {
    public name: string;
    public type: Type;
}

[boxed]
public struct VTable {
    public funcs: []Func;
}

[boxed]
public struct Func : traits.Stringable {
    public name: string;
    public args_len: usize;
    public ret_type: Type;
    public is_variadic: bool;
    public locals: []Var;
    public blocks: []Block;

    public func to_string(self) string {
        mut sb := strings.Builder.from_string("func {}(".fmt(self.name));
        mut i: usize := 0;
        while i < self.args_len : i += 1 {
            arg := self.locals[i];
            sb.write_fmt("{}: {}", arg.dbg_name, arg.type);
            if i < self.args_len - 1 {
                sb.write_string(", ");
            }
        }
        sb.write_fmt(") {} {{", self.ret_type);
        for block in self.blocks {
            sb.writeln_fmt("    {}", block);
        }
        sb.writeln("}");
        return sb.to_string();
    }
}

public enum VarLevel {
    Global,
    Argument,
    Local
}

public struct Var {
    public name: string;
    public dbg_name: string;
    public level: VarLevel;
    public type: Type;
}
