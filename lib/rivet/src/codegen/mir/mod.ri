// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/fs;
import std/traits;
import std/strings;

import ../../utils;

#[boxed]
pub struct ModuleIR < traits.Stringable {
    pub name: string;
    pub mut structs: []Struct;
    pub mut globals: []Global;
    pub mut vtables: []VTable;
    pub mut externs: []Func;
    pub mut funcs: []Func;

    #[inline]
    pub func to_file(self) -> ! {
        fs.write_file("{}.mir".fmt(self.name), self.to_string())!;
    }

    pub func to_string(self) -> string {
        mut sb := strings.Builder.new();
        sb.writeln_fmt("// Rivet Intermediate Representation for module `{}`.", self.name);
        sb.writeln_fmt("// Auto-generated by {}.", utils.full_version());
        sb.writeln();
        sb.writeln("// WARNING: This output format is intended for human consumers only");
        sb.writeln("// and is subject to change without notice. Knock yourself out.");
        sb.writeln();
        if self.structs.len > 0 {
            for struct_ in self.structs {
                sb.writeln(struct_.to_string());
            }
            sb.writeln();
        }
        if self.globals.len > 0 {
            for global in self.globals {
                sb.writeln(global.to_string());
            }
            sb.writeln();
        }
        if self.externs.len > 0 {
            for extern_ in self.externs {
                sb.writeln(extern_.to_string());
            }
            sb.writeln();
        }
        if self.funcs.len > 0 {
            for func_ in self.funcs {
                sb.writeln(func_.to_string());
            }
        }
        return sb.to_string();
    }
}

#[boxed]
pub struct Field {
    pub name: string;
    pub type: Type;
}

#[boxed]
pub struct Struct < traits.Stringable {
    pub name: string;
    pub fields: []Field;
    pub is_opaque: bool;

    pub func to_string(self) -> string {
        mut sb := strings.Builder.new();
        sb.write_fmt("struct @{}", self.name);
        if self.is_opaque {
            sb.write_string(";");
        } else {
            sb.writeln(" {");
            for i, field in self.fields {
                sb.write_fmt("    %{}: {}", field.name, field.type);
                if i < self.fields.len - 1 {
                    sb.writeln(",");
                } else {
                    sb.writeln();
                }
            }
            sb.writeln("}");
        }
        return sb.to_string();
    }
}

#[boxed]
pub struct Global < traits.Stringable {
    pub is_extern: bool;
    pub name: string;
    pub type: Type;
    pub fields: []Var;

    pub func to_string(self) -> string {
        mut sb := strings.Builder.new();
        if self.is_extern {
            sb.write_string("extern ");
        }
        sb.write_fmt("var @{}: {};", self.name, self.type);
        return sb.to_string();
    }
}

#[boxed]
pub struct VTable {
    pub funcs: []Func;
}

#[boxed]
pub struct Func < traits.Stringable {
    pub name: string;
    pub mut args_len: uint;
    pub ret_type: Type;
    pub is_variadic: bool;
    pub is_extern: bool;
    pub mut locals: []Var;
    pub mut blocks: []Block;
    pub mut cur_block: Block;

    pub func make_tmp(mut self, type: Type) -> Var {
        tmp := Var(self.locals.len, level: .Temporal, type: type);
        self.locals.push(tmp);
        return tmp;
    }

    pub func add_local(mut self, mut local: Var) {
        local.id = self.locals.len;
        self.locals.push(local);
    }

    pub func get_local(self, name: string) -> ?Var {
        for local in self.locals {
            if local.dbg_name == name {
                return local;
            }
        }
        return none;
    }

    pub func has_local(self, name: string) -> bool {
        return self.get_local(name) != none;
    }

    pub func add_block(mut self, mut block: Block) {
        block.id = self.blocks.len;
        self.blocks.push(block);
    }

    pub func to_string(self) -> string {
        mut sb := strings.Builder.new();
        if self.is_extern {
            sb.write_string("extern ");
        }
        sb.write_string("func @{}(".fmt(self.name));
        for i, arg in self.locals[:self.args_len] {
            sb.write_fmt("%{}: {}", arg.dbg_name, arg.type);
            if i < self.args_len - 1 {
                sb.write_string(", ");
            }
        }
        sb.write_fmt(") -> {}", self.ret_type);
        if self.is_extern {
            sb.write_string(";");
        } else {
            sb.writeln(" {");
            if self.blocks.len > 0 {
                locals := self.locals[self.args_len:];
                for local in locals {
                    sb.writeln_fmt("    var %{}: {};", local.dbg_name, local.type);
                }
                if self.blocks.len > 0 {
                    if locals.len > 0 {
                        sb.writeln();
                    }
                    for i, block in self.blocks {
                        sb.writeln_fmt("    {}", block);
                        if i < self.blocks.len - 1 {
                            sb.writeln();
                        }
                    }
                }
            }
            sb.writeln("}");
        }
        return sb.to_string();
    }
}

pub enum VarLevel {
    Argument,
    Local,
    Temporal
}

#[boxed]
pub struct Var {
    pub mut id: uint;
    pub dbg_name: string;
    pub level: VarLevel;
    pub type: Type;
    pub mut value: ?Expr; // comptime value
    pub mut is_moved: bool;
    pub mut is_dropped: bool;
    pub mut is_initialized: bool;
    pub mut fields: []mut Var;

    pub func set_field(mut self, name: string, value: Expr) {
        for mut field in self.fields {
            if field.dbg_name == name {
                field.value = value;
                break;
            }
        }
    }

    pub func get_field(self, name: string) -> ?Var {
        for field in self.fields {
            if field.dbg_name == name {
                return field;
            }
        }
        return none;
    }

    pub func get_field_by_id(self, id: uint) -> ?Var {
        for field in self.fields {
            if field.id == id {
                return field;
            }
        }
        return none;
    }
}
