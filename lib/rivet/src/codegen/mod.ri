// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/strings;

import ./mir;
import ../ast;
import ../utils;
import ../utils/maps;

#[boxed]
pub struct Codegen {
    mut env: ast.Env;

    mut source_file: ast.SourceFile;

    mut type_symbols: []ast.TypeSym;

    mut rivet_internal: mir.ModuleIR;
    mut mirs: []mir.ModuleIR;
    mut mir: mir.ModuleIR;
    mut cur_func: mir.Func;

    mut int_t: mir.Type;
    mut uint_t: mir.Type;
    mut bool_t: mir.Type;
    mut dyn_array_t: mir.Type;
    mut throwable_t: mir.Type;

    mut generated_opt_res_types: maps.MapStringBool;
    mut generated_array_returns: maps.MapStringBool;

    mut loop_entry_label: string;
    mut loop_exit_label: string;
    mut while_continue_expr: ?mir.Expr;

    pub func generate_mirs(mut self, mut source_files: []mut ast.SourceFile) {
        self.init_types();
        self.rivet_internal = self.get_or_create_mir("rivetc.compiler.internal");
        for mut source_file in source_files {
            self.generate_mir(source_file);
        }
        if self.env.prefs.emit_mir {
            for mir_ in self.mirs {
                mir_.to_file() catch |err| utils.error(err.to_string());
            }
        }
        match self.env.prefs.target_backend {
            .C -> {}
        }
    }

    pub func generate_mir(mut self, mut source_file: ast.SourceFile) {
        self.source_file = source_file;
        self.mir = self.get_or_create_mir(source_file.mod.name);
        self.gen_decls(source_file.decls);
        if !self.source_file.mod.is_generated {
            self.source_file.mod.is_generated = true;
        }
    }

    func init_types(mut self) {
        self.int_t = if self.env.prefs.target_is_64bit {
            self.type_to_mir(self.env.int64_t)
        } else {
            self.type_to_mir(self.env.int32_t)
        };
        self.uint_t = if self.env.prefs.target_is_64bit {
            self.type_to_mir(self.env.uint64_t)
        } else {
            self.type_to_mir(self.env.uint32_t)
        };
        self.bool_t = self.type_to_mir(self.env.uint8_t);
        self.dyn_array_t = .Pointer(.Basic(
            self.mangle_symbol(self.env.dyn_array_sym),
            self.env.type_symbol_size(self.env.dyn_array_sym, true).0
        ), true);
        self.throwable_t = self.type_to_mir(self.env.throwable_t);

        for sym in self.env.universe.scope.syms {
            if sym is ast.Module {
                self.sort_type_symbols(self.get_type_symbols(sym));
            }
        }
    }

    func get_or_create_mir(mut self, name: string) -> mir.ModuleIR {
        for mir_ in self.mirs {
            if mir_.name == name {
                return mir_;
            }
        }
        new_mir := mir.ModuleIR(name);
        self.mirs.push(new_mir);
        return new_mir;
    }

    func prefix_type(self, type: ast.Type) -> string {
        mut sb := strings.Builder.new();
        match type {
            .Pointer(ptr) -> {
                mut inner := ptr.inner;
                while (inner is .Pointer(inner_ptr)) : inner = inner_ptr.inner {
                    sb.write_string("ptr_");
                    if inner_ptr.is_mut {
                        sb.write_string("mut_");
                    }
                }
                sb.write_string(self.prefix_type(ptr.inner));
            },
            .Option(opt) -> sb.write_fmt("opt_{}", self.prefix_type(opt.inner)),
            else -> {}
        }
        return sb.to_string();
    }

    func mangle_type(self, type: ast.Type) -> string {
        return match type {
            .Void -> "4void",
            .Rawptr -> "6rawptr",
            .Never -> "5never",
            .Func(func_t) -> {
                mut sb := strings.Builder.from_string("func_");
                if func_t.is_method {
                    sb.write_string("m_");
                    if func_t.self_is_ptr {
                        sb.write_string("sr_");
                    } else if func_t.self_is_mut {
                        sb.write_string("sm_");
                    }
                    sb.write_fmt("_args{}_", func_t.args.len);
                    sb.write_string(self.mangle_type(func_t.ret_type));
                }
                "{}{}".fmt(sb.len(), sb.to_string())
            },
            else -> {
                prefix_type := self.prefix_type(type);
                if mut type_sym := type.symbol() {
                    if type_sym.is_primitive() {
                        "{}{}".fmt(type_sym.name.len, type_sym.name)
                    } else {
                        mangled_name := self.mangle_symbol(type_sym, false);
                        if prefix_type.len > 0 {
                            "{}{}{}".fmt(prefix_type.len, prefix_type, mangled_name)
                        } else {
                            mangled_name
                        }
                    }
                } else {
                    "{}{}".fmt(prefix_type.len, prefix_type)
                }
            }
        };
    }

    func mangle_symbol(self, mut sym: ast.Sym, insert_r: bool := true) -> string {
        if sym.mangled_name.len > 0 {
            return sym.mangled_name;
        }
        mut sb := strings.Builder.new();
        if mut parent := sym.parent; !parent.is_universe {
            sb.write_string(self.mangle_symbol(parent));
        } else if insert_r {
            sb.write_string("_R");
        }
        match sym is {
            ast.Module -> {
                for name in sym.name.split(".") {
                    sb.write_fmt("{}{}", name.len, name);
                }
            },
            ast.TypeSym(type) -> match type.info {
                .Tuple(tuple_info) -> {
                    mut sb2 := strings.Builder.new();
                    sb2.write_string("Tuple_");
                    for i, ttype in tuple_info.types {
                        sb2.write_string(self.mangle_type(ttype));
                        if i < tuple_info.types.len - 1 {
                            sb2.write_string("_");
                        }
                    }
                    sb.write_fmt("{}{}", sb2.len(), sb2.to_string());
                },
                .String -> sb.write_string("4core6string"),
                .DynArray -> sb.write_string("4core6DynArray"),
                .Array(array_info) -> {
                    mut sb2 := strings.Builder.new();
                    sb2.write_fmt(
                        "Array_{}_{}", self.mangle_type(array_info.elem_type),
                        array_info.size
                    );
                    sb.write_fmt("{}{}", sb2.len(), sb2.to_string());
                },
                else -> sb.write_fmt("{}{}", sym.name.len, sym.name)
            },
            else -> sb.write_fmt("{}{}", sym.name.len, sym.name)
        }
        if sym is ast.Func(sym_func) {
            sb.write_byte(if sym_func.is_method { 'M' } else { 'F' });
        }
        sym.mangled_name = sb.to_string();
        return sym.mangled_name;
    }

    func add_locals(mut self, mut scope: ast.Scope) {
        for mut sym in scope.syms {
            if sym is ast.Var(mut local) {
                local.mir_name = if self.cur_func.has_local(local.name) {
                    "{}_{}".fmt(local.name, self.cur_func.locals.len)
                } else {
                    local.name
                };
                self.cur_func.add_local(mir.Var(
                    dbg_name: local.mir_name,
                    level: if local.level == .Argument { .Argument } else { .Local },
                    type: self.type_to_mir(local.type)
                ));
            }
        }
        for mut children in scope.childrens {
            self.add_locals(children);
        }
    }
}
