// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ./mir;
import ../ast;
import ../utils;
import ../depgraph;

extend Codegen {
    func get_type_symbols(mut self, root: ast.Sym) -> []ast.TypeSym {
        mut ts := []ast.TypeSym();
        for sym in root.scope.syms {
            if sym is ast.TypeSym(type_sym) && !(
                type_sym.info is .DynArray || type_sym.info is .Alias
                || type_sym.info.is_primitive()
            ) {
                ts.push(type_sym);
            }
            for ts_ in self.get_type_symbols(sym) {
                ts.push(ts_);
            }
        }
        return ts;
    }

    func sort_type_symbols(mut self, tss: []ast.TypeSym) {
        mut dg := depgraph.DepGraph.new();
        mut type_names := []string();
        for ts in tss {
            type_names.push(ts.qualname());
        }
        for ts in tss {
            mut field_deps := []string();
            match ts.info is {
                .Array(array_info) -> {
                    dep := array_info.elem_type.to_qualstring();
                    if dep in type_names {
                        field_deps.push(dep);
                    }
                },
                .DynArray(dyn_array_info) -> {
                    dep := dyn_array_info.elem_type.to_qualstring();
                    if dep in type_names {
                        field_deps.push(dep);
                    }
                },
                .Tuple(tuple_info) -> {
                    for type in tuple_info.types {
                        dep := type.to_qualstring();
                        if dep !in type_names || dep in field_deps || type is .Option {
                            continue;
                        }
                        field_deps.push(dep);
                    }
                },
                .Trait(trait_info) -> {
                    for base in trait_info.bases {
                        dep := base.qualname();
                        if dep !in type_names || dep in field_deps {
                            continue;
                        }
                        field_deps.push(dep);
                    }
                    for field in ts.fields {
                        dep := field.type.to_qualstring();
                        if dep !in type_names || dep in field_deps || field.type is .Option {
                            continue;
                        }
                        field_deps.push(dep);
                    }
                },
                .Struct(struct_info) -> {
                    for base in struct_info.bases {
                        dep := base.qualname();
                        if dep !in type_names || dep in field_deps {
                            continue;
                        }
                        field_deps.push(dep);
                    }
                    for field in ts.fields {
                        dep := field.type.to_qualstring();
                        if dep !in type_names || dep in field_deps || field.type is .Option {
                            continue;
                        }
                        field_deps.push(dep);
                    }
                },
                else -> {}
            }
            dg.add(ts.qualname(), field_deps);
        }
        dg_sorted := dg.resolve();
        if !dg_sorted.acyclic {
            utils.error(
                "rivet.codegen: the following types form a dependency cycle:\n{}",
                dg_sorted.display_cycles()
            );
        }
        for node in dg_sorted.nodes {
            for ts in tss {
                if ts.qualname() == node.name {
                    self.type_symbols.push(ts);
                }
            }
        }
    }

    func type_to_mir(mut self, type: ast.Type) -> mir.Type {
        (size, _) := self.table.type_size(type, true);
        return match type is {
            .Void -> .Void,
            .Never -> .Never,
            .Result(result) -> {
                is_void := result.inner.is_void();
                name := "_R6Result".concat(self.mangle_type(result.inner));
                if !self.generated_opt_res_types.contains(name) {
                    mut fields := []mir.Field();
                    if !is_void {
                        fields.push(mir.Field("value", self.type_to_mir(result.inner)));
                    }
                    fields.push(mir.Field("is_err", self.bool_t));
                    fields.push(mir.Field("err", self.throwable_t));
                    self.rivet_internal.structs.push(mir.Struct(name, fields));
                    self.generated_opt_res_types.set(name, true);
                }
                .Basic(name, self.throwable_t.size() + 4 + if is_void { 0 } else { size })
            },
            .Option(option) -> {
                if option.inner.is_any_kind_of_pointer() {
                    self.type_to_mir(option.inner)
                } else {
                    is_void := option.inner.is_void();
                    name := "_R6Option".concat(self.mangle_type(result.inner));
                    if !self.generated_opt_res_types.contains(name) {
                        mut fields := []mir.Field();
                        if !is_void {
                            fields.push(mir.Field("value", self.type_to_mir(option.inner)));
                        }
                        fields.push(mir.Field("is_none", self.bool_t));
                        self.rivet_internal.structs.push(mir.Struct(name, fields));
                        self.generated_opt_res_types.set(name, true);
                    }
                    .Basic(name, 4 + if is_void { 0 } else { size })
                }
            },
            .Array(array_t) -> .Array(
                self.type_to_mir(array_t.inner), array_t.size_value, size
            ),
            .DynArray -> self.dyn_array_t,
            .Rawptr -> .Rawptr(self.table.pointer_size),
            .Pointer(ptr_t) -> .Pointer(
                self.type_to_mir(ptr_t.inner), size: self.table.pointer_size
            ),
            else -> {
                if self.table.is_int(type) {
                    bits := self.table.int_bits(type);
                    if self.table.is_signed_int(type) {
                        .SizedInt(bits, size)
                    } else {
                        .SizedUint(bits, size)
                    }
                } else if mut type_sym := type.symbol() {
                    if type_sym.is_primitive() {
                        return .Basic(type_sym.name, size, true);
                    }
                    match type_sym.info is {
                        .Func(func_info) -> {
                            mut args := []mir.Type();
                            for arg in func_info.args {
                                args.push(self.type_to_mir(arg.type));
                            }
                            .Func(args, self.type_to_mir(func_info.ret_type), size)
                        },
                        .Enum(enum_info) if !enum_info.is_tagged -> self.type_to_mir(
                            enum_info.underlying_type
                        ),
                        .Array(array_info) -> .Array(
                            self.type_to_mir(array_info.elem_type), array_info.size, size
                        ),
                        else -> {
                            mut res := mir.Type.Basic(self.mangle_symbol(type_sym), size);
                            if type_sym.is_boxed() {
                                res = .Pointer(res, true, self.table.pointer_size)
                            }
                            res
                        }
                    }
                } else {
                    .Void
                }
            }
        };
    }
}
