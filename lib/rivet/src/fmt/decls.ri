// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../ast;
import ../token;

extend Formatter {
    func format_decls(mut self, decls: []ast.Decl, is_root: bool := false) {
        mut prev_decl := if decls.len > 0 {
            decls[0]
        } else {
            .Empty(token.noPos)
        };
        if !is_root {
            self.indent += 1;
        }
        for decl in decls {
            if self.should_insert_newline_before_node(.Decl(decl), .Decl(prev_decl)) {
                self.writeln();
            }
            self.format_decl(decl);
            prev_decl = decl;
        }
        if !is_root {
            self.indent -= 1;
        }
    }

    func format_decl(mut self, decl: ast.Decl) {
        match decl is {
            .Comment as comment -> self.format_comment(comment, has_nl: true),
            .Extern as extern_d -> {
                self.write_fmt("extern ({}) {{", extern_d.abi);
                self.format_decls(extern_d.decls);
                self.writeln("}");
            },
            .Alias as alias_d -> {
                self.format_comments(alias_d.docs);
                self.format_attributes(alias_d.attributes);
                if alias_d.is_public {
                    self.write("pub ");
                }
                self.write_fmt("alias {} := ", alias_d.name);
                if alias_d.is_typealias {
                    self.write_fmt("{}", alias_d.parent_type);
                } else {
                    self.format_expr(alias_d.parent);
                }
                self.writeln(";");
            },
            .Struct as struct_decl -> self.format_struct(struct_decl),
            .Func as func_decl -> self.format_func(func_decl),
            .Field as field -> {
                self.format_comments(field.docs);
                self.format_attributes(field.attributes);
                if field.is_public {
                    self.write("pub ");
                }
                if field.is_mut {
                    self.write("mut ");
                }
                self.write_fmt("{}: {}", field.name, field.type);
                if field.has_def_expr {
                    self.write(" := ");
                    self.format_expr(field.def_expr);
                }
                self.writeln(";");
            },
            else -> {}
        }
    }

    func format_struct(mut self, struct_decl: ast.Decl.Struct) {
        self.format_comments(struct_decl.docs);
        self.format_attributes(struct_decl.attributes);
        if struct_decl.is_public {
            self.write("pub ");
        }
        self.write_fmt("struct {}", struct_decl.name);
        if struct_decl.is_opaque {
            self.writeln(";");
        } else {
            self.writeln(" {");
            self.format_decls(struct_decl.decls);
            self.writeln("}");
        }
    }

    func format_func(mut self, func_decl: ast.Decl.Func) {
        self.format_comments(func_decl.docs);
        self.format_attributes(func_decl.attributes);
        if func_decl.is_public {
            self.write("pub ");
        }
        self.write_fmt("func {}(", func_decl.name);
        if func_decl.is_method {
            if func_decl.self_is_ptr {
                self.write("&");
            }
            if func_decl.self_is_mut {
                self.write("mut ");
            }
            self.write("self");
            if func_decl.args.len > 0 {
                self.write(", ");
            }
        }
        for i, arg in func_decl.args {
            if arg.is_mut {
                self.write("mut ");
            }
            self.write_fmt("{}: {}", arg.name, arg.type);
            if arg.has_def_expr {
                self.write(" := ");
                self.format_expr(arg.def_expr);
            }
            if i < func_decl.args.len - 1 {
                self.write(", ");
            }
        }
        self.write(")");
        if func_decl.ret_type !is .Void {
            self.write_fmt(" -> {}", func_decl.ret_type);
        }
        if func_decl.is_extern or !func_decl.has_body {
            self.writeln(";");
        } else {
            self.writeln(" {");
            self.format_stmts(func_decl.stmts);
            self.writeln("}");
        }
    }
}
