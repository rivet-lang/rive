// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/strings;
import std/console;

import ../ast;
import ../utils;
import ../prefs;

static maxLen: []uint := [0, 35, 60, 85, 93, 100];

#[boxed]
public struct Formatter {
    prefs: prefs.Prefs;
    table: ast.Table;

    mut source_file: ast.SourceFile;
    mut imports_output: strings.Builder := strings.Builder.new(100);
    mut output: strings.Builder := strings.Builder.new(1000);

    write_to_file: bool;
    mut indent: uint;
    mut line_len: uint;
    mut empty_line: bool;

    public func format(mut self, source_file: ast.SourceFile) -> string {
        self.source_file = source_file;
        self.format_decls(source_file.decls, is_root: true);
        return self.output.to_string();
    }

    func write(mut self, s: string) {
        if self.indent > 0 and self.empty_line {
            self.write_indent();
        }
        self.output.write_string(s);
        self.line_len += s.len;
        self.empty_line = false;
    }

    #[inline]
    func write_fmt(mut self, s: string, args: ...traits.Stringable) {
        self.write(s.fmt(args));
    }

    func writeln(mut self, s: string := "") {
        if self.indent > 0 and self.empty_line and s.len > 0 {
            self.write_indent();
        }
        self.output.writeln(s);
        self.empty_line = true;
        self.line_len = 0;
    }

    #[inline]
    func writeln_fmt(mut self, s: string, args: ...traits.Stringable) {
        self.writeln(s.fmt(args));
    }

    func write_indent(mut self) {
        self.output.write_string(utils.tabs(self.indent));
        self.line_len += self.indent * 4;
    }

    func wrap_long_line(mut self, penalty_idx: uint, add_indent: bool) -> bool {
        if penalty_idx > 0 and self.line_len <= maxLen[penalty_idx] {
            return false;
        }
        if self.output.last_byte() == b' ' {
            self.output.go_back(1);
        }
        self.write("\n");
        self.line_len = 0;
        if add_indent {
            self.indent += 1;
        }
        self.write_indent();
        if add_indent {
            self.indent -= 1;
        }
        return true;
    }

    // when the removal action actually occurs, the string of the last line after
    // the removal is returned
    func remove_new_line(mut self, imports_output: bool := false) -> string {
        mut buffer := if imports_output { self.imports_output } else { self.output };
        buffer_len := if buffer.len() > 0 { buffer.len() - 1 } else { 0 };
        mut i := buffer_len;
        while i >= 0 : i -= 1 {
            if !buffer.byte_at(i).is_space() {
                break;
            }
            if i == 0 {
                break;
            }
        }
        if i == buffer_len {
            return "";
        }
        buffer.go_back(if i > 0 { i - 1 } else { buffer.len() - i - 1 });
        self.empty_line = false;
        mut line_len: uint := 0;
        mut last_line_str := @vec(uint8);
        i = if buffer.len() > 0 { buffer.len() - 1 } else { 0 };
        while i >= 0 : i -= 1 {
            ch := buffer.byte_at(i);
            if ch == b'\n' {
                break;
            }
            line_len += if ch == b'\t' { 4 } else { 1 };
            last_line_str.push(ch);
            if i == 0 {
                break;
            }
        }
        self.line_len = line_len;
        return string.from_bytes(reverse(last_line_str));
    }

    func should_insert_newline_before_node(self, node: ast.Node, prev_node: ast.Node) -> bool {
        // no need to insert a newline if there is already one
        if self.output.last_n(2) == "\n\n" {
            return false;
        }
        prev_line_nr := prev_node.position().end_line;
        // the nodes are declarations
        if node is .Decl as decl and prev_node is .Decl as prev_decl {
            match prev_decl is {
                // Force a newline after function declarations
                // The only exception is inside a block of no body functions
                .Func as func_decl if decl !is .Func or !func_decl.has_body -> return true,
                .Struct -> return true, // Force a newline after struct declarations
                .Alias -> return prev_decl is .Alias,
                .Field as prev_field_d -> return if decl is .Field as field_d {
                    field_d.pos.line - prev_field_d.pos.line == 2
                } else {
                    false
                },
                .Import -> return false,
                else -> {}
            }
        }
        return if node.position().line - prev_line_nr <= 1 {
            false
        } else {
            true
        };
    }
}

func reverse(buf: []uint8) -> []uint8 {
    mut reversed := @vec(uint8);
    mut i := buf.len - 1;
    while i >= 0 : i -= 1 {
        reversed.push(buf[i]);
        if i == 0 {
            break;
        }
    }
    return reversed;
}
