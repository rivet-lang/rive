// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/strings;

import ../ast;
import ../prefs;

static maxLen: []uint := [0, 35, 60, 85, 93, 100];

public struct Formatter {
    prefs: prefs.Prefs;
    table: ast.Table;

    mut source_file: ast.SourceFile;
    mut imports_output: strings.Builder := strings.Builder.new(100);
    mut output: strings.Builder := strings.Builder.new(1000);

    write_to_file: bool;
    mut indent: uint;
    mut line_len: uint;
    mut empty_line: bool;

    public func fmt(mut self, source_file: ast.SourceFile) -> string {
        self.source_file = source_file;
        self.format_decls(source_file.decls);
        return self.output.to_string();
    }

    func write(mut self, s: string) {
        if self.indent > 0 and self.empty_line {
            self.write_indent();
        }
        self.output.write_string(s);
        self.line_len += s.len;
        self.empty_line = false;
    }

    func writeln(mut self, s: string := "") {
        if self.indent > 0 and self.empty_line and s.len > 0 {
            self.write_indent();
        }
        self.output.writeln(s);
        self.empty_line = true;
        self.line_len = 0;
    }

    func write_indent(mut self) {
        self.output.write_string("\t".repeat(self.indent));
        self.line_len += self.indent * 4;
    }

    func wrap_long_line(mut self, penalty_idx: uint, add_indent: bool) -> bool {
        if penalty_idx > 0 and self.line_len <= maxLen[penalty_idx] {
            return false;
        }
        if self.output.last_byte()? == b' ' {
            self.output.go_back(1);
        }
        self.write("\n");
        self.line_len = 0;
        if add_indent {
            self.indent += 1;
        }
        self.write_indent();
        if add_indent {
            self.indent -= 1;
        }
        return true;
    }

    // when the removal action actually occurs, the string of the last line after
    // the removal is returned
    func remove_new_line(mut self, imports_output: bool := false) -> string {
        mut buffer := if imports_output {
            self.imports_output
        } else {
            self.output
        };
        mut i := buffer.len() - 1;
        while i >= 0 : i -= 1 {
            if !buffer.byte_at(i)?.is_space() {
                break;
            }
        }
        buffer.go_back(buffer.len() - i - 1);
        self.empty_line = false;
        mut line_len: uint := 0;
        mut last_line_str := @vec(uint8);
        i = buffer.len() - 1;
        while i >= 0 : i -= 1 {
            ch := buffer.byte_at(i)?;
            if ch == b'\n' {
                break;
            }
            line_len += if ch == b'\t' { 4 } else { 1 };
            last_line_str.push(ch);
        }
        self.line_len = line_len;
        return string.from_bytes(reverse(last_line_str));
    }
}

func reverse(buf: []uint8) -> []uint8 {
    mut reversed := @vec(uint8);
    mut i := buf.len;
    while i >= 0 : i -= 1 {
        reversed.push(buf[i]);
    }
    return reversed;
}
