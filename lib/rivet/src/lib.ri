// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/env;
import std/fs;
import std/fs/path;
import std/console;
import std/process;

import ./ast;
import ./utils;
import ./prefs;
import ./report;
import ./parser;
import ./token;
import ./depgraph;

[boxed]
public struct Compiler {
    public mut table: ast.Table;
    public mut prefs: prefs.Prefs;
    public mut source_files: []string;

    public func new(args: []string, is_test: bool, run_output: bool) ! {
        prefs_ := prefs.Prefs.new(args, is_test, run_output).!;
        report.Report_Table.prefs = prefs_;
        Self(table: ast.Table.new(prefs_), prefs: prefs_).run().!;
    }

    func run(mut self) ! {
        self.make_rivet_directory().!;
        self.load_module("core", "core", "", token.NO_POS).!;
        self.load_root_module().!;
        self.import_modules().!;
    }

    func make_rivet_directory(self) ! {
        if !path.exists(prefs.RIVET_DIR) {
            self.vlog("making Rivet directory");
            fs.make_directory(prefs.RIVET_DIR).!;
            fs.make_directory(prefs.OBJ_DIR).!;
            fs.make_directory(prefs.LIB_DIR).!;
        }
    }

    func load_root_module(mut self) ! {
        files := if path.is_directory(self.prefs.input) {
            mut filtered_files := self.table.filter_files(
                fs.walk_directory(self.prefs.input, ".ri").!
            );
            src_dir := path.join(self.prefs.input, "src").!;
            if path.is_directory(src_dir) { // support `src/` directory
                for file in self.table.filter_files(fs.walk_directory(src_dir, ".ri").!) {
                    filtered_files.push(file);
                }
            }
            filtered_files
        } else {
            [self.prefs.input]
        };
        if files.is_empty() {
            utils.error("no input received");
        } else if self.prefs.is_verbose {
            self.vlog("Compiler.load_root_module(): loaded root module files:");
            for file in files {
                self.vlog("   > {}", file);
            }
        }
        root_sym := ast.Module(name: self.prefs.mod_name, is_root: true);
        self.table.universe.scope.add(root_sym) catch |err| utils.error(
            "Compiler.load_root_module(): {}", err
        );
        self.parse_files(root_sym, files);
    }

    func import_modules(mut self) ! {
        for sf in self.table.source_files {
            for d in sf.decls {
                if d is .Import as mut import_decl {
                    self.load_module(
                        import_decl.path, import_decl.alias_name, sf.file,
                        import_decl.path_pos
                    ).!;
                }
            }
        }
        self.vlog("loaded modules...");
        self.resolve_deps();
        if report.total_errors() > 0 {
            self.abort();
        }
    }

    func load_module(
        mut self, pathx: string, alias_name: string, file_path: string, pos: token.Pos
    ) ! {
        mod := self.load_module_files(pathx, alias_name, file_path, pos).!;
        if mod.found and !self.table.universe.scope.exists(mod.full_name) {
            mod_sym := ast.Module(name: mod.full_name);
            self.table.universe.scope.add(mod_sym) catch |err| {
                report.error(err.to_string(), pos)
            };
            self.parse_files(mod_sym, mod.files);
        }
    }

    func load_module_files(
        self, pathx: string, alias_name: string, file_path: string, pos: token.Pos
    ) !ast.ImportedMod {
        self.vlog("Compiler.load_module_files(): searching module `{}`", pathx);
        mut found := false;
        mut name := "";
        mut full_name := "";
        mut abspath := "";
        mut files := @vec(string);
        is_super := pathx.starts_with("../");
        if pathx.starts_with("./") or is_super {
            self.vlog("    searching module in local path");
            pathx2 := pathx[if is_super { 3 } else { 2 }..];
            name = pathx2[(pathx2.last_index_of_byte(b'/') ?? 0) + 1..];
            dirname := path.resolve(path.dirname(file_path) ?? file_path).!;
            old_wd := process.get_cwd().!;
            process.set_cwd(dirname).!;
            if path.is_directory(pathx) {
                found = true;
                abspath = path.resolve(pathx).!;
                mut mod_basedir := path.dirname(abspath) ?? abspath;
                if mod_basedir.ends_with("/src") {
                    mod_basedir = mod_basedir[..mod_basedir.len - 4]; // skip `src/`
                }
                if mod_basedir.contains("/src") and !mod_basedir.ends_with("/src") {
                    first_part := mod_basedir[..mod_basedir.last_index_of_byte(b'/') ?? 0];
                    mod_basedir = mod_basedir[..first_part.last_index_of_byte(b'/') ?? 0];
                }
                names := abspath[(mod_basedir.last_index_of_byte(b'/') ?? 0) + 1..].split(
                    "/"
                );
                if "src" in names {
                    src_idx := name.index_of("src") ?? 0;
                    full_name = utils.join(names[..src_idx], ".").concat(
                        utils.join(names[src_idx + 1..], ".")
                    );
                } else {
                    full_name = utils.join(names, ".");
                }
            }
            if found {
                self.vlog("      > found");
                files = self.table.filter_files(fs.walk_directory(pathx, ".ri").!);
            }
            process.set_cwd(old_wd).!;
        } else {
            self.vlog("    searching module in global path");
            name = pathx[(pathx.last_index_of_byte(b'/') ?? 0) + 1..];
            full_name = pathx.replace("/", ".");
            for l in self.prefs.library_path {
                self.vlog("        searching module in `{}`", l);
                mod_path := path.resolve(path.join(l, pathx).!).!;
                if path.is_directory(mod_path) {
                    found = true;
                    files = self.table.filter_files(fs.walk_directory(mod_path, ".ri").!);
                }
                // support `src/` directory
                src_dir := if pathx.count("/") > 0 {
                    slash_idx := (pathx.index_of_byte(b'/') ?? 0) + 1;
                    path.join(l, pathx[..slash_idx], "src", pathx[slash_idx..]).!
                } else {
                    path.join(mod_path, "src").!
                };
                if path.is_directory(src_dir) {
                    if !found {
                        found = true;
                    }
                    files = self.table.filter_files(fs.walk_directory(src_dir, ".ri").!);
                }
                if found {
                    self.vlog("        > found");
                    break;
                }
            }
        }
        if !found {
            report.error("module `{}` not found".fmt(pathx), pos);
        } else if files.len == 0 {
            report.error("module `{}` contains no rivet files".fmt(pathx), pos);
        } else {
            self.vlog("    module `{}` loaded", pathx);
        }
        return ast.ImportedMod(
            found: found, name: name,
            alias_name: if alias_name.len == 0 { name} else { alias_name },
            full_name: full_name,
            files: files
        );
    }

    func parse_files(mut self, mod_sym: ast.Module, files: []string) {
        for sf in parser.Parser(table: self.table, prefs: self.prefs).parse_module(
            mod_sym, files
        ) {
            self.table.source_files.push(sf);
        }
        if report.total_errors() > 0 {
            self.abort();
        }
    }

    func resolve_deps(mut self) {
        g := self.import_graph();
        g_resolved := g.resolve();
        self.vlog(
            "-----= resolved dependencies graph =-----\n".concat(g_resolved.display())
        );
        self.vlog("-----------------------------------------");
        cycles := g_resolved.display_cycles();
        if cycles.len > 1 {
            utils.error("import cycle detected between the following modules:\n{}", cycles);
        }
        self.vlog("----------= imported modules =-----------");
        for node in g_resolved.nodes {
            self.vlog(" > {}", node.name);
        }
        self.vlog("-----------------------------------------");
        source_files := self.table.source_files.clone();
        self.table.source_files = @vec(ast.SourceFile, self.source_files.len);
        for node in g_resolved.nodes {
            for pf in source_files {
                if pf.mod_sym.name == node.name {
                    self.table.source_files.push(pf);
                }
            }
        }
        self.vlog("module dependencies resolved...");
    }

    func import_graph(self) depgraph.DepGraph {
        mut g := depgraph.DepGraph.new();
        for pf in self.table.source_files {
            mut deps := @vec(string);
            if pf.mod_sym.name !in ["c.libc", "c", "core"] {
                deps.push("core");
            }
            for d in pf.decls {
                if d is .Import as import_decl {
                    if import_decl.mod_sym.name == pf.mod_sym.name {
                        report.error("import cycle detected", import_decl.pos);
                        continue;
                    }
                    if pf.mod_sym.name == "c" and import_decl.mod_sym.name == "c.libc" {
                        continue;
                    }
                    deps.push(import_decl.mod_sym.name);
                }
            }
            g.add(pf.mod_sym.name, deps);
        }
        return g;
    }

    func vlog(self, msg: string, args: ...traits.Stringable) {
        if self.prefs.is_verbose {
            console.println(utils.bold(utils.green("[rivet-log] ")).concat(msg), args);
        }
    }

    func abort(self) {
        mut msg := if report.total_errors() == 1 {
            "could not compile module `{}`, aborting due to previous error".fmt(self.prefs.mod_name)
        } else {
            "could not compile module `{}`, aborting due to {} previous errors".fmt(
                self.prefs.mod_name, report.total_errors()
            )
        };
        total_warns := report.total_warns();
        if total_warns > 0 {
            msg = msg.fmt(", {} {} emitted", total_warns, if total_warns == 1 {
                "warning"
            } else {
                "warnings"
            });
        }
        utils.error(msg);
        process.exit(1);
    }
}
