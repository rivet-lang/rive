// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../ast;

extend Parser {
    enum ComptimeLevel as uint8 {
        Decl,
        Stmt,
        Expr
    }

    proc parse_nodes(mut self, level: ComptimeLevel) -> []mut ast.Node {
        return match level {
            .Decl -> {
                mut decls := []mut ast.Node();
                if self.accept(.Lbrace) {
                    while self.tok.kind != .Rbrace {
                        decls.push(.Decl(self.parse_decl()))
                    }
                    self.expect(.Rbrace);
                } else {
                    decls.push(.Decl(self.parse_decl()))
                }
                decls
            },
            .Stmt -> {
                mut stmts := []mut ast.Node();
                if self.accept(.Lbrace) {
                    while self.tok.kind != .Rbrace {
                        stmts.push(.Stmt(self.parse_stmt()));
                    }
                    self.expect(.Rbrace);
                } else {
                    stmts.push(.Stmt(self.parse_stmt()));
                }
                stmts
            },
            .Expr -> +[.Expr(self.parse_expr())]
        };
    }

    proc parse_comptime_if(mut self, level: ComptimeLevel) -> ast.ComptimeIf {
        mut branches := []mut ast.ComptimeIfBranch();
        mut has_else := false;
        mut pos := self.tok.pos;
        while self.tok.kind in [.KwIf, .KwElse] {
            branch_pos := self.tok.pos;
            if self.accept(.KwElse) && self.tok.kind != .KwIf {
                branches.push(
                    ast.ComptimeIfBranch(
                        .Empty(self.tok.pos), nodes: self.parse_nodes(level),
                        is_else: true, pos: branch_pos + self.prev_tok.pos
                    )
                );
                has_else = true;
                break;
            }
            is_else_if := self.prev_tok.kind == .KwElse;
            self.expect(.KwIf);
            cond := self.parse_expr();
            branches.push(
                ast.ComptimeIfBranch(
                    cond, nodes: self.parse_nodes(level), is_else_if: is_else_if,
                    pos: branch_pos + self.prev_tok.pos
                )
            );
            if self.tok.kind != .KwElse {
                break;
            }
        }
        pos += self.prev_tok.pos;
        return ast.ComptimeIf(branches, has_else: has_else, pos: pos);
    }
}
