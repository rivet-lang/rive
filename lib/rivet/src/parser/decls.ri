// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/strings;

import ../ast;
import ../utils;
import ../prefs;
import ../report;
import ../token;
import ../tokenizer;

extend Parser {
    func parse_doc_comment(mut self) ast.Decl {
        pos := self.tok.pos;
        mut lines := @vec(string);
        while self.accept(.DocComment) {
            lines.push(self.prev_tok.lit);
        }
        return .DocComment(lines: lines);
    }

    public func parse_annotations(
        mut self, parse_mod_annotations: bool = false
    ) ast.Annotations {
        mut annotations := ast.Annotations();
        if parse_mod_annotations {
            self.expect(.Bang);
        }
        if self.accept(.Lbracket) {
            while {
                mut args := @vec(ast.AnnotationArgument);
                pos := self.tok.pos;
                annotation_name := if self.accept(.KwUnsafe) {
                    "unsafe"
                } else {
                    self.parse_name()
                };
                if self.accept(.Lparen) {
                    while {
                        name := if self.tok.kind == .Name and self.peek_tok.kind == .Colon {
                            n := self.parse_name();
                            self.expect(.Colon);
                            n
                        } else {
                            ""
                        };
                        args.push(ast.AnnotationArgument(name, self.parse_expr()));
                        if !self.accept(.Comma) {
                            break;
                        }
                    }
                }
                annotations.add(ast.Annotation(annotation_name, args, pos)) catch |err| {
                    report.error(err.to_string(), pos);
                };
                if !self.accept(.Semicolon) {
                    break;
                }
            }
            self.expect(.Rbracket);
        }
        return annotations;
    }

    [inline]
    func is_public(mut self) bool {
        return self.inside_trait or self.accept(.KwPublic);
    }

    func parse_abi(mut self) ast.ABI {
        self.expect(.Lparen);
        abi_pos := self.tok.pos;
        abi := self.parse_name();
        self.expect(.Rparen);
        return if abi_value := ast.ABI.from_string(abi) {
            abi_value
        } else {
            report.error("unknown ABI: `{}`".fmt(abi), abi_pos);
            .Rivet
        };
    }

    func parse_decls(mut self) []ast.Decl {
        mut decls := @vec(ast.Decl);
        while self.tok.kind != .EndOfFile {
            decls.push(self.parse_decl());
        }
        return decls;
    }

    func parse_decl(mut self) ast.Decl {
        doc_comment := self.parse_doc_comment();
        annotations := self.parse_annotations(
            self.tok.kind == .Bang and self.peek_tok.kind == .Lbracket
        );
        is_public := self.is_public();
        pos := self.tok.pos;
        switch {
            self.accept(.KwImport) => {
                mut import_list := @vec(ast.ImportListInfo);
                mut glob := false;
                if self.accept(.Lbrace) {
                    while {
                        info_pos := self.tok.pos;
                        switch {
                            self.accept(.KwSelf) => {
                                name := "self";
                                info_alias := if self.accept(.KwAs) {
                                    self.parse_name()
                                } else {
                                    name
                                };
                                import_list.push(
                                    ast.ImportListInfo(name, info_alias, info_pos)
                                );
                            },
                            self.accept(.Mul) => {
                                glob = true;
                                break;
                            },
                            else => {
                                name := self.parse_name();
                                info_alias := if self.accept(.KwAs) {
                                    self.parse_name()
                                } else {
                                    name
                                };
                                import_list.push(
                                    ast.ImportListInfo(name, info_alias, info_pos)
                                );
                            }
                        }
                        if !self.accept(.Comma) {
                            break;
                        }
                    }
                }
                mod_path := self.parse_import_path();
                alias_name := if import_list.is_empty() and self.accept(.KwAs) {
                    self.parse_name()
                } else {
                    ""
                };
                self.expect(.Semicolon);
                return .Import(
                    annotations: annotations,
                    is_public: is_public,
                    path: mod_path,
                    alias_name: alias_name,
                    glob: glob,
                    import_list: import_list,
                    pos: pos
                );
            },
            self.tok.kind != .EndOfFile => {
                report.error("expected declaration, found {}".fmt(self.tok), pos);
                self.next();
            }
        }
        return .Empty(pos);
    }

    func parse_import_path(mut self) string {
        mut sb := strings.Builder();
        if self.accept(.Dot) {
            sb.write_string("./");
            self.expect(.Div);
        } else {
            while self.accept(.DotDot) {
                sb.write_string("../");
                self.expect(.Div);
            }
        }
        sb.write_string(self.parse_name());
        while self.accept(.Div) {
            sb.write_join(["/", self.parse_name()]);
        }
        return sb.to_string();
    }
}
