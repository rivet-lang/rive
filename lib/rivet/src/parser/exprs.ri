// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ ast, report, token };

extend Parser {
    #[inline]
    func parse_expr(+mut self) -> +mut ast.Expr {
        return self.parse_or_expr();
    }

    func parse_or_expr(+mut self) -> +mut ast.Expr {
        mut left := self.parse_and_expr();
        while self.accept(.LogicalOr) {
            right := self.parse_and_expr();
            left = +mut .Binary(
                left: left,
                right: right,
                op: .LogicalOr,
                pos: left.position() + right.position()
            );
        }
        return left;
    }

    func parse_and_expr(+mut self) -> +mut ast.Expr {
        mut left := self.parse_equality_expr();
        while self.accept(.LogicalAnd) {
            right := self.parse_equality_expr();
            left = +mut .Binary(
                left: left,
                right: right,
                op: .LogicalAnd,
                pos: left.position() + right.position()
            );
        }
        return left;
    }

    func parse_equality_expr(+mut self) -> +mut ast.Expr {
        mut left := self.parse_relational_expr();
        while {
            if self.tok.kind in [.Eq, .Ne] {
                op := self.tok.kind;
                self.next();
                right := self.parse_relational_expr();
                left = +mut .Binary(
                    left: left,
                    right: right,
                    op: op,
                    pos: left.position() + right.position()
                );
            } else {
                break;
            }
        }
        return left;
    }

    func parse_relational_expr(+mut self) -> +mut ast.Expr {
        mut left := self.parse_shift_expr();
        while {
            left = match self.tok.kind {
                .Gt, .Lt, .Ge, .Le, .OrElse, .KwIn, .KwNotIn -> {
                    op := self.tok.kind;
                    self.next();
                    right := self.parse_shift_expr();
                    +mut .Binary(
                        left: left,
                        right: right,
                        op: op,
                        pos: left.position() + right.position()
                    )
                },
                .KwIs, .KwNotIs -> {
                    if self.inside_match_header && self.peek_tok.kind == .Lbrace {
                        break;
                    }
                    op := self.tok.kind;
                    self.next();
                    pos := self.tok.pos;
                    right := if self.accept(.Dot) {
                        +mut ast.Expr.EnumLiteral(
                            self.parse_name(), from_is_cmp: true,
                            pos: pos + self.prev_tok.pos
                        )
                    } else if self.accept(.KwNone) {
                        +mut .Type(+mut .None)
                    } else {
                        +mut .Type(self.parse_type())
                    };
                    if self.accept(.Lparen) {
                        val := +mut ast.Expr.Binary(
                            left: left,
                            right: right,
                            op: op,
                            has_var_obj: true,
                            var_obj: self.parse_var_decl(support_ref: true),
                            scope: self.scope,
                            pos: left.position() + self.prev_tok.pos
                        );
                        self.expect(.Rparen);
                        val
                    } else {
                        +mut .Binary(
                            left: left,
                            right: right,
                            op: op,
                            pos: left.position() + self.prev_tok.pos
                        )
                    }
                },
                else -> break
            };
        }
        return left;
    }

    func parse_shift_expr(+mut self) -> +mut ast.Expr {
        mut left := self.parse_additive_expr();
        while {
            left = match self.tok.kind {
                .Lt, .Gt -> {
                    op: token.Kind := if self.tok.kind == .Lt { .Lshift } else { .Rshift };
                    if self.tok.pos.pos + 1 == self.peek_tok.pos.pos {
                        self.advance(2);
                        right := self.parse_additive_expr();
                        +mut .Binary(
                            left: left,
                            right: right,
                            op: op,
                            pos: left.position() + right.position()
                        )
                    } else {
                        break
                    }
                },
                .Amp, .Pipe, .Xor -> {
                    op := self.tok.kind;
                    self.next();
                    right := self.parse_additive_expr();
                    +mut .Binary(
                        left: left,
                        right: right,
                        op: op,
                        pos: left.position() + right.position()
                    )
                },
                else -> break
            };
        }
        return left;
    }

    func parse_additive_expr(+mut self) -> +mut ast.Expr {
        mut left := self.parse_multiplicative_expr();
        while {
            match self.tok.kind {
                .Plus, .Minus -> {
                    if self.tok.kind == .Plus && self.prev_tok.pos.line != self.tok.pos.line {
                        break;
                    }
                    op := self.tok.kind;
                    self.next();
                    right := self.parse_multiplicative_expr();
                    left = +mut .Binary(
                        left: left,
                        right: right,
                        op: op,
                        pos: left.position() + right.position()
                    );
                },
                else -> break
            }
        }
        return left;
    }

    func parse_multiplicative_expr(+mut self) -> +mut ast.Expr {
        mut left := self.parse_unary_expr();
        while {
            match self.tok.kind {
                .Mul, .Div, .Mod -> {
                    op := self.tok.kind;
                    self.next();
                    right := self.parse_unary_expr();
                    left = +mut .Binary(
                        left: left,
                        right: right,
                        op: op,
                        pos: left.position() + right.position()
                    );
                },
                else -> break
            }
        }
        return left;
    }

    #[inline]
    func parse_unary_expr(+mut self) -> +mut ast.Expr {
        return match self.tok.kind {
            .Amp, .Bang, .BitNot, .Minus -> {
                op := self.tok.kind;
                pos := self.tok.pos;
                self.next();
                is_mut_ptr := op == .Amp && self.accept(.KwMut);
                right := self.parse_unary_expr();
                +mut .Unary(right, op, is_mut_ptr, pos + right.position())
            },
            else -> self.parse_primary_expr()
        };
    }

    func parse_primary_expr(+mut self) -> +mut ast.Expr {
        mut expr: +mut ast.Expr := match {
            self.accept(.Dollar) -> match self.tok.kind {
                .KwIf -> +mut .ComptimeIf(self.parse_comptime_if(.Expr)),
                else -> {
                    report.error("invalid comptime construction", self.tok.pos);
                    +mut .Empty(self.tok.pos)
                }
            },
            self.tok.kind in [
                .KwTrue, .KwFalse, .Char, .Number, .String,
                .KwNone, .KwSelf, .KwSelfTy
            ] -> self.parse_literal(),
            self.accept(.At) -> {
                pos := self.prev_tok.pos;
                if self.peek_token(1).kind == .Lparen { // builtin call
                    name := if self.accept(.KwAs) {
                        "as"
                    } else {
                        self.parse_name()
                    };
                    mut args := []mut ast.CallArg();
                    self.expect(.Lparen);
                    if name in ["as", "size_of", "align_of"] {
                        arg_pos := self.tok.pos;
                        args.push(
                            ast.CallArg(
                                expr: +mut .Type(self.parse_type()),
                                pos: arg_pos + self.prev_tok.pos
                            )
                        );
                        if self.tok.kind != .Rparen {
                            self.expect(.Comma);
                        }
                    }
                    if self.tok.kind != .Rparen {
                        while {
                            arg := self.parse_expr();
                            args.push(ast.CallArg(expr: arg, pos: arg.position()));
                            if !self.accept(.Comma) {
                                break;
                            }
                        }
                    }
                    self.expect(.Rparen);
                    +mut .BuiltinCall(name, args, pos + self.prev_tok.pos)
                } else {
                    self.parse_ident(true) // builtin variable
                }
            },
            self.tok.kind == .Dot && self.peek_tok.kind == .Name -> {
                pos := self.tok.pos;
                self.next();
                +mut .EnumLiteral(self.parse_name(), pos: pos + self.prev_tok.pos)
            },
            self.tok.kind in [.KwContinue, .KwBreak] -> {
                op := self.tok.kind;
                pos := self.tok.pos;
                self.next();
                +mut .LoopControl(op, pos)
            },
            self.accept(.KwReturn) -> {
                pos := self.prev_tok.pos;
                has_expr := self.tok.kind !in [.Comma, .Semicolon, .Rbrace];
                return_expr := if has_expr {
                    self.parse_expr()
                } else {
                    +mut .Empty(self.tok.pos)
                };
                +mut .Return(return_expr, has_expr, pos + return_expr.position())
            },
            self.accept(.KwThrow) -> {
                pos := self.prev_tok.pos;
                throw_expr := self.parse_expr();
                +mut .Throw(throw_expr, pos + throw_expr.position())
            },
            self.tok.kind == .KwIf -> self.parse_if_expr(),
            self.accept(.KwMatch) -> self.parse_match_expr(),
            self.tok.kind in [.KwUnsafe, .Lbrace] -> self.parse_block_expr(),
            self.tok.kind == .Lparen -> {
                mut pos := self.tok.pos;
                self.next();
                e := self.parse_expr();
                if self.accept(.Comma) { // tuple
                    mut exprs: []+mut ast.Expr := +[e];
                    while {
                        exprs.push(self.parse_expr());
                        if !self.accept(.Comma) {
                            break;
                        }
                    }
                    pos += self.tok.pos;
                    self.expect(.Rparen);
                    if exprs.len > 8 {
                        report.error("tuples can have a maximum of 8 expressions", pos);
                    }
                    +mut .TupleLiteral(exprs, pos)
                } else {
                    self.expect(.Rparen);
                    +mut .Paren(e, pos + e.position() + self.prev_tok.pos)
                }
            },
            self.tok.kind in [.Lbracket, .Plus] -> {
                mut pos := self.tok.pos;
                mut is_dyn := self.accept(.Plus);
                if self.tok.kind != .Lbracket {
                    is_mut := self.accept(.KwMut);
                    right := self.parse_expr();
                    +mut .Unary(right, .Plus, is_mut, pos + right.position())
                } else {
                    mut elems := []+mut ast.Expr();
                    self.next();
                    if self.tok.kind != .Rbracket {
                        while {
                            elems.push(self.parse_expr());
                            if !self.accept(.Comma) {
                                break;
                            }
                        }
                    }
                    self.expect(.Rbracket);
                    pos += self.prev_tok.pos;
                    if !is_dyn && (elems.len == 0 || elems.len == 1 && self.tok.kind !in [
                        .Semicolon, .Comma, .Rbrace, .Rparen
                    ]) {
                        // []T() or [SIZE]T()
                        is_dyn = elems.len == 0;
                        is_mut := self.accept(.KwMut);
                        elem_type := self.parse_type();
                        mut init_value: ?+mut ast.Expr := none;
                        mut cap_value: ?+mut ast.Expr := none;
                        mut len_value: ?+mut ast.Expr := none;
                        self.expect(.Lparen);
                        while self.tok.kind != .Rparen {
                            mut arg_pos := self.tok.pos;
                            arg_name := self.parse_name();
                            self.expect(.Colon);
                            arg_value := self.parse_expr();
                            arg_pos += self.prev_tok.pos;
                            match arg_name {
                                "init" -> if init_value == none {
                                    init_value = arg_value;
                                } else {
                                    report.error("duplicate array constructor argument `init`", arg_pos);
                                    break;
                                },
                                "len" if is_dyn -> if len_value == none {
                                    len_value = arg_value;
                                } else {
                                    report.error("duplicate array constructor argument `len`", arg_pos);
                                    break;
                                },
                                "cap" if is_dyn -> if cap_value == none {
                                    cap_value = arg_value;
                                } else {
                                    report.error("duplicate array constructor argument `cap`", arg_pos);
                                    break;
                                },
                                else -> {
                                    report.error(
                                        "unknown array constructor argument `{}`".fmt(arg_name),
                                        arg_pos
                                    );
                                    break;
                                }
                            }
                            if self.tok.kind != .Rparen {
                                self.expect(.Comma);
                            }
                        }
                        self.expect(.Rparen);
                        pos += self.prev_tok.pos;
                        if !is_dyn {
                            len_value = elems[0];
                        }
                        +mut .ArrayCtor(
                            is_dyn, is_mut, elem_type, init_value, cap_value, len_value, pos: pos
                        )
                    } else {
                        +mut .ArrayLiteral(elems, is_dyn, pos)
                    }
                }
            },
            self.tok.kind == .Name -> if self.peek_tok.kind == .Char {
                if self.tok.lit == "b" {
                    self.parse_character_literal()
                } else {
                    report.error(
                        "only `b` is recognized as a valid prefix for a character literal",
                        self.tok.pos
                    );
                    self.advance(2);
                    +mut .Empty(self.prev_tok.pos)
                }
            } else if self.peek_tok.kind == .String {
                if self.tok.lit in ["c", "b", "r"] {
                    self.parse_string_literal()
                } else {
                    report.error(
                        "only `c`, `b` and `r` are recognized as valid prefixes for a string literal",
                        self.tok.pos
                    );
                    self.advance(2);
                    +mut .Empty(self.prev_tok.pos)
                }
            } else {
                self.parse_ident()
            },
            else -> +mut .Empty(self.tok.pos)
        };
        while {
            expr = match {
                self.tok.kind.is_assign() -> {
                    // assignment
                    op := self.tok.kind;
                    pos := self.tok.pos;
                    self.expect(op);
                    right := self.parse_expr();
                    .Assign(expr, op, right, pos + right.position())
                },
                self.tok.kind == .Lparen && !self.decl_operator_is_used()
                    && (expr is .Ident || expr is .Selector || expr is .Paren
                        || expr is .SelfTy || expr is .EnumLiteral) -> {
                    self.next();
                    mut args := []mut ast.CallArg();
                    mut spread_expr := +mut ast.Expr.Empty(self.tok.pos);
                    mut has_spread_expr := false;
                    if self.tok.kind != .Rparen {
                        mut expecting_named_arg := false;
                        while {
                            if self.tok.kind == .Name && self.peek_tok.kind == .Colon {
                                // named argument
                                name := self.parse_name();
                                name_p := self.tok.pos;
                                self.expect(.Colon);
                                expr2 := self.parse_expr();
                                args.push(ast.CallArg(name, expr2, !name.is_empty(), name_p));
                                expecting_named_arg = true;
                            } else if self.accept(.Ellipsis) {
                                mut spread_pos := self.prev_tok.pos;
                                spread_expr = self.parse_expr();
                                spread_pos += spread_expr.position();
                                has_spread_expr = true;
                                if self.tok.kind == .Comma {
                                    report.error("spread expression must be the final argument", spread_pos);
                                }
                            } else {
                                if expecting_named_arg {
                                    report.error("expected named argument, found single expression", self.tok.pos);
                                }
                                expr2 := self.parse_expr();
                                args.push(ast.CallArg(expr: expr2, pos: expr2.position()));
                            }
                            if !self.accept(.Comma) {
                                break;
                            }
                        }
                    }
                    self.expect(.Rparen);
                    mut err_handler_pos := self.tok.pos;
                    mut is_propagate := false;
                    mut varname := "";
                    mut varname_pos := self.tok.pos;
                    mut has_varname := false;
                    mut err_expr := +mut ast.Expr.Empty(self.tok.pos);
                    mut has_err_expr := false;
                    if self.accept(.Bang) {
                        // check result value, if error propagate
                        is_propagate = true;
                        err_handler_pos = self.prev_tok.pos;
                    } else if self.accept(.KwCatch) {
                        if self.accept(.Pipe) {
                            has_varname = true;
                            varname_pos = self.tok.pos;
                            varname = self.parse_name();
                            self.expect(.Pipe);
                        }
                        err_expr = self.parse_expr();
                        has_err_expr = true;
                    }
                    +mut .Call(
                        left: expr,
                        args: args,
                        spread_expr: spread_expr,
                        has_spread_expr: has_spread_expr,
                        err_handler: ast.CallErrorHandler(
                            varname: varname,
                            varname_pos: varname_pos,
                            has_varname: has_varname,
                            expr: err_expr,
                            has_expr: has_err_expr,
                            is_propagate: is_propagate,
                            scope: self.scope,
                            pos: err_handler_pos
                        ),
                        pos: expr.position() + self.prev_tok.pos
                    )
                },
                self.accept(.Lbracket) -> {
                    index: +mut ast.Expr := if self.accept(.Colon) {
                        if self.tok.kind == .Rbracket {
                            +mut .Range(pos: expr.position() + self.tok.pos)
                        } else {
                            +mut .Range(
                                end: self.parse_expr(), has_end: true,
                                pos: expr.position() + self.prev_tok.pos
                            )
                        }
                    } else {
                        start := self.parse_expr();
                        if self.accept(.Colon) {
                            if self.tok.kind == .Rbracket {
                                +mut .Range(
                                    start: start, has_start: true,
                                    pos: expr.position() + self.tok.pos
                                )
                            } else {
                                end := self.parse_expr();
                                +mut .Range(
                                    start: start, end: end,
                                    has_start: true, has_end: true,
                                    pos: expr.position() + end.position()
                                )
                            }
                        } else {
                            start
                        }
                    };
                    self.expect(.Rbracket);
                    +mut .Index(
                        left: expr, index: index,
                        pos: expr.position() + self.prev_tok.pos
                    )
                },
                // avoid `expr` + `.EnumLiteral` concatenation
                self.prev_tok.pos.line != self.tok.pos.line && self.tok.kind == .Dot
                && self.peek_tok.kind == .Name && self.peek_tok.lit[0].is_upper() -> break,
                self.accept(.Dot) -> if self.accept(.Mul) || self.accept(.Plus) {
                    +mut .Indirect(
                        left: expr,
                        is_boxed: self.prev_tok.kind == .Plus,
                        pos: expr.position() + self.prev_tok.pos
                    )
                } else {
                    self.parse_selector_expr(expr)
                },
                self.accept(.Question) -> {
                    // check option value, panic if is `none`: `x?`
                    +mut .OptionCheck(
                        left: expr,
                        pos: expr.position() + self.prev_tok.pos
                    )
                },
                else -> break
            }
        }
        return expr;
    }

    func parse_if_expr(+mut self) -> +mut ast.Expr {
        mut branches := []mut ast.IfBranch();
        mut has_else := false;
        mut pos := self.tok.pos;
        while self.tok.kind in [.KwIf, .KwElse] {
            branch_pos := self.tok.pos;
            if self.accept(.KwElse) && self.tok.kind != .KwIf {
                branches.push(
                    ast.IfBranch(
                        +mut .Empty(self.tok.pos), self.parse_block_expr(),
                        true, pos: branch_pos + self.prev_tok.pos
                    )
                );
                has_else = true;
                break;
            }
            is_else_if := self.prev_tok.kind == .KwElse;
            self.expect(.KwIf);
            cond := if self.decl_operator_is_used() {
                self.open_scope();
                self.parse_guard_expr()
            } else {
                self.parse_expr()
            };
            branches.push(
                ast.IfBranch(
                    cond, self.parse_block_expr(), is_else_if: is_else_if,
                    pos: branch_pos + self.prev_tok.pos
                )
            );
            if cond is .Guard {
                self.close_scope();
            }
            if self.tok.kind != .KwElse {
                break;
            }
        }
        pos += self.prev_tok.pos;
        return +mut .If(branches, has_else, pos);
    }

    func parse_match_expr(+mut self) -> +mut ast.Expr {
        mut has_else := false;
        mut branches := []mut ast.MatchBranch();
        pos := self.prev_tok.pos;
        old_inside_match_header := self.inside_match_header;
        self.inside_match_header = true;
        expr := if self.tok.kind == .Lbrace {
            +mut ast.Expr.BoolLiteral(true, pos)
        } else {
            if self.decl_operator_is_used() {
                self.open_scope();
                self.parse_guard_expr()
            } else {
                self.parse_expr()
            }
        };
        is_typematch := expr !is .Guard && self.prev_tok.kind != .KwMatch
            && self.accept(.KwIs);
        self.expect(.Lbrace);
        self.inside_match_header = old_inside_match_header;
        while {
            self.open_scope();
            branch_pos := self.tok.pos;
            mut patterns := []+mut ast.Expr();
            mut branch_var: ?+mut ast.ObjectData := none;
            mut has_cond := false;
            mut cond := +mut ast.Expr.Empty(self.tok.pos);
            is_else := self.accept(.KwElse);
            if is_else {
                has_else = true;
            } else {
                while {
                    if is_typematch {
                        patterns.push(+mut .Type(self.parse_type()));
                    } else {
                        mut pattern_expr := if self.accept(.Dot) {
                            name_pos := self.tok.pos;
                            +mut ast.Expr.EnumLiteral(
                                self.parse_name(), pos: name_pos + self.prev_tok.pos,
                                from_is_cmp: true
                            )
                        } else {
                            self.parse_expr()
                        };
                        if self.accept(.DotDot) || self.accept(.Ellipsis) {
                            if self.prev_tok.kind == .DotDot {
                                err := report.error_builder(
                                    "`match` only supports inclusive ranges, not exclusive",
                                    self.prev_tok.pos
                                );
                                err.add_help("use `...` instead of `..`");
                                err.emit();
                            }
                            pattern_expr = +mut .Range(
                                pattern_expr, self.parse_expr(), true, true, true,
                                pattern_expr.position() + self.prev_tok.pos
                            );
                        }
                        patterns.push(pattern_expr);
                    }
                    if !self.accept(.Comma) {
                        break;
                    }
                }
                if self.accept(.Lparen) {
                    branch_var = self.parse_var_decl(support_ref: true, support_mut: true);
                    self.expect(.Rparen);
                }
                if self.accept(.KwIf) {
                    has_cond = true;
                    cond = self.parse_expr();
                }
            }
            self.expect(.Arrow);
            branches.push(ast.MatchBranch(
                patterns: patterns,
                branch_var: branch_var,
                has_cond: has_cond,
                cond: cond,
                expr: self.parse_expr(),
                is_else: is_else,
                scope: self.scope,
                pos: branch_pos + self.prev_tok.pos
            ));
            self.close_scope();
            if !self.accept(.Comma) {
                break;
            }
        }
        if expr is .Guard {
            self.close_scope();
        }
        self.expect(.Rbrace);
        return +mut .Match(
            expr, branches, is_typematch, has_else, self.scope, pos + self.prev_tok.pos
        );
    }

    func parse_block_expr(+mut self) -> +mut ast.Expr {
        // block expression
        self.open_scope();
        sc := self.scope;
        old_inside_block := self.inside_block;
        self.inside_block = true;
        pos := self.tok.pos;
        is_unsafe := self.accept(.KwUnsafe);
        self.expect(.Lbrace);
        mut stmts := []+mut ast.Stmt();
        mut has_expr := false;
        mut expr := +mut ast.Expr.Empty(self.tok.pos);
        while !self.accept(.Rbrace) {
            stmt := self.parse_stmt();
            if stmt is .Expr(stmt_expr) && self.prev_tok.kind != .Semicolon
                && self.tok.kind == .Rbrace {
                expr = stmt_expr;
                has_expr = true;
            } else {
                stmts.push(stmt);
            }
        }
        self.close_scope();
        self.inside_block = old_inside_block;
        return +mut .Block(is_unsafe, stmts, expr, has_expr, sc, pos + self.prev_tok.pos);
    }

    func parse_guard_expr(+mut self) -> +mut ast.Expr {
        pos := self.tok.pos;
        mut vars := []+mut ast.ObjectData();
        if self.accept(.Lparen) {
            while {
                vars.push(self.parse_var_decl(support_type: false));
                if !self.accept(.Comma) {
                    break;
                }
            }
            self.expect(.Rparen);
        } else {
            vars.push(self.parse_var_decl(support_type: false));
        }
        self.expect(.DeclAssign);
        expr := self.parse_expr();
        mut has_cond := false;
        cond := if self.accept(.Semicolon) {
            has_cond = true;
            self.parse_expr()
        } else {
            +mut .Empty(self.tok.pos)
        };
        return +mut .Guard(vars, expr, has_cond, cond, self.scope, pos + self.prev_tok.pos);
    }

    #[inline]
    func parse_literal(+mut self) -> +mut ast.Expr {
        return match {
            self.tok.kind in [.KwTrue, .KwFalse] -> {
                value := self.tok.kind == .KwTrue;
                pos := self.tok.pos;
                self.next();
                +mut .BoolLiteral(value, pos)
            },
            self.tok.kind == .Char -> self.parse_character_literal(),
            self.tok.kind == .Number -> self.parse_integer_literal(),
            self.tok.kind == .String -> self.parse_string_literal(),
            self.accept(.KwNone) -> +mut .NoneLiteral(self.prev_tok.pos),
            self.accept(.KwSelf) -> +mut .SelfLiteral(self.scope, self.prev_tok.pos),
            self.accept(.KwSelfTy) -> +mut .SelfTy(self.scope, self.prev_tok.pos),
            else -> {
                report.error("expected literal, found {}".fmt(self.tok), self.tok.pos);
                +mut .Empty(self.tok.pos)
            }
        };
    }

    func parse_integer_literal(+mut self) -> +mut ast.Expr {
        value := self.tok.lit;
        pos := self.tok.pos;
        self.next();
        return if value.len > 2 && value.substr(end: 2) !in ["0x", "0o", "0b"]
            && value.index_of_any(
            ".eE"
        ) != none {
            +mut .FloatLiteral(value, pos)
        } else {
            +mut .IntegerLiteral(value, pos)
        };
    }

    func parse_character_literal(+mut self) -> +mut ast.Expr {
        is_byte := if self.accept(.Name) {
            self.prev_tok.lit == "b"
        } else {
            false
        };
        value := self.tok.lit;
        pos := self.tok.pos;
        self.expect(.Char);
        return +mut .CharLiteral(value, is_byte, pos);
    }

    func parse_string_literal(+mut self) -> +mut ast.Expr {
        mut is_raw := false;
        mut is_bytestr := false;
        mut is_cstr := false;
        mut has_prefix := false;
        mut pos := if self.accept(.Name) {
            has_prefix = true;
            is_raw = self.prev_tok.lit == "r";
            is_bytestr = self.prev_tok.lit == "b";
            is_cstr = self.prev_tok.lit == "c";
            self.prev_tok.pos
        } else {
            self.tok.pos
        };
        mut value := self.tok.lit;
        if has_prefix {
            pos += self.tok.pos;
        }
        self.expect(.String);
        while self.accept(.String) {
            value = value.concat(self.prev_tok.lit);
            pos += self.prev_tok.pos;
        }
        return +mut .StringLiteral(
            value: value,
            is_raw: is_raw,
            is_bytestr: is_bytestr,
            is_cstr: is_cstr,
            pos: pos
        );
    }

    func parse_ident(+mut self, is_comptime: bool := false) -> +mut ast.Expr {
        pos := if is_comptime {
            self.prev_tok.pos + self.tok.pos
        } else {
            self.tok.pos
        };
        return +mut .Ident(
            name: self.parse_name(),
            scope: self.scope,
            pos: pos,
            is_comptime: is_comptime
        );
    }

    #[inline]
    func parse_selector_expr(+mut self, left: +mut ast.Expr) -> +mut ast.Expr {
        field_pos := self.tok.pos;
        return +mut .Selector(
            left: left,
            field_name: if self.tok.kind == .Number {
                self.next();
                self.prev_tok.lit
            } else {
                self.parse_name()
            },
            field_pos: field_pos,
            pos: left.position() + self.prev_tok.pos
        );
    }
}
