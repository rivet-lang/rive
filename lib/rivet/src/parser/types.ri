// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../ast;
import ../report;

extend Parser {
    func parse_type(mut self) ast.Type {
        mut pos := self.tok.pos;
        return switch {
            self.accept(.Question) => .Option(
                self.parse_type(), pos + self.prev_tok.pos
            ),
            self.tok.kind == .KwFunc => {
                // function types
                self.expect(.KwFunc);
                self.expect(.Lparen);
                mut args := @vec(ast.Arg);
                if self.tok.kind != .Rparen {
                    while {
                        arg_pos := self.tok.pos;
                        is_mut := self.accept(.KwMut);
                        arg_type := self.parse_type();
                        args.push(ast.Arg(
                            name: "arg{}".fmt(args.len),
                            is_mut: is_mut,
                            type: arg_type,
                            has_def_expr: false,
                            pos: arg_pos + self.prev_tok.pos
                        ));
                        if !self.accept(.Comma) {
                            break;
                        }
                    }
                }
                self.expect(.Rparen);
                ret_type := if self.tok.kind.is_start_of_type() {
                    self.parse_type()
                } else {
                    .Void()
                };
                .Func(args: args, ret_type: ret_type, pos: pos + self.prev_tok.pos)
            },
            self.accept(.Amp) => {
                // references
                is_mut := self.accept(.KwMut);
                .Reference(self.parse_type(), is_mut, pos: pos + self.prev_tok.pos)
            },
            self.accept(.Mul) => {
                // pointers
                is_mut := self.accept(.KwMut);
                if self.tok.kind == .Mul {
                    mut err := report.error_builder("cannot declare pointer to pointer", pos + self.tok.pos);
                    err.add_help("use an indexable pointer instead (`[*]T`)");
                    err.emit();
                }
                .Pointer(self.parse_type(), is_mut, pos: pos + self.prev_tok.pos)
            },
            self.accept(.Lbracket) => {
                // arrays or vectors
                if self.tok.kind != .Rbracket {
                    // indexable pointers
                    if self.accept(.Mul) {
                        self.expect(.Rbracket);
                        is_mut := self.accept(.KwMut);
                        .Pointer(
                            self.parse_type(), is_mut, true, pos: pos + self.prev_tok.pos
                        )
                    } else {
                        // array
                        size := self.parse_expr();
                        self.expect(.Rbracket);
                        is_mut := self.accept(.KwMut);
                        .Array(self.parse_type(), is_mut, size, pos: pos + self.prev_tok.pos)
                    }
                } else {
                    self.expect(.Rbracket);
                    is_mut := self.accept(.KwMut);
                    .Vector(self.parse_type(), is_mut, pos: pos + self.prev_tok.pos)
                }
            },
            self.accept(.Lparen) => {
                // tuples
                mut inners := @vec(mut ast.Type);
                while {
                    inners.push(self.parse_type());
                    if !self.accept(.Comma) {
                        break;
                    }
                }
                if inners.len > 8 {
                    mut err := report.error_builder("tuples can have a maximum of 8 types", pos + self.tok.pos);
                    err.add_help("you can use a struct instead");
                    err.emit();
                }
                pos += self.tok.pos;
                self.expect(.Rparen);
                .Tuple(inners, pos: pos)
            },
            self.accept(.Ellipsis) => .Variadic(
                self.parse_type(), pos: pos + self.prev_tok.pos
            ),
            self.accept(.KwSelfTy) => .Basic(
                expr: ast.Expr.SelfTy(self.scope, self.prev_tok.pos),
                is_unresolved: true
            ),
            self.accept(.KwNone) => self.table.none_t,
            self.tok.kind == .Name => {
                prev_tok_kind := self.prev_tok.kind;
                mut expr := self.parse_ident();
                if self.accept(.Dot) {
                    expr = self.parse_selector_expr(expr);
                    while self.accept(.Dot) {
                        expr = self.parse_selector_expr(expr);
                    }
                    .Basic(expr: expr, is_unresolved: true)
                } else {
                    // normal type
                    expr_name := @cast(ast.Expr.Ident, expr).name;
                    expr_pos := expr.position();
                    switch expr_name {
                        "never" => {
                            if prev_tok_kind != .Rparen and self.tok.kind != .Lbrace {
                                report.error("invalid use of `never` type", pos);
                            }
                            .Never(self.prev_tok.pos)
                        },
                        "anyptr", "mut_anyptr" => .Anyptr(
                            expr_name.starts_with("mut_"), self.prev_tok.pos
                        ),
                        "bool" => .Basic(self.table.bool_sym, expr: expr),
                        "rune" => .Basic(self.table.rune_sym, expr: expr),
                        "int8" => .Basic(self.table.int8_sym, expr: expr),
                        "int16" => .Basic(self.table.int16_sym, expr: expr),
                        "int32" => .Basic(self.table.int32_sym, expr: expr),
                        "int64" => .Basic(self.table.int64_sym, expr: expr),
                        "isize" => .Basic(self.table.isize_sym, expr: expr),
                        "uint8" => .Basic(self.table.uint8_sym, expr: expr),
                        "uint16" => .Basic(self.table.uint16_sym, expr: expr),
                        "uint32" => .Basic(self.table.uint32_sym, expr: expr),
                        "uint64" => .Basic(self.table.uint64_sym, expr: expr),
                        "usize" => .Basic(self.table.usize_sym, expr: expr),
                        "float32" => .Basic(self.table.float32_sym, expr: expr),
                        "float64" => .Basic(self.table.float64_sym, expr: expr),
                        "string" => .Basic(self.table.string_sym, expr: expr),
                        "comptime_int" => .Basic(self.table.comptime_int_sym, expr: expr),
                        "comptime_float" => .Basic(self.table.comptime_float_sym, expr: expr),
                        else => .Basic(expr: expr, is_unresolved: true)
                    }
                }
            },
            else => {
                report.error("expected type, found {}".fmt(self.tok), pos);
                self.next();
                .Basic(expr: .Empty(pos), is_unresolved: true)
            }
        };
    }
}
