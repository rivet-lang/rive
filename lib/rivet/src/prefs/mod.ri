// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/fs;
import std/env;
import std/sys;
import std/console;
import std/process;
import std/fs/path;

import ../token;
import ../utils;

public var RIVET_DIR = path.join(env.HOME_DIR, ".rivet_lang")!;
public var RIVETC_DIR = path.dirname(process.executable()!)?;

public var OBJ_DIR = path.join(RIVET_DIR, "obj")!;
public var LIB_DIR = path.join(RIVET_DIR, "lib")!;
public var RIVETC_LIB_DIR = path.join(RIVETC_DIR, "lib")!;

public enum Backend as uint8 {
    C;

    public func from_string(name: string) ?Self {
        return switch name {
            "c" => .C,
            else => none
        };
    }
}

public enum OutputMode as uint8 {
    Bin
}

public enum OptimizeMode as uint8 {
	Debug,
	Release
}

public enum LinkMode as uint8 {
    Static,
    Dynamic
}

func print_help() {
    console.eprintln(utils.HELP);
    process.exit(0);
}

[boxed]
public struct Prefs {
    // Target info
    public mut target_os: sys.OS = sys.os();
    public mut target_arch: sys.Arch = sys.arch();
    public mut target_is_64bit: bool = sys.is_64bit();
    public mut target_is_little_endian: bool = sys.is_little_endian();
    public mut target_c_runtime: sys.CRuntime = sys.c_runtime();
    public mut target_backend: Backend;
    public mut target_backend_compiler: string = "cc";

    // Module info
    public mut input: string;
    public mut mod_name: string;
    public mut mod_dir: string;
    public mut mod_output: string;

    // Output info
    public mut output_mode: OutputMode;
    public mut optimize_mode: OptimizeMode;
    public mut is_test: bool;
    public mut run_output: bool;
    public mut run_output_args: []string;

    public mut library_path: []string = [RIVETC_LIB_DIR, LIB_DIR];
    public mut libraries_to_link: []string;
    public mut objects_to_link: []string;

    public mut flags: []string;
    public mut check_syntax: bool;
	public mut check: bool;
	public mut emit_rir: bool;
	public mut keep_c: bool;
	public mut is_verbose: bool;

    public func new(args: []string, is_test: bool, run_output: bool) !Self {
        prefs := Prefs(is_test: is_test, run_output: run_output);
        mut options := @vec(string);
        mut i: usize := 0;
        while i < args.len : i += 1 {
            arg := args[i];
            if arg.len > 1 and arg[0] == b'-' and arg !in ["-L", "-d", "--define"] and
                arg in options
            {
                utils.error("duplicate option: `{}`", arg);
            } else {
                options.push(arg);
            }
            current_args := args[i..];
            switch arg {
                // informative options
                "-h", "--help" => print_help(),
                "-V", "--version" => {
                    console.eprintln(utils.VERSION);
                    process.exit(0);
                },

                // compiler options
                "--mod-name" => {
                    if mod_name := utils.option(current_args, arg) {
                        prefs.mod_name = mod_name;
                        prefs.mod_output = mod_name;
                    } else {
                        utils.error("`--mod-name` requires a name as argument");
                    }
                    i += 1;
                },
                "-r", "--release" => prefs.optimize_mode = .Release,
                "-o", "--output" => {
                    if out := utils.option(current_args, arg) {
                        prefs.mod_output = out;
                    } else {
                        utils.error("`{}` requires a filename as argument", arg);
                    }
                    i += 1;
                },
                "-b", "--backend" => {
                    if b := utils.option(current_args, arg) {
                        if backend := Backend.from_string(b) {
                            prefs.target_backend = backend;
                        } else {
                            utils.error("unknown backend: `{}`", b);
                        }
                    } else {
                        utils.error("`{}` requires a name as argument", arg);
                    }
                    i += 1;
                },
                "-bc", "--backend-compiler" => {
                    if bc := utils.option(current_args, arg) {
                        prefs.target_backend_compiler = bc;
                    } else {
                        utils.error("`--backend-compiler` requires a name as argument");
                    }
                    i += 1;
                },
                "-d", "--define" => {
                    if flag := utils.option(current_args, arg) {
                        if flag.starts_with("_") and flag.ends_with("_") {
                            utils.error("flag `{}` should have a upper case name", flag);
                        } else if flag in prefs.flags {
                            utils.error("duplicate flag: `{}`", flag);
                        } else {
                            prefs.flags.push(flag);
                        }
                    } else {
                        utils.error("`{}` requires a name as argument", arg);
                    }
                    i += 1;
                },
                "-os", "--target-os" => {
                    if os_name := utils.option(current_args, arg) {
                        if os_flag := sys.OS.from_string(os_name) {
                            prefs.target_os = os_flag;
                        } else {
                            utils.error("unknown target operating system: `{}`", os_name);
                        }
                    } else {
                        utils.error("`{}` requires a name as argument", arg);
                    }
                    i += 1;
                },
                "-arch", "--target-arch" => {
                    if arch_name := utils.option(current_args, arg) {
                        if arch_flag := sys.Arch.from_string(arch_name) {
                            prefs.target_arch = arch_flag;
                        } else {
                            utils.error("unknown target architecture: `{}`", arch_name);
                        }
                    } else {
                        utils.error("`{}` requires a name as argument", arg);
                    }
                    i += 1;
                },
                "-x32", "-x64" => prefs.target_is_64bit = arg == "-x64",
                "--check-syntax" => prefs.check_syntax = true,
                "--check" => prefs.check = true,
                "--emit-rir" => prefs.emit_rir = true,
                "--keep-c" => prefs.keep_c = true,
                "-v", "--verbose" => prefs.is_verbose = true,
                else => {
                    if arg.starts_with("-") {
                        utils.error("unknown option `{}`", arg);
                    } else if !prefs.input.is_empty() {
                        utils.error("the compiler can only receive one module");
                    } else if !path.exists(arg) {
                        utils.error("`{}` does not exist", arg);
                    } else if !(path.is_directory(arg) or path.is_file(arg)) {
                        utils.error("`{}` is not a directory or file");
                    } else {
                        prefs.input = arg;
                        if prefs.mod_name.is_empty() {
                            prefs.mod_name = if path.is_file(arg) {
                                path.basename(arg).all_before_of(".ri")
                            } else {
                                path.basename(path.resolve(arg) catch arg)
                            };
                        }
                    }
                }
            }
        }

        if prefs.input.is_empty() {
            utils.error("no input received");
        }

        if prefs.is_test {
            prefs.mod_output = "_rivet_tests_runner_";
        } else if prefs.mod_output.is_empty() {
            prefs.mod_output = prefs.mod_name;
        }

        if prefs.target_os == .Windows and !prefs.mod_output.ends_with(".exe") {
            prefs.mod_output = prefs.mod_output.concat(".exe");
        }

        if !path.is_absolute(prefs.mod_output) {
            prefs.mod_output = path.join(process.get_cwd()!, prefs.mod_output)!;
        }

        prefs.mod_dir = if path.is_file(prefs.input) {
            path.dirname(path.absolute(prefs.input)!) ?? prefs.input
        } else {
            prefs.input
        };
        prefs.library_path.push(prefs.mod_dir);

        return prefs;
    }
}
