// Copyright (C) 2023-2024 Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{ env, sys, flag, process, fs.Path };

import ../utils;

pub var rivet_dir := Path.join(env.home_dir, ".rivet_lang")!;
pub var rivetc_dir := Path.dir_name(process.executable()!)?;

pub var obj_dir := Path.join(rivet_dir, "obj")!;
pub var lib_dir := Path.join(rivet_dir, "lib")!;
pub var rivetc_lib_dir := Path.join(rivetc_dir, "lib")!;

pub enum Backend as uint8 {
    C;

    pub func from_string(name: string) -> ?Self {
        return match name {
            "c" -> .C,
            else -> none
        };
    }
}

pub enum OutputMode as uint8 {
    Bin
}

pub enum OptimizeMode as uint8 {
    Debug,
    Release
}

pub enum LinkMode as uint8 {
    Static,
    Dynamic
}

#[boxed]
pub struct Prefs {
    // Target info
    pub mut target_os: sys.OS := sys.os();
    pub mut target_arch: sys.Arch := sys.arch();
    pub mut target_is_64bit: bool := sys.is_64bit();
    pub mut target_is_little_endian: bool := sys.is_little_endian();
    pub mut target_c_runtime: sys.CRuntime := sys.c_runtime();
    pub mut target_backend: Backend;
    pub mut target_backend_compiler: string := "cc";

    // Module info
    pub mut input: string;
    pub mut mod_name: string;
    pub mut mod_dir: string;
    pub mut mod_output: string;

    pub mut is_fmt: bool;
    pub mut is_docs: bool;
    pub mut is_test: bool;

    pub mut library_path: []string := ^[rivetc_lib_dir, lib_dir];
    pub mut libraries_to_link: []string;
    pub mut objects_to_link: []string;

    pub mut flags: []string;
    pub mut check: bool;
    pub mut check_syntax: bool;
    pub mut emit_mir: bool;
    pub mut keep_c: bool;
    pub mut all_warns_are_errors: bool;
    pub mut hide_all_warns: bool;
    pub mut is_verbose: bool;

    // Output info
    pub mut output_mode: OutputMode;
    pub mut optimize_mode: OptimizeMode;
    pub mut run_output: bool;
    pub mut run_output_args: []string;

    pub func from_args(args: [:]string, is_test: bool, run_output: bool, is_check: bool) -> !^mut Self {
        prefs := ^mut Self(is_test: is_test, run_output: run_output, check: is_check);
        fp := flag.FlagParser.new(args);
        fp.set_application_name(if is_test {
            "rivet test"
        } else if run_output {
            "rivet run"
        } else if is_check {
            "rivet check"
        } else {
            "rivet build"
        });
        fp.set_arguments_description("[INPUT]");

        if is_test {
            fp.set_application_short_description("Runs `test` declarations in the given [INPUT].");
        } else if run_output {
            fp.set_application_short_description("Equivalent to running `rivet build` and running the compiled executable.");
            fp.add_description("The exit status of `run` will be:");
            fp.add_description("   - `1` if the compilation failed.");
            fp.add_description("   - The exit code of the compiled executable otherwise.\n");
        } else if is_check {
            fp.set_application_short_description("Scans, parses, and checks the files without compiling.");
        }
        fp.add_description("The compiler can receive a file or a directory as [INPUT].");

        // options
        if is_check {
            if check_syntax := fp.bool_flag("syntax", 0, "Only scan and parse the module, but then stop."); check_syntax {
                prefs.check_syntax = true;
            }
        }
        if !(is_test || run_output || is_check) {
            if mod_name := fp.string_flag(
                "mod-name", 0, "Specify the name of the module being built."
            ) {
                prefs.mod_name = mod_name;
                prefs.mod_output = mod_name;
            }
            if mod_output := fp.string_flag(
                "output", 'o', "Force Rivet to output the module in a specific location
                                     (relative to the current working directory if not absolute)."
            ) {
                prefs.mod_output = mod_output;
            }
            if release := fp.bool_flag(
                "release", 'r',
                "Compile the executable in release mode, where most
                                     optimizations are enabled."
            ); release {
                prefs.optimize_mode = .Release;
            }
        }
        if define := fp.string_flag("define", 'D', "Define the provided flag.") {
            if define.starts_with("_") && define.ends_with("_") {
                utils.error(
                    "this form of declaration is reserved for the compiler: `{}`", define
                );
            } else if define in prefs.flags {
                utils.error("duplicate flag: `{}`", define);
            } else {
                prefs.flags.push(define);
            }
        }
        if !is_check {
            if libpath := fp.string_flag("", 'L', "Add a directory to the library search path.") {
                if Path.is_directory(libpath) {
                    if libpath in prefs.library_path {
                        utils.error("duplicate library path: `{}`", libpath);
                    }
                    prefs.library_path.push(libpath);
                } else {
                    utils.error("`{}` is not a directory", libpath);
                }
            }
            if os_name := fp.string_flag("os", 0, "Change the target OS that Rivet tries to compile for.") {
                if os_flag := sys.OS.from_string(os_name) {
                    prefs.target_os = os_flag;
                } else {
                    utils.error("unknown target operating system: `{}`", os_name);
                }
            }
            if arch_name := fp.string_flag("arch", 0, "Change the target architecture that Rivet tries to compile for.") {
                if arch_flag := sys.Arch.from_string(arch_name) {
                    prefs.target_arch = arch_flag;
                } else {
                    utils.error("unknown target architecture: `{}`", arch_name);
                }
            }
            if target_backend := fp.string_flag(
                "backend", 'b', "Specify the backend to use while building the module."
            ) {
                if backend := Backend.from_string(target_backend) {
                    prefs.target_backend = backend;
                } else {
                    utils.error("unknown backend: `{}`", target_backend);
                }
            }
            if target_backend_compiler := fp.string_flag(
                "backend-compiler", 'C',
                "Change the backend compiler Rivet invokes to the
                                        specified compiler."
            ) {
                prefs.target_backend_compiler = target_backend_compiler;
            }
            if target_is_32bit := fp.bool_flag(
                "x32", 0, "32-bit machine code will be generated."
            ); target_is_32bit {
                prefs.target_is_64bit = false;
            }
            if target_is_64bit := fp.bool_flag(
                "x64", 0, "64-bit machine code will be generated."
            ); target_is_64bit {
                prefs.target_is_64bit = true;
            }
        }

        if !(is_test || run_output || is_check) {
            if emit_mir := fp.bool_flag("emit-mir", 0, "Emit Rivet's Module Intermediate Representation to a file."); emit_mir {
                prefs.emit_mir = true;
            }
            if keep_c := fp.bool_flag("keep-c", 0, "Don't remove the output C source file."); keep_c {
                prefs.keep_c = true;
            }
            if all_warns_are_errors := fp.bool_flag(
                "", 'W', "Treat all Rivet warnings as errors, even in development builds."
            ); all_warns_are_errors {
                prefs.all_warns_are_errors = true;
            }
            if hide_all_warns := fp.bool_flag("", 'w', "Hide all warnings."); hide_all_warns {
                prefs.hide_all_warns = true;
            }
        }

        if !(is_test || run_output) {
            if show_color := fp.bool_flag(
                "show-color", 0,
                "Force the use of ANSI colors for the error/warning messages,\n"
                "                                     or disable them completely."
            ) {
                utils.support_ansi_escape_codes = show_color;
            }
            if verbose := fp.bool_flag("verbose", 'v', "Print additional messages to the console."); verbose {
                prefs.is_verbose = true;
            }
        }

        // footers
        if !is_check {
            fp.add_footer("By default, the target OS and the target architecture is the host OS and architecture.\n");
        }

        if !(is_test || is_check) {
            fp.add_footer("Note that most Rivet warnings turn to errors, if you pass `-r` or `--release`, so you will");
            fp.add_footer("have to fix them first.\n");
        }

        if !is_check {
            fp.add_footer("Current list of supported backends:");
            fp.add_footer("   - `c` (default): Rivet outputs C source code which is passed to a C compiler\n     to be compiled.");

            fp.add_footer("\nCurrent list of supported backend compilers:");
            fp.add_footer("   - `C`: `clang`, `gcc` and `mingw`.");

            fp.add_footer("\nCurrent list of supported operating systems:");
            fp.add_footer("   - `linux`");

            fp.add_footer("\nCurrent list of supported architectures:");
            fp.add_footer("   - `amd64`, `i386`");
        }

        fp.add_usage_example(".");
        if is_test {
            fp.add_usage_example("lib/std/");
        } else if run_output {
            fp.add_usage_example("sum/ -- 2 2");
            fp.add_usage_example("install_git.ri");
        } else if is_check {
            fp.add_usage_example("my_module/");
        } else {
            fp.add_usage_example("my_module/");
            fp.add_usage_example("-o my_bin my_module/");
            fp.add_usage_example("-o my_bin my_module/ -C clang-12");
            fp.add_usage_example("-o my_bin my_module/ --os windows");
            fp.add_usage_example("my_file.ri --arch i386");
        }

        remaining_args := fp.finalize() catch |err| {
            utils.error(err.to_string())
        };
        for arg in remaining_args {
            prefs.set_input(arg);
        }
        if prefs.input.is_empty() {
            utils.error("no input received");
        }
        return prefs;
    }

    pub func set_input(^mut self, input: string) {
        if !self.input.is_empty() {
            utils.error("the compiler can only receive one module");
        } else if !Path.exists(input) {
            utils.error("`{}` does not exist", input);
        } else if !(Path.is_directory(input) || Path.is_file(input)) {
            utils.error("`{}` is not a directory or file");
        } else {
            self.input = input;
            if self.mod_name.is_empty() {
                self.mod_name = if Path.is_file(input) {
                    Path.base_name(input).all_before_of(".ri")
                } else {
                    Path.base_name(Path.resolve(input) catch input)
                };
            }
        }
    }

    pub func load_module_info(^mut self) -> ! {
        if self.is_test {
            self.mod_output = "_rivet_tests_runner_";
        } else if self.mod_output.is_empty() {
            self.mod_output = self.mod_name;
        }

        if self.target_os == .Windows && !self.mod_output.ends_with(".exe") {
            self.mod_output = self.mod_output.concat(".exe");
        }

        if !Path.is_absolute(self.mod_output) {
            self.mod_output = Path.join(process.get_cwd()!, self.mod_output)!;
        }

        self.mod_dir = if Path.is_file(self.input) {
            Path.dir_name(Path.absolute(self.input)!) ?? self.input
        } else {
            self.input
        };
    }
}
