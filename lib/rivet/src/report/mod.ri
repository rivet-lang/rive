// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/env;
import std/strings;
import std/console;
import std/fs/path;
import std/process;

import ../prefs;
import ../token;
import ../utils;

public var mut Report_Table = ReportTable();

[inline]
public func total_errors() usize {
    return Report_Table.errors;
}

[inline]
public func total_warns() usize {
    return Report_Table.warns;
}

[boxed]
public struct ReportTable {
    public mut prefs: prefs.Prefs;
    public mut errors: usize;
    public mut warns: usize;
}

public enum ReportKind as uint8 {
    Error,
    Warn,
    Note,
    Help
}

[boxed]
public struct Annotation {
    public kind: ReportKind;
    public msg: string;
}

[inline]
public func error(msg: string, pos: token.Pos) {
    ReportBuilder(.Error, msg, pos).emit();
}

[inline]
public func warn(msg: string, pos: token.Pos) {
    ReportBuilder(.Warn, msg, pos).emit();
}

[inline]
public func error_builder(msg: string, pos: token.Pos) ReportBuilder {
    return ReportBuilder(.Error, msg, pos);
}

[inline]
public func warn_builder(msg: string, pos: token.Pos) ReportBuilder {
    return ReportBuilder(.Warn, msg, pos);
}

// TODO: support JSON format for LSP, etc.
[boxed]
public struct ReportBuilder {
    public kind: ReportKind;
    public msg: string;
    public pos: token.Pos;
    public mut annotations: []Annotation;

    [inline]
    public func add_note(mut self, msg: string) {
        self.annotations.push(Annotation(.Note, msg));
    }

    [inline]
    public func add_help(mut self, msg: string) {
        self.annotations.push(Annotation(.Help, msg));
    }

    public func emit(self) {
        if self.kind == .Error {
            Report_Table.errors += 1;
        } else {
            Report_Table.warns += 1;
        }
        console.eprintln(
            utils.bold("{}: {} {}"), self.pos.to_report_string(), if self.kind == .Error {
                utils.red("error:")
            } else {
                utils.yellow("warning:")
            }, self.msg
        );
        if self.pos.is_multiline {
            formatted_multi_line(self.pos);
        } else {
            formatted_single_line(self.pos);
        }
        for annotation in self.annotations {
            console.eprintln("{} {}", utils.bold(
                "      {} {}".fmt(
                    utils.blue("="), if annotation.kind == .Note {
                        utils.cyan("note:")
                    } else {
                        "help:"
                    }
                )
            ), annotation.msg.wrap(80, "\n        "));
        }
    }
}

func formatted_single_line(pos: token.Pos) {
    if line := utils.source_cache.find_line(pos.file, pos.line) {
        console.eprintln(
            "{} {} {}", utils.bold(utils.blue("{:5}".fmt(pos.line + 1))),
            utils.bold(utils.blue("|")), line.replace("\t", "    ")
        );
        start_column := utils.max(0, utils.min(pos.col, line.len));
        end_column := utils.max(0, utils.min(pos.col + utils.max(0, pos.len), line.len));
        mut sb := strings.Builder.new(line.len);
        write_spaces(sb, start_column, line);
        sb.write_string(utils.bold(utils.blue("^")));
        if pos.len > 1 {
            sb.write_string(
                utils.bold(
                    utils.blue("~".repeat(line[start_column..end_column].runes_count() - 1))
                )
            );
        }
        console.eprintln("      {} {}", utils.bold(utils.blue("|")), sb.to_string());
    }
}

func formatted_multi_line(pos: token.Pos) {
    if lines := utils.source_cache.find_lines_between(pos.file, pos.line, pos.end_line + 1) {
        mut ellipsis := false;
        max: usize := if lines.len > 8 { 4 } else { 2 };
        for line_nr, line in lines {
            if line_nr + pos.line == pos.line {
                start_column := utils.max(0, utils.min(pos.col, line.len));
                end_column := utils.max(
                    0, utils.min(pos.col + utils.max(0, pos.len), line.len)
                );
                mut sb := strings.Builder.new(line.len);
                sb.write_string(utils.bold(utils.blue("      | ")));
                write_spaces(sb, start_column, line);
                sb.write_string(utils.bold(utils.blue("/~~ from here")));
                console.eprintln(sb.to_string());
            }
            if line_nr < max or line_nr >= lines.len - max {
                console.eprintln(
                    "{} {} {}", utils.bold(utils.blue("{:5}".fmt(line_nr + pos.line + 1))),
                    utils.bold(utils.blue("|")), line.replace("\t", "    ")
                );
            } else if !ellipsis {
                ellipsis = true;
                console.eprintln(utils.bold(utils.blue("  ... |")).concat(" ..."));
            }
            if line_nr + pos.line == pos.end_line {
                start_column := utils.max(0, utils.min(pos.end_col, line.len));
                end_column := utils.max(
                    0, utils.min(pos.end_col + utils.max(0, pos.len), line.len)
                );
                mut sb := strings.Builder.new(line.len);
                sb.write_string(utils.bold(utils.blue("      | ")));
                write_spaces(sb, start_column, line);
                sb.write_string(utils.bold(utils.blue("^~~ to here")));
                console.eprintln(sb.to_string());
            }
        }
    }
}

func write_spaces(mut sb: strings.Builder, start_column: usize, line: string) {
    mut i: usize := 0;
    while i < start_column {
        b := line[i];
        if b.is_space() {
            sb.write_byte(b);
            i += 1;
        } else {
            char_len := b.len_utf8();
            sb.write_string(" ".repeat(line[i..i + char_len].runes_count()));
            i += char_len;
        }
    }
}
