// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{ traits, strings, console };

import ../{ prefs, token, utils };

pub var mut report_table := ReportTable();

#[inline]
pub func error(msg: string, pos: token.Pos) {
    ReportBuilder(.Error, msg, pos).emit();
}

#[inline]
pub func warn(msg: string, pos: token.Pos) {
    ReportBuilder(.Warn, msg, pos).emit();
}

#[inline]
pub func error_builder(msg: string, pos: token.Pos) -> ReportBuilder {
    return ReportBuilder(.Error, msg, pos);
}

#[inline]
pub func warn_builder(msg: string, pos: token.Pos) -> ReportBuilder {
    return ReportBuilder(.Warn, msg, pos);
}

#[inline]
pub func total_errors() -> uint {
    return report_table.errors;
}

#[inline]
pub func total_warns() -> uint {
    return report_table.warns;
}

#[boxed]
struct ReportTable {
    pub mut prefs: prefs.Prefs;
    pub mut errors: uint;
    pub mut warns: uint;

    mut last_pos: token.Pos;
}

pub enum ReportKind as uint8 {
    Error,
    Warn,
    Note,
    Help
}

struct Attribute {
    kind: ReportKind;
    msg: string;
}

// TODO: support JSON format for LSP, etc.
pub struct ReportBuilder {
    mut kind: ReportKind;
    msg: string;
    pos: token.Pos := token.no_pos;
    mut attributes: []Attribute;

    #[inline]
    pub func add_note(mut self, msg: string, args: ...traits.Stringable) {
        self.attributes.push(Attribute(.Note, msg.fmt(args)));
    }

    #[inline]
    pub func add_help(mut self, msg: string, args: ...traits.Stringable) {
        self.attributes.push(Attribute(.Help, msg.fmt(args)));
    }

    pub func emit(mut self) {
        if self.kind == .Warn {
            if report_table.prefs.hide_all_warns {
                return;
            }
            if report_table.prefs.all_warns_are_errors
                || report_table.prefs.optimize_mode != .Debug {
                self.kind = .Error;
            }
        }
        if report_table.last_pos == self.pos {
            return;
        }
        report_table.last_pos = self.pos;
        if self.kind == .Error {
            report_table.errors += 1;
        } else {
            report_table.warns += 1;
        }
        console.ewriteln(
            utils.bold("{}: {} {}"), self.pos.to_report_string(), if self.kind == .Error {
                utils.red("error:")
            } else {
                utils.yellow("warning:")
            }, self.msg
        );
        if self.pos.is_multiline {
            formatted_multi_line(self.pos);
        } else {
            formatted_single_line(self.pos);
        }
        for attribute in self.attributes {
            console.ewriteln("{} {}", utils.bold(
                "      {} {}".fmt(
                    utils.blue("="), if attribute.kind == .Note {
                        utils.cyan("note:")
                    } else {
                        "help:"
                    }
                )
            ), attribute.msg.wrap(60, utils.bold("\n        ")));
        }
    }
}

func formatted_single_line(pos: token.Pos) {
    if line := utils.source_cache.find_line(pos.file, pos.line) {
        console.ewriteln(
            "{} {} {}", utils.bold(utils.blue("{:5}".fmt(pos.line + 1))),
            utils.bold(utils.blue("|")), line.replace("\t", "    ")
        );
        start_column := utils.max(0, utils.min(pos.col, line.len));
        end_column := utils.max(0, utils.min(pos.col + utils.max(0, pos.len), line.len));
        mut sb := strings.Builder.new(line.len);
        write_spaces(sb, start_column, line);
        sb.write(utils.bold(utils.blue("^")));
        if pos.len > 1 {
            sb.write(
                utils.bold(
                    utils.blue("~".repeat(line.substr(start_column, end_column).runes_count() - 1))
                )
            );
        }
        console.ewriteln("      {} {}", utils.bold(utils.blue("|")), sb.to_string());
    }
}

func formatted_multi_line(pos: token.Pos) {
    if lines := utils.source_cache.find_lines_between(pos.file, pos.line, pos.end_line + 1) {
        mut ellipsis := false;
        max: uint := if lines.len > 8 { 4 } else { 2 };
        for line_nr, line in lines {
            if line_nr + pos.line == pos.line {
                mut sb := strings.Builder.new(line.len);
                sb.write(utils.bold(utils.blue("      | ")));
                write_spaces(sb, utils.max(0, utils.min(pos.col, line.len)), line);
                sb.write(utils.bold(utils.blue("/~~ from here")));
                console.ewriteln(sb.to_string());
            }
            if line_nr < max || line_nr >= lines.len - max {
                console.ewriteln(
                    "{} {} {}", utils.bold(utils.blue("{:5}".fmt(line_nr + pos.line + 1))),
                    utils.bold(utils.blue("|")), line.replace("\t", "    ")
                );
            } else if !ellipsis {
                ellipsis = true;
                console.ewriteln(utils.bold(utils.blue("  ... |")).concat(" ..."));
            }
            if line_nr + pos.line == pos.end_line {
                mut sb := strings.Builder.new(line.len);
                sb.write(utils.bold(utils.blue("      | ")));
                write_spaces(sb, utils.max(0, utils.min(pos.end_col, line.len)), line);
                sb.write(utils.bold(utils.blue("^~~ to here")));
                console.ewriteln(sb.to_string());
            }
        }
    }
}

func write_spaces(mut sb: strings.Builder, start_column: uint, line: string) {
    mut i: uint := 0;
    while i < start_column {
        b := line[i];
        if b.is_space() {
            sb.write_byte(b);
            i += 1;
        } else {
            char_len := b.len_utf8();
            sb.write(" ".repeat(line.substr(i, i + char_len).runes_count()));
            i += char_len;
        }
    }
}
