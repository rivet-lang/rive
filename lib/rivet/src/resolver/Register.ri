// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ ast, report, token };

#[boxed]
pub struct Register {
    env: +mut ast.Env;

    mut core_is_set: bool;
    mut is_core_mod: bool;

    mut abi: ast.ABI;
    mut sym: ast.Sym := ast.InvalidSym();
    source_file: +mut ast.SourceFile;

    pub func walk_files(+mut self, source_files: []+mut ast.SourceFile) {
        for sf in source_files {
            self.is_core_mod = sf.mod.is_core();
            if !self.core_is_set && self.is_core_mod {
                self.env.core_mod = sf.mod;
                self.core_is_set = true;
            }
            self.sym = sf.mod;
            self.source_file = sf;
            self.walk_decls(self.source_file.decls);
        }
        self.env.throwable_t = +mut .Basic(self.env.throwable_sym);
    }

    func walk_decls(+mut self, decls: []+mut ast.Decl) {
        for decl in decls {
            old_abi := self.abi;
            old_sym := self.sym;
            self.sym.scope.owner = self.sym;
            self.walk_decl(decl);
            self.abi = old_abi;
            self.sym = old_sym;
        }
    }

    func walk_decl(+mut self, decl: +mut ast.Decl) {
        match decl.+ {
            .ComptimeIf(&mut comptime_if_decl) -> self.comptime_if(comptime_if_decl),
            .Import(&mut import_decl) -> self.import_decl(import_decl),
            .Extern(&mut extern_decl) -> {
                self.abi = extern_decl.abi;
                self.walk_decls(extern_decl.decls);
            },
            .Alias(&mut alias_decl) -> alias_decl.sym = self.add_sym(
                if alias_decl.is_typealias {
                    +mut ast.TypeSym(
                        parent: self.sym,
                        is_public: alias_decl.is_public,
                        name: alias_decl.name,
                        info: +mut .Alias(alias_decl.parent_type)
                    )
                } else {
                    // updated later
                    +mut ast.SymRef(
                        parent: self.sym,
                        is_public: alias_decl.is_public,
                        name: alias_decl.name,
                        ref_expr: alias_decl.parent
                    )
                }, alias_decl.pos
            ),
            .Trait(&mut trait_decl) -> {
                trait_decl.sym = self.add_sym(
                    +mut ast.TypeSym(
                        parent: self.sym,
                        is_public: trait_decl.is_public,
                        name: trait_decl.name,
                        info: +mut .Trait()
                    ), trait_decl.pos
                );
                if self.is_core_mod && trait_decl.name == "Throwable" && !self.env.throwable_sym_is_set {
                    self.env.throwable_sym_is_set = true;
                    self.env.throwable_sym = @as(+mut ast.TypeSym, trait_decl.sym);
                }
                self.sym = trait_decl.sym;
                self.walk_decls(trait_decl.decls);
            },
            .Struct(&mut struct_decl) -> {
                struct_decl.sym = if self.is_core_mod && struct_decl.name == "string" {
                    @as(+ast.Type.Basic, self.env.string_t).sym
                } else {
                    self.add_sym(+mut ast.TypeSym(
                        parent: self.sym,
                        is_public: struct_decl.is_public,
                        name: struct_decl.name,
                        info: +mut .Struct(
                            is_opaque: struct_decl.is_opaque,
                            is_boxed: struct_decl.attributes.has("boxed")
                        )
                    ), struct_decl.pos)
                };
                if self.is_core_mod && struct_decl.name == "DynArray" {
                    self.env.dyn_array_sym = @as(+mut ast.TypeSym, struct_decl.sym);
                }
                self.sym = struct_decl.sym;
                self.walk_decls(struct_decl.decls);
            },
            .Enum(&mut enum_decl) -> {
                info := +mut ast.TypeInfo.Enum(
                    underlying_type: enum_decl.underlying_type,
                    is_tagged: enum_decl.is_tagged,
                    is_boxed: enum_decl.attributes.has("boxed")
                );
                enum_decl.sym = self.add_sym(
                    +mut ast.TypeSym(
                        parent: self.sym,
                        is_public: enum_decl.is_public,
                        name: enum_decl.name,
                        info: info
                    ), enum_decl.pos
                );
                mut enum_info := @as(ast.TypeInfo.Enum, info);
                for &mut variant in enum_decl.variants {
                    if enum_info.has_variant(variant.name) {
                        report.error("enum `{}` has duplicate variant `{}`".fmt(
                            enum_decl.name, variant.name
                        ), variant.pos);
                        return;
                    }
                    fields := ast.filter_field_decl(variant.decls);
                    if !variant.decls.is_empty() {
                        variant_sym := +mut ast.TypeSym(
                            parent: enum_decl.sym,
                            is_public: enum_decl.is_public,
                            name: variant.name,
                            info: +mut .Struct(
                                false, true, true,
                                parent: @as(+mut ast.TypeSym, enum_decl.sym)
                            )
                        );
                        enum_decl.sym.scope.add(variant_sym) catch |err| {
                            report.error(err.to_string(), variant.pos)
                        };
                        old_v_sym := self.sym;
                        self.sym = variant_sym;
                        self.walk_decls(variant.decls);
                        self.sym = old_v_sym;
                        variant.type = +mut .Basic(variant_sym);
                    }
                    enum_info.add_variant(
                        +mut ast.EnumVariant(
                            name: variant.name,
                            has_type: variant.has_type,
                            type: variant.type,
                            has_fields: !fields.is_empty()
                        )
                    );
                }
                @as(+mut ast.TypeSym, enum_decl.sym).info = info;
                self.sym = enum_decl.sym;
                self.walk_decls(enum_decl.decls);
            },
            .Field(&mut field_decl) -> {
                type_sym := @as(+mut ast.TypeSym, self.sym);
                if type_sym.has_field(field_decl.name) {
                    report.error(
                        "{} `{}` has duplicate field `{}`".fmt(
                            type_sym.type_of(), type_sym.name, field_decl.name
                        ), field_decl.pos
                    );
                    return;
                }
                type_sym.fields.push(+mut ast.Field(
                    name: field_decl.name,
                    is_mut: field_decl.is_mut,
                    is_public: field_decl.is_public,
                    type: field_decl.type,
                    has_def_expr: field_decl.has_def_expr,
                    def_expr: field_decl.def_expr,
                    is_required: field_decl.attributes.has("required")
                ));
            },
            .Const(&mut const_decl) -> const_decl.sym = self.add_sym(+mut ast.Const(
                parent: self.sym,
                is_public: const_decl.is_public,
                abi: self.abi,
                name: const_decl.name,
                expr: const_decl.expr,
                type: const_decl.type
            ), const_decl.pos),
            .Var(&mut var_decl) -> {
                for left in var_decl.lefts {
                    left.sym = +mut ast.Var(
                        parent: self.sym,
                        is_public: var_decl.is_public,
                        is_extern: var_decl.is_extern,
                        is_mut: left.is_mut,
                        abi: self.abi,
                        name: left.name,
                        type: left.type,
                        pos: left.pos
                    );
                    self.source_file.mod.scope.add(left.sym) catch |err| {
                        report.error(err.to_string(), left.pos)
                    };
                }
            },
            .Extend(&mut extend_decl) -> if extend_decl.type is .Basic(&mut basic_type) {
                if type_sym := basic_type.sym {
                    self.sym = type_sym;
                    if type_sym.is_primitive()
                        && !self.source_file.mod.is_core() {
                        report.error("cannot extend primitive types", extend_decl.pos);
                    }
                } else {
                    if basic_type.expr is .Ident(&mut ident) {
                        self.sym = if type_sym := self.sym.scope.find(ident.name) {
                            type_sym
                        } else {
                            self.add_sym(+mut ast.TypeSym(
                                parent: self.sym,
                                name: ident.name,
                                info: +mut .Placeholder
                            ), ident.pos)
                        };
                        ident.found = true;
                        ident.sym = self.sym;
                        basic_type.is_unresolved = false;
                        basic_type.sym = @as(+mut ast.TypeSym, self.sym);
                    } else {
                        report.error(
                            "invalid type `{}` to extend".fmt(extend_decl.type),
                            extend_decl.pos
                        );
                        return;
                    }
                }
                self.walk_decls(extend_decl.decls);
            } else {
                report.error(
                    "invalid type `{}` to extend".fmt(extend_decl.type),
                    extend_decl.pos
                );
            },
            .Func(&mut func_decl) -> func_decl.sym = self.add_sym(+mut ast.Func(
                parent: self.sym,
                abi: func_decl.abi,
                is_public: func_decl.is_public,
                is_extern: func_decl.is_extern,
                is_unsafe: func_decl.is_unsafe,
                is_method: func_decl.is_method,
                is_special_method: func_decl.is_special_method,
                is_variadic: func_decl.is_variadic,
                is_main: func_decl.is_main,
                name: func_decl.name,
                args: func_decl.args,
                has_named_args: func_decl.has_named_args,
                ret_type: func_decl.ret_type,
                has_body: func_decl.has_body,
                self_is_ptr: func_decl.self_is_ptr,
                self_is_boxed: func_decl.self_is_boxed,
                self_is_mut: func_decl.self_is_mut,
                self_pos: func_decl.self_pos,
                pos: func_decl.pos
            ), func_decl.pos),
            else -> {}
        }
    }

    func comptime_if(+mut self, comptime_if_decl: &mut ast.ComptimeIf) {
        nodes := self.env.evalue_comptime_if(comptime_if_decl);
        self.walk_decls(ast.nodes_to_decls(nodes));
    }

    func import_decl(+mut self, import_decl: &ast.ImportDecl) {
        if !import_decl.subimports.is_empty() {
            for &subimport in import_decl.subimports {
                self.import_decl(subimport);
            }
            return;
        }
        if import_decl.glob {
            // `import module/path.*`
            for sym in import_decl.info.mod.scope.syms {
                if !sym.is_public {
                    continue;
                }
                if self.check_imported_symbol(sym.name, import_decl.pos, true) {
                    if import_decl.is_public {
                        self.sym.scope.add(+mut ast.SymRef(
                            is_public: true,
                            name: sym.name,
                            ref: sym,
                            ref_resolved: true
                        )) catch |err| report.error(err.to_string(), import_decl.pos);
                    } else {
                        self.source_file.imported_symbols.add(
                            sym.name, sym, import_decl.pos, true
                        );
                    }
                }
            }
        } else if import_decl.import_list.is_empty() {
            // `import module/path`
            if self.check_imported_symbol(import_decl.alias_name, import_decl.pos, true) {
                if import_decl.is_public {
                    self.sym.scope.add(+mut ast.SymRef(
                        is_public: true,
                        name: import_decl.alias_name,
                        ref: import_decl.info.mod,
                        ref_resolved: true
                    )) catch |err| report.error(err.to_string(), import_decl.pos);
                } else {
                    self.source_file.imported_symbols.add(
                        import_decl.alias_name, import_decl.info.mod,
                        import_decl.pos
                    );
                }
            }
        } else {
            // `import module/path.A` || `import module/path.{ A, B }`
            for import_info in import_decl.import_list {
                if import_info.name == "self" {
                    if import_decl.is_public {
                        self.sym.scope.add(+mut ast.SymRef(
                            is_public: true,
                            name: import_info.alias_name,
                            ref: import_decl.info.mod,
                            ref_resolved: true
                        )) catch |err| report.error(err.to_string(), import_info.pos);
                    } else {
                        self.source_file.imported_symbols.add(
                            import_decl.alias_name, import_decl.info.mod,
                            import_decl.pos
                        );
                    }
                } else if mut sym := import_decl.info.mod.scope.find(import_info.name) {
                    self.check_vis(sym, import_info.pos);
                    if self.check_imported_symbol(sym.name, import_info.pos, true) {
                        if import_decl.is_public {
                            self.sym.scope.add(+mut ast.SymRef(
                                is_public: true,
                                name: import_info.alias_name,
                                ref: sym,
                                ref_resolved: true
                            )) catch |err| report.error(err.to_string(), import_info.pos);
                        } else {
                            self.source_file.imported_symbols.add(
                                import_info.alias_name, sym, import_info.pos
                            );
                        }
                    }
                } else {
                    report.error(
                        "could not find `{}` in module `{}`".fmt(
                            import_info.name, import_decl.info.mod.name
                        ), import_info.pos
                    );
                }
            }
        }
    }

    func add_sym(+mut self, sym: ast.Sym, pos: token.Pos) -> ast.Sym {
        if self.check_imported_symbol(sym.name, pos, false) {
            return self.sym.scope.add_or_get(sym) catch |err| {
                report.error(err.to_string(), pos);
                sym
            };
        }
        return sym;
    }

    func check_imported_symbol(+self, name: string, pos: token.Pos, is_import: bool) -> bool {
        if self.source_file.imported_symbols.exists(name) {
            if is_import {
                err := report.error_builder(
                    "another symbol with the name `{}` is already imported".fmt(name), pos
                );
                err.add_help("change the name of the import with `as` (`x as y`)");
                err.emit();
            } else {
                err := report.error_builder(
                    "duplicate symbol `{}` in {} `{}`".fmt(
                        name, self.sym.type_of(), self.sym.name
                    ), pos
                );
                err.add_note("a imported symbol with that name exists", name);
                err.emit();
            }
            return false;
        } else if is_import && self.source_file.mod.scope.exists(name) {
            err := report.error_builder(
                "another symbol with the name `{}` already exists".fmt(name), pos
            );
            err.add_help("change the name of the import with `as` (`x as y`)");
            err.emit();
            return false;
        }
        return true;
    }

    func check_vis(+self, mut sym: ast.Sym, pos: token.Pos) {
        if !sym.is_public && !self.sym.has_access_to(sym) {
            report.error("{} `{}` is private".fmt(sym.type_of(), sym.name), pos);
        }
    }
}
