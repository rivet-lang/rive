// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../ast;
import ../report;

extend Resolver {
    func resolve_decls(mut self, decls: []ast.Decl) {
        for decl in decls {
            old_sym := self.sym;
            old_self_sym := self.self_sym;
            old_self_sym_is_set := self.self_sym_is_set;
            match decl is {
                .Empty as empty_pos -> report.error("BUG: empty declaration found", empty_pos),
                .Extern as extern_decl -> self.resolve_decls(extern_decl.decls),
                .Alias as alias_decl -> if alias_decl.is_typealias {
                    _ = self.resolve_type(alias_decl.parent_type);
                } else {
                    sym_ref := @as(ast.SymRef, alias_decl.sym);
                    self.resolve_expr(sym_ref.ref_expr);
                    if sym_ref.ref_expr is .Ident as ident and ident.found and ident.is_sym {
                        sym_ref.ref = ident.sym;
                        sym_ref.ref_resolved = true;
                    } else if sym_ref.ref_expr is .Selector as selector and selector.found {
                        sym_ref.ref = selector.sym;
                        sym_ref.ref_resolved = true;
                    }
                },
                .Const as const_decl -> if self.resolve_type(const_decl.type) {
                    self.resolve_expr(const_decl.expr);
                },
                .Var as var_decl -> {
                    for left in var_decl.lefts {
                        self.check_variable_shadowing(left.name, left.pos);
                        _ = self.resolve_type(left.type);
                    }
                    if !var_decl.is_extern {
                        self.resolve_expr(var_decl.right);
                    }
                },
                .Trait as trait_decl -> {
                    self.self_sym = @as(ast.TypeSym, trait_decl.sym);
                    self.self_sym_is_set = true;
                    trait_info := @as(ast.TypeInfo.Trait, self.self_sym.info);
                    for mut base in trait_decl.bases {
                        if self.resolve_type(base) {
                            base_sym := base.symbol()?;
                            if base_sym.info is .Trait as mut base_trait_info {
                                trait_info.bases.push(base_sym);
                                for impl in base_trait_info.implements {
                                    if impl.info is .Struct as struct_info {
                                        if !struct_info.contains_trait(base_sym) {
                                            base_trait_info.implement(impl);
                                            struct_info.traits.push(base_sym);
                                        }
                                    }
                                }
                            } else {
                                report.error(
                                    "type `{}` is not a trait".fmt(base_sym.name),
                                    base.position()
                                );
                            }
                        }
                    }
                    if default_value := trait_decl.attributes.find("default_value") {
                        self.self_sym.default_value = default_value.args[0].expr;
                        self.resolve_expr(self.self_sym.default_value?);
                    }
                    self.resolve_decls(trait_decl.decls);
                },
                .Enum as enum_decl -> {
                    if enum_decl.is_boxed or self.resolve_type(enum_decl.underlying_type) {
                        self.self_sym = @as(ast.TypeSym, enum_decl.sym);
                        self.self_sym_is_set = true;
                        enum_info := @as(ast.TypeInfo.Enum, self.self_sym.info);
                        for variant in enum_info.variants {
                            if !self.resolve_type(variant.type) {
                                continue;
                            }
                        }
                        for mut base in enum_decl.bases {
                            if self.resolve_type(base) {
                                base_sym := base.symbol()?;
                                if base_sym.info is .Trait as mut trait_info {
                                    enum_info.traits.push(base_sym);
                                    trait_info.implement(self.self_sym);
                                } else {
                                    report.error(
                                        "type `{}` is not a trait".fmt(
                                            base_sym.name
                                        ), base.position()
                                    );
                                }
                            }
                        }
                    }
                    for variant in enum_decl.variants {
                        if !variant.decls.is_empty() {
                            old_self_sym2 := self.self_sym;
                            self.self_sym = variant.type.symbol() ?? self.self_sym;
                            self.resolve_decls(variant.decls);
                            self.self_sym = old_self_sym2;
                        }
                    }
                    if default_value := enum_decl.attributes.find("default_value") {
                        self.self_sym.default_value = default_value.args[0].expr;
                        self.resolve_expr(self.self_sym.default_value?);
                    }
                    self.resolve_decls(enum_decl.decls);
                },
                .Struct as struct_decl -> {
                    self.self_sym = @as(ast.TypeSym, struct_decl.sym);
                    self.self_sym_is_set = true;
                    for mut base in struct_decl.bases {
                        if self.resolve_type(base) {
                            struct_info := @as(ast.TypeInfo.Struct, self.self_sym.info);
                            base_sym := base.symbol()?;
                            if base_sym.info is .Trait as mut trait_info {
                                struct_info.traits.push(base_sym);
                                trait_info.implement(self.self_sym);
                            } else if base_sym.info is .Struct as struct_info2 {
                                struct_info.bases.push(base_sym);
                                for b_trait in struct_info2.traits {
                                    @as(ast.TypeInfo.Trait, b_trait.info).implement(
                                        self.self_sym
                                    );
                                }
                            } else {
                                report.error(
                                    "type `{}` is not a trait or struct".fmt(
                                        base_sym.name
                                    ), base.position()
                                );
                            }
                        }
                    }
                    self.resolve_decls(struct_decl.decls);
                },
                .Extend as extend_decl -> if self.resolve_type(extend_decl.type) {
                    self.self_sym = extend_decl.type.symbol()?;
                    self.self_sym_is_set = true;
                    for mut base in extend_decl.bases {
                        if self.resolve_type(base) {
                            base_sym := base.symbol()?;
                            if base_sym.info is .Trait as mut trait_info {
                                trait_info.implement(self.self_sym);
                            } else if self.self_sym.info is .Struct as struct_info
                                and base_sym.info is .Struct {
                                struct_info.bases.push(base_sym);
                            } else {
                                report.error(
                                    "type `{}` is not a trait or a struct".fmt(
                                        base_sym.name
                                    ), base.position()
                                );
                            }
                        }
                    }
                    self.resolve_decls(extend_decl.decls);
                },
                .Field as field_decl -> if self.resolve_type(field_decl.type)
                    and field_decl.has_def_expr {
                    self.resolve_expr(field_decl.def_expr);
                },
                .Func as func_decl -> {
                    if func_decl.is_method {
                        mut self_type := ast.Type.Basic(self.self_sym);
                        if func_decl.self_is_ptr {
                            self_type = .Pointer(self_type);
                        }
                        is_used := self.self_sym.info is .Trait and !func_decl.has_body;
                        func_decl.scope.add_local(ast.Var(
                            name: "self",
                            is_mut: func_decl.self_is_mut,
                            is_used: is_used,
                            is_changed: is_used,
                            level: .Receiver,
                            type: self_type,
                            pos: func_decl.self_pos
                        )) catch |err| report.error(
                            err.to_string(), func_decl.pos
                        );
                        func_decl.self_type = self_type;
                        @as(ast.Func, func_decl.sym).self_type = self_type;
                    }
                    for arg in func_decl.args {
                        if self.resolve_type(arg.type) {
                            self.check_variable_shadowing(arg.name, arg.pos);
                            is_used := self.self_sym_is_set and self.self_sym.info is .Trait
                                and !func_decl.has_body;
                            func_decl.scope.add_local(ast.Var(
                                is_mut: arg.is_mut,
                                is_used: is_used,
                                is_changed: is_used,
                                name: arg.name,
                                level: .Argument,
                                pos: arg.pos,
                                type: arg.type
                            )) catch |err| report.error(
                                err.to_string(), arg.pos
                            );
                        }
                        if arg.has_def_expr {
                            self.resolve_expr(arg.def_expr);
                        }
                    }
                    _ = self.resolve_type(func_decl.ret_type);
                    for mut stmt in func_decl.stmts {
                        self.resolve_stmt(stmt);
                    }
                },
                .Test as test_decl -> {
                    for mut stmt in test_decl.stmts {
                        self.resolve_stmt(stmt);
                    }
                },
                else -> {}
            }
            self.sym = old_sym;
            self.self_sym = old_self_sym;
            self.self_sym_is_set = old_self_sym_is_set;
        }
    }
}
