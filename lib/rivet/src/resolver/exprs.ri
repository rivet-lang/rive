// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../ast;
import ../token;
import ../report;

extend Resolver {
    func resolve_expr(mut self, mut expr: ast.Expr) {
        switch expr is {
            .Empty as empty_pos => report.error("BUG: empty expression found", empty_pos),
            .Paren as paren => self.resolve_expr(paren.expr),
            .Type as mut type => _ = self.resolve_type(type),
            .Ident as mut ident => self.resolve_ident(ident),
            .Selector as mut selector => self.resolve_selector(selector),
            .SelfTy as self_ty => if self.self_sym_is_set {
                self_ty.sym = self.self_sym;
                self_ty.found = true;
            } else {
                report.error("cannot resolve `Self` expression", self_ty.pos);
            },
            .SelfLiteral as self_lit => if self.self_sym_is_set {
                self_lit.sym = self.self_sym;
                self_lit.found = true;
            } else {
                report.error("cannot resolve `self` expression", self_ty.pos);
            },
            .TupleLiteral as tuple_lit => {
                for mut value in tuple_lit.values {
                    self.resolve_expr(value);
                }
            },
            .VectorLiteral as vector_lit => {
                for mut value in vector_lit.values {
                    self.resolve_expr(value);
                }
            },
            .BuiltinCall as builtin_call => {
                if builtin := self.table.find_builtin(builtin_call.name) {
                    if builtin !is .Func {
                        report.error(
                            "`{}` is not a builtin function".fmt(builtin_call.name),
                            builtin_call.pos
                        );
                    }
                    for mut arg in builtin_call.args {
                        self.resolve_expr(arg);
                    }
                } else {
                    report.error(
                        "unknown builtin function `{}`".fmt(builtin_call.name),
                        builtin_call.pos
                    );
                }
            },
            .Call as call => {
                self.resolve_expr(call.left);
                for arg in call.args {
                    self.resolve_expr(arg.expr);
                }
                if call.has_spread_expr {
                    self.resolve_expr(call.spread_expr);
                }
                if call.err_handler.has_expr {
                    if call.err_handler.has_varname {
                        call.err_handler.scope.add_local(ast.Var(
                            name: call.err_handler.varname,
                            type: self.table.error_t,
                            level: .Local,
                            pos: call.err_handler.varname_pos
                        )) catch |err| report.error(
                            err.to_string(),
                            call.err_handler.varname_pos
                        );
                    }
                    self.resolve_expr(call.err_handler.expr);
                }
            },
            .Unary as unary => self.resolve_expr(unary.right),
            .Binary as binary => {
                self.resolve_expr(binary.left);
                self.resolve_expr(binary.right);
                if binary.has_var_obj {
                    binary.scope.add_local(ast.Var(
                        is_mut: binary.var_obj.is_mut,
                        name: binary.var_obj.name,
                        type: .Void(),
                        level: .Local,
                        pos: binary.var_obj.pos
                    )) catch |err| report.error(
                        err.to_string(), binary.var_obj.pos
                    );
                }
            },
            .Range as range => {
                if range.has_start {
                    self.resolve_expr(range.start);
                }
                if range.has_end {
                    self.resolve_expr(range.end);
                }
            },
            .Index as index => {
                self.resolve_expr(index.left);
                self.resolve_expr(index.index);
            },
            .Block as block => {
                for mut stmt in block.stmts {
                    self.resolve_stmt(stmt);
                }
                if block.is_expr {
                    self.resolve_expr(block.expr);
                }
            },
            .Return as return_expr => if return_expr.has_expr {
                self.resolve_expr(return_expr.expr);
            },
            .Guard as guard => {
                for var_ in guard.vars {
                    guard.scope.add_local(ast.Var(
                        is_mut: var_.is_mut,
                        name: var_.name,
                        level: .Local,
                        type: .Void(),
                        pos: var_.pos
                    )) catch |err| report.error(
                        err.to_string(), var_.pos
                    );
                }
                self.resolve_expr(guard.expr);
                if guard.has_cond {
                    self.resolve_expr(guard.cond);
                }
            },
            .If as if_expr => {
                for branch in if_expr.branches {
                    if !branch.is_else {
                        self.resolve_expr(branch.cond);
                    }
                    self.resolve_expr(branch.expr);
                }
            },
            .Switch as switch_expr => {
                self.resolve_expr(switch_expr.expr);
                for branch in switch_expr.branches {
                    if !branch.is_else {
                        for mut pattern in branch.patterns {
                            self.resolve_expr(pattern);
                        }
                        if branch.has_var {
                            switch_expr.scope.add_local(ast.Var(
                                is_mut: branch.var_is_mut,
                                name: branch.var_name,
                                level: .Local,
                                type: .Void(),
                                pos: branch.var_pos
                            )) catch |err| report.error(
                                err.to_string(), branch.var_pos
                            );
                        }
                        if branch.has_cond {
                            self.resolve_expr(branch.cond);
                        }
                    }
                    self.resolve_expr(branch.expr);
                }
            },
            .Assign as assign_expr => {
                self.resolve_expr(assign_expr.left);
                self.resolve_expr(assign_expr.right);
            }
        }
    }

    func resolve_ident(mut self, mut ident: ast.Expr.Ident) {
        if ident.name == "_" {
            ident.found = true;
            ident.is_obj = true;
            return; // ignore special var
        } else if ident.is_comptime {
            if builtin := self.table.find_builtin(ident.name) {
                if builtin !is .Const {
                    report.error(
                        "builtin `{}` is not a constant".fmt(ident.name), ident.pos
                    );
                }
            } else {
                report.error("unknown builtin constant `{}`".fmt(ident.name), ident.pos);
            }
            return;
        } else if obj := ident.scope.lookup(ident.name) {
            ident.found = true;
            ident.is_obj = true;
            ident.sym = obj;
        } else if imported := self.source_file.imported_symbols.find(ident.name) {
            if !(imported.sym is ast.TypeSym as type_sym and type_sym.info is .Placeholder) {
                imported.is_used = true;
                ident.found = true;
                ident.is_sym = true;
                ident.sym = imported.sym;
            }
        } else if sym := self.find_prelude(ident.name) {
            ident.found = true;
            ident.is_sym = true;
            ident.sym = sym;
        } else if sym := self.sym.scope.find(ident.name) {
            if !(sym is ast.TypeSym as type_sym and type_sym.info is .Placeholder) {
                ident.found = true;
                ident.is_sym = true;
                ident.sym = sym;
            }
        } else if sym := self.table.universe.scope.find(ident.name) {
            if sym is ast.Module {
                mut err := report.error_builder(
                    "use of non-imported module `{}`".fmt(ident.name), ident.pos
                );
                err.add_help("add an `import` with the path to the module");
                err.emit();
                return;
            }
            ident.found = true;
            ident.is_sym = true;
            ident.sym = sym;
        } else if self.self_sym_is_set {
            if sym := self.self_sym.scope.find(ident.name) {
                if !(sym is ast.TypeSym as type_sym and type_sym.info is .Placeholder) {
                    if sym is ast.Func {
                        mut err := report.error_builder(
                            "cannot find `{}` in this scope".fmt(ident.name), ident.pos
                        );
                        err.add_help("use `Self.{}()` instead", sym.name);
                        err.emit();
                        return;
                    }
                    ident.found = true;
                    ident.is_sym = true;
                    ident.sym = sym;
                }
            }
        }

        if ident.found {
            if ident.is_sym and ident.sym is ast.SymRef as mut sym_ref {
                ident.sym = self.clean_symbol_reference(sym_ref);
            }
        } else {
            report.error("cannot find `{}` in this scope".fmt(ident.name), ident.pos);
        }
    }

    func resolve_selector(mut self, mut selector: ast.Expr.Selector) {
        self.resolve_expr(selector.left);
        if !(selector.is_indirect or selector.is_option_check) {
            switch selector.left is {
                .SelfTy as self_ty if self_ty.found => {
                    selector.is_path = true;
                    selector.left_sym = self_ty.sym;
                },
                .Ident as ident if ident.found and ident.is_sym => {
                    if ident.sym is ast.Var or ident.sym is ast.Const {
                        return;
                    }
                    selector.is_path = true;
                    selector.left_sym = ident.sym;
                },
                .Selector as selector2 if selector2.found and selector2.is_path => {
                    if selector2.sym is ast.Var or selector2.sym is ast.Const {
                        return;
                    }
                    selector.is_path = true;
                    selector.left_sym = selector2.sym;
                }
            }
            if selector.is_path {
                if sym := self.find_symbol(
                    selector.left_sym, selector.field_name, selector.field_pos
                ) {
                    selector.found = true;
                    selector.sym = sym;
                }
            }
        }
    }

    func find_symbol(mut self, sym: ast.Sym, name: string, pos: token.Pos) ?ast.Sym {
        mut sym_ := sym;
        if sym is ast.SymRef as mut sym_ref {
            sym_ = self.clean_symbol_reference(sym_ref);
        }
        if s := sym_.scope.find(name) {
            self.check_vis(s, pos);
            return if s is ast.SymRef as mut sym_ref2 {
                self.clean_symbol_reference(sym_ref2)
            } else {
                s
            };
        } else if sym_ is ast.TypeSym as type_sym and type_sym.info is .Enum as enum_info {
            if enum_info.has_variant(name) {
                return sym_;
            }
            report.error("enum `{}` has no variant `{}`".fmt(sym_.name, name), pos);
            return none;
        }
        report.error(
            "could not find `{}` in {} `{}`".fmt(name, sym_.type_of(), sym_.name),
            pos
        );
        return none;
    }

    func find_prelude(self, name: string) ?ast.Sym {
        for &prelude in self.preludes {
            if prelude.name == name {
                return prelude.sym;
            }
        }
        return none;
    }

    func clean_symbol_reference(mut self, mut sym_ref: ast.SymRef) ast.Sym {
        if !sym_ref.ref_resolved {
            self.resolve_expr(sym_ref.ref_expr);
            if sym_ref.ref_expr is .Ident as ident and ident.found and ident.is_sym {
                sym_ref.ref = ident.sym;
                sym_ref.ref_resolved = true;
            } else if sym_ref.ref_expr is .Selector as selector and selector.found and
                selector.is_path {
                sym_ref.ref = selector.sym;
                sym_ref.ref_resolved = true;
            }
            if sym_ref.ref is ast.SymRef as mut sym_ref2 {
                sym_ref.ref = self.clean_symbol_reference(sym_ref2);
            }
        }
        return sym_ref.ref;
    }
}
