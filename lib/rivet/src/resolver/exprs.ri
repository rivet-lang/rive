// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ ast, report, token };

extend Resolver {
    func resolve_expr(+mut self, mut expr: +mut ast.Expr) {
        match expr {
            .Empty(empty_pos) -> report.error("bug: unexpected empty expression found", empty_pos),
            .ComptimeIf(comptime_if) -> {
                exprs := ast.nodes_to_exprs(
                    self.env.evalue_comptime_if(comptime_if)
                );
                self.resolve_expr(exprs[0]);
            },
            .Paren(paren) -> self.resolve_expr(paren.expr),
            .Type(type) -> _ = self.resolve_type(type),
            .Ident(ident) -> self.resolve_ident(ident),
            .Selector(selector) -> self.resolve_selector(selector),
            .Indirect(indirect) -> self.resolve_expr(indirect.left),
            .OptionCheck(option_check) -> self.resolve_expr(option_check.left),
            .SelfTy(self_ty) -> if self.self_sym_is_set {
                self_ty.sym = self.self_sym;
                self_ty.found = true;
            } else {
                report.error("cannot resolve `Self` expression", self_ty.pos);
            },
            .SelfLiteral(self_lit) -> if self.self_sym_is_set {
                self_lit.sym = self.self_sym;
                self_lit.found = true;
                self_lit.obj = @as(+mut ast.Var, self_lit.scope.lookup("self")?);
                self_lit.obj.is_used = true;
            } else {
                report.error("cannot resolve `self` expression", self_lit.pos);
            },
            .TupleLiteral(tuple_lit) -> {
                for mut value in tuple_lit.values {
                    self.resolve_expr(value);
                }
            },
            .ArrayCtor(array_ctor) -> {
                _ = self.resolve_type(array_ctor.elem_type);
                if mut init_value := array_ctor.init_value {
                    self.resolve_expr(init_value);
                }
                if mut len_value := array_ctor.len_value {
                    self.resolve_expr(len_value);
                    if !array_ctor.is_dyn {
                        if len_res := self.eval_size(len_value) {
                            if len_res <= 0 {
                                report.error(
                                    "array size cannot be zero or negative", len_value.position()
                                );
                            }
                            array_ctor.len_res = @as(uint, len_res);
                        } else {
                            report.error(
                                "cannot calculate array size in comptime", len_value.position()
                            );
                        }
                    }
                }
                if mut cap_value := array_ctor.cap_value {
                    self.resolve_expr(cap_value);
                }
            },
            .ArrayLiteral(array_lit) -> {
                for mut value in array_lit.values {
                    self.resolve_expr(value);
                }
            },
            .BuiltinCall(builtin_call) -> {
                if builtin := self.env.find_builtin(builtin_call.name) {
                    if builtin is .Func {
                        builtin_call.builtin = builtin;
                        for mut arg in builtin_call.args {
                            self.resolve_expr(arg.expr);
                        }
                    } else {
                        report.error(
                            "`{}` is not a builtin function".fmt(builtin_call.name),
                            builtin_call.pos
                        );
                    }
                } else {
                    report.error(
                        "unknown builtin function `{}`".fmt(builtin_call.name),
                        builtin_call.pos
                    );
                }
            },
            .Call(call) -> {
                self.resolve_expr(call.left);
                for mut arg in call.args {
                    self.resolve_expr(arg.expr);
                }
                if call.has_spread_expr {
                    self.resolve_expr(call.spread_expr);
                }
                if call.err_handler.has_expr {
                    if call.err_handler.has_varname {
                        self.check_variable_shadowing(
                            call.err_handler.varname, call.err_handler.varname_pos
                        );
                        call.err_handler.scope.add_local(+mut ast.Var(
                            name: call.err_handler.varname,
                            type: self.env.throwable_t,
                            level: .Local,
                            pos: call.err_handler.varname_pos
                        )) catch |err| report.error(
                            err.to_string(),
                            call.err_handler.varname_pos
                        );
                    }
                    self.resolve_expr(call.err_handler.expr);
                }
            },
            .Unary(unary) -> self.resolve_expr(unary.right),
            .Binary(binary) -> {
                self.resolve_expr(binary.left);
                self.resolve_expr(binary.right);
                if binary.has_var_obj {
                    self.check_variable_shadowing(binary.var_obj.name, binary.var_obj.pos);
                    binary.var_obj.sym = ast.Var(
                        is_mut: binary.var_obj.is_mut && !binary.var_obj.is_ref,
                        name: binary.var_obj.name,
                        type: .Void,
                        level: .Local,
                        pos: binary.var_obj.pos
                    );
                    binary.scope.add_local(binary.var_obj.sym) catch |err| report.error(
                        err.to_string(), binary.var_obj.pos
                    );
                }
            },
            .Range(range) -> {
                if range.has_start {
                    self.resolve_expr(range.start);
                }
                if range.has_end {
                    self.resolve_expr(range.end);
                }
            },
            .Index(index) -> {
                self.resolve_expr(index.left);
                self.resolve_expr(index.index);
            },
            .Block(block) -> {
                self.resolve_stmts(block.stmts);
                if block.is_expr {
                    self.resolve_expr(block.expr);
                }
            },
            .Return(return_expr) -> if return_expr.has_expr {
                self.resolve_expr(return_expr.expr);
            },
            .Throw(throw_expr) -> self.resolve_expr(throw_expr.expr),
            .Guard(guard) -> {
                for mut var_ in guard.vars {
                    self.check_variable_shadowing(var_.name, var_.pos);
                    var_.sym = ast.Var(
                        is_mut: var_.is_mut,
                        name: var_.name,
                        level: .Local,
                        type: .Void,
                        pos: var_.pos
                    );
                    guard.scope.add_local(var_.sym) catch |err| report.error(
                        err.to_string(), var_.pos
                    );
                }
                self.resolve_expr(guard.expr);
                if guard.has_cond {
                    self.resolve_expr(guard.cond);
                }
            },
            .If(if_expr) -> {
                for mut branch in if_expr.branches {
                    if !branch.is_else {
                        self.resolve_expr(branch.cond);
                    }
                    self.resolve_expr(branch.expr);
                }
            },
            .Match(match_expr) -> {
                self.resolve_expr(match_expr.expr);
                for mut branch in match_expr.branches {
                    if !branch.is_else {
                        for mut pattern in branch.patterns {
                            self.resolve_expr(pattern);
                        }
                        if branch_var := branch.branch_var {
                            self.check_variable_shadowing(branch_var.name, branch_var.pos);
                            match_expr.scope.add_local(+mut ast.Var(
                                is_mut: branch_var.is_mut && !branch_var.is_ref,
                                name: branch_var.name,
                                level: .Local,
                                type: .Void,
                                pos: branch_var.pos
                            )) catch |err| report.error(
                                err.to_string(), branch_var.pos
                            );
                        }
                        if branch.has_cond {
                            self.resolve_expr(branch.cond);
                        }
                    }
                    self.resolve_expr(branch.expr);
                }
            },
            .Assign(assign_expr) -> {
                self.resolve_expr(assign_expr.left);
                self.resolve_expr(assign_expr.right);
            },
            else -> {}
        }
    }

    func resolve_ident(+mut self, mut ident: +mut ast.Expr.Ident) {
        if ident.name == "_" {
            ident.found = true;
            ident.is_obj = true;
            return; // ignore special var
        } else if ident.is_comptime {
            if builtin := self.env.find_builtin(ident.name) {
                if builtin is .Const {
                    ident.builtin = builtin;
                } else {
                    report.error(
                        "builtin `{}` is not a constant".fmt(ident.name), ident.pos
                    );
                }
            } else {
                report.error("unknown builtin constant `{}`".fmt(ident.name), ident.pos);
            }
            return;
        } else if mut obj := ident.scope.lookup(ident.name) {
            ident.found = true;
            ident.is_obj = true;
            ident.sym = obj;
            @as(+mut ast.Var, obj).is_used = true;
        } else if mut imported := self.source_file.imported_symbols.find(ident.name) {
            if !(imported.sym is ast.TypeSym(type_sym) && type_sym.info is .Placeholder) {
                imported.is_used = true;
                ident.found = true;
                ident.is_sym = true;
                ident.sym = imported.sym;
            }
        } else if sym := self.find_prelude(ident.name) {
            ident.found = true;
            ident.is_sym = true;
            ident.sym = sym;
        } else if sym := self.sym.scope.find(ident.name) {
            if !(sym is ast.TypeSym(type_sym) && type_sym.info is .Placeholder) {
                ident.found = true;
                ident.is_sym = true;
                ident.sym = sym;
            }
        } else if sym := self.env.universe.scope.find(ident.name) {
            if sym is ast.Module {
                err := report.error_builder(
                    "use of non-imported module `{}`".fmt(ident.name), ident.pos
                );
                err.add_help("add an `import` with the path to the module");
                err.emit();
                return;
            }
            ident.found = true;
            ident.is_sym = true;
            ident.sym = sym;
        } else if self.self_sym_is_set {
            if sym := self.self_sym.scope.find(ident.name) {
                if !(sym is ast.TypeSym(type_sym) && type_sym.info is .Placeholder) {
                    ident.found = true;
                    ident.is_sym = true;
                    ident.sym = sym;
                }
            }
        }

        if ident.found {
            if ident.is_sym && ident.sym is ast.SymRef(sym_ref) {
                ident.sym = self.clean_symbol_reference(sym_ref);
            }
            self.check_symbol_abi(ident.sym, ident.pos);
        } else {
            report.error("cannot find `{}` in this scope".fmt(ident.name), ident.pos);
        }
    }

    func resolve_selector(+mut self, mut selector: +mut ast.Expr.Selector) {
        self.resolve_expr(selector.left);
        match selector.left {
            .SelfTy(self_ty) if self_ty.found -> {
                selector.is_path = true;
                selector.left_sym = self_ty.sym;
            },
            .Ident(ident) if ident.found && ident.is_sym -> {
                if ident.sym is ast.Var || ident.sym is ast.Const {
                    return;
                }
                selector.is_path = true;
                selector.left_sym = ident.sym;
            },
            .Selector(selector2) if selector2.found && selector2.is_path -> {
                if selector2.sym is ast.Var || selector2.sym is ast.Const {
                    return;
                }
                selector.is_path = true;
                selector.left_sym = selector2.sym;
            },
            else -> return
        }
        if selector.is_path {
            if sym := self.find_symbol(
                selector.left_sym, selector.field_name, selector.field_pos
            ) {
                selector.found = true;
                selector.sym = sym;
                self.check_symbol_abi(sym, selector.pos);
            }
        }
    }

    func find_symbol(+mut self, mut sym: ast.Sym, name: string, pos: token.Pos) -> ?ast.Sym {
        mut sym_ := sym;
        if sym is ast.SymRef(sym_ref) {
            sym_ = self.clean_symbol_reference(sym_ref);
        }
        if mut s := sym_.scope.find(name) {
            self.check_vis(s, pos);
            return if s is ast.SymRef(sym_ref2) {
                self.clean_symbol_reference(sym_ref2)
            } else {
                s
            };
        } else if sym_ is ast.TypeSym(type_sym) && type_sym.info is .Enum(enum_info) {
            if enum_info.has_variant(name) {
                return sym_;
            }
            report.error("enum `{}` has no variant `{}`".fmt(sym_.name, name), pos);
            return none;
        }
        report.error(
            "could not find `{}` in {} `{}`".fmt(name, sym_.type_of(), sym_.name),
            pos
        );
        return none;
    }

    func find_prelude(+self, name: string) -> ?ast.Sym {
        for &prelude in self.preludes {
            if prelude.name == name {
                return prelude.sym;
            }
        }
        return none;
    }

    func clean_symbol_reference(+mut self, mut sym_ref: +mut ast.SymRef) -> ast.Sym {
        if !sym_ref.ref_resolved {
            self.resolve_expr(sym_ref.ref_expr);
            if sym_ref.ref_expr is .Ident(ident) && ident.found && ident.is_sym {
                sym_ref.ref = ident.sym;
                sym_ref.ref_resolved = true;
            } else if sym_ref.ref_expr is .Selector(selector) && selector.found &&
                selector.is_path {
                sym_ref.ref = selector.sym;
                sym_ref.ref_resolved = true;
            }
            if sym_ref.ref is ast.SymRef(sym_ref2) {
                sym_ref.ref = self.clean_symbol_reference(sym_ref2);
            }
        }
        return sym_ref.ref;
    }

    func check_symbol_abi(+mut self, sym: ast.Sym, pos: token.Pos) {
        if sym.abi != .Rivet {
            if self.source_file_abi == sym.abi {
                self.different_abi_usage_count += 1;
            } else {
                warn := report.warn_builder(
                    "using a symbol whose ABI is different from that of the current file", pos
                );
                warn.add_note("`{}` is declared as `extern ({})`", sym.name, sym.abi);
                warn.add_help(
                    "consider adding `.{}.ri` extension to current filename", sym.abi.lower()
                );
                warn.emit();
            }
        }
    }
}
