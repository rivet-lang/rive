// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../ast;
import ../token;
import ../report;

import std/fs.Path;

struct Prelude {
    name: string;
    sym: ast.Sym;
}

#[boxed]
pub struct Resolver {
    mut env: ast.Env;

    mut sym: ast.Sym := ast.InvalidSym();
    mut self_sym: ast.TypeSym;
    mut preludes: []Prelude;

    mut self_sym_is_set: bool;

    mut source_file: ast.SourceFile;
    mut source_file_abi: ast.ABI;
    mut different_abi_usage_count: uint;

    pub func resolve_files(mut self, source_files: []ast.SourceFile) {
        Register(self.env).walk_files(source_files);
        if report.total_errors() > 0 {
            return;
        }
        self.preludes = +[
            Prelude("Throwable", self.env.throwable_sym)
        ];
        for sf in source_files {
            self.sym = sf.mod;
            self.source_file = sf;
            self.detect_source_file_abi();
            self.different_abi_usage_count = 0;
            self.resolve_decls(self.source_file.decls);
            if self.source_file_abi == .Rivet && self.different_abi_usage_count > 0 {
                report.warn("filename requires ABI specification", sf.pos);
            }
        }
    }

    func detect_source_file_abi(mut self) {
        filename := Path.file_name(self.source_file.path);
        if filename.ends_with(".c.ri") {
            self.source_file_abi = .C;
        } else {
            self.source_file_abi = .Rivet;
        }
    }

    func check_vis(self, sym: ast.Sym, pos: token.Pos) {
        if !sym.is_public && !self.source_file.mod.has_access_to(sym) {
            report.error("{} `{}` is private".fmt(sym.type_of(), sym.name), pos);
        }
    }

    func eval_size(mut self, mut expr: ast.Expr) -> ?int {
        return match expr {
            .ComptimeIf(mut comptime_if) -> {
                mut ct_expr := ast.nodes_to_exprs(self.env.evalue_comptime_if(comptime_if))[0];
                self.eval_size(ct_expr)
            },
            .Block(mut block) if block.is_expr -> self.eval_size(block.expr),
            .Paren(mut paren) -> self.eval_size(paren.expr),
            .IntegerLiteral(int_lit) -> int_lit.value.to_int() catch return none,
            .Ident(mut ident) -> {
                self.resolve_ident(ident);
                if ident.found {
                    self.eval_sym(ident.sym, ident.pos)
                } else {
                    none
                }
            },
            .Selector(mut selector) -> {
                self.resolve_selector(selector);
                if selector.found {
                    self.eval_sym(selector.sym, selector.pos)
                } else {
                    none
                }
            },
            .Binary(mut binary) -> if left := self.eval_size(binary.left) {
                if right := self.eval_size(binary.right) {
                    match binary.op {
                        .Plus -> left + right,
                        .Minus -> left - right,
                        .Mul -> left * right,
                        .Div -> left / right,
                        .Mod -> left % right,
                        .Amp -> left & right,
                        .Pipe -> left | right,
                        .Xor -> left ^ right,
                        .Lshift -> @as(int, @as(uint, left) << right),
                        .Rshift -> left >> right,
                        else -> none
                    }
                } else {
                    none
                }
            } else {
                none
            },
            .BuiltinCall(mut builtin_call) if builtin_call.name in ["size_of", "align_of"] -> {
                if builtin_call.args[0].expr is .Type(mut type) && self.resolve_type(type) {
                    (size, align) := self.env.type_size(type);
                    if builtin_call.name == "size_of" {
                        @as(int, size)
                    } else {
                        @as(int, align)
                    }
                } else {
                    0
                }
            },
            else -> none
        };
    }

    func eval_sym(mut self, mut sym: ast.Sym, pos: token.Pos) -> ?int {
        if sym is ast.Const(mut const_) {
            if !const_.has_evaled_size {
                const_.evaled_size = self.eval_size(const_.expr)?;
            }
            return const_.evaled_size;
        }
        report.error("`{}` is not a constant value".fmt(sym.name), pos);
        return none;
    }

    func check_variable_shadowing(self, name: string, pos: token.Pos) {
        if self.source_file.imported_symbols.exists(name) {
            report.error(
                "name `{}` hide an imported symbol".fmt(name), pos
            );
        }
    }
}
