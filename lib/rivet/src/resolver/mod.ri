// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/conv;

import ../ast;
import ../prefs;
import ../token;
import ../report;

struct Prelude {
    name: string;
    sym: ast.Sym;
}

#[boxed]
public struct Resolver {
    mut table: ast.Table;
    mut prefs: prefs.Prefs;

    mut sym: ast.Sym := ast.InvalidSym();
    mut self_sym: ast.TypeSym;
    mut preludes: []Prelude;

    mut self_sym_is_set: bool;

    mut source_file: ast.SourceFile;

    public func resolve_files(mut self, source_files: []ast.SourceFile) {
        Register(self.table, self.prefs).walk_files(source_files);
        if report.total_errors() > 0 {
            return;
        }
        self.preludes = [
            Prelude("Throwable", self.table.throwable_sym)
        ];
        for sf in source_files {
            self.sym = sf.mod;
            self.source_file = sf;
            self.resolve_decls(self.source_file.decls);
            // check unused imports
            for imported_sym in sf.imported_symbols.syms {
                if !imported_sym.is_used and imported_sym.name != "_" {
                    report.warn(
                        "{} `{}` is imported but never used".fmt(
                            imported_sym.sym.type_of(), imported_sym.sym.name
                        ), imported_sym.pos
                    );
                }
            }
        }
    }

    func check_vis(self, sym: ast.Sym, pos: token.Pos) {
        if !sym.is_public and !self.source_file.mod.has_access_to(sym) {
            report.error("{} `{}` is private".fmt(sym.type_of(), sym.name), pos);
        }
    }

    func eval_size(mut self, mut expr: ast.Expr) -> ?isize {
        return match expr is {
            .Paren as paren => self.eval_size(paren.expr),
            .IntegerLiteral as int_lit => conv.string_to_isize(int_lit.value) catch return none,
            .Ident as mut ident => {
                self.resolve_ident(ident);
                if ident.found {
                    self.eval_sym(ident.sym, ident.pos)
                } else {
                    none
                }
            },
            .Selector as mut selector => {
                self.resolve_selector(selector);
                if selector.found {
                    self.eval_sym(selector.sym, selector.pos)
                } else {
                    none
                }
            },
            .Binary as binary => if left := self.eval_size(binary.left) {
                if right := self.eval_size(binary.right) {
                    match binary.op {
                        .Plus => left + right,
                        .Minus => left - right,
                        .Mul => left * right,
                        .Div => left / right,
                        .Mod => left % right,
                        .Amp => left & right,
                        .Pipe => left | right,
                        .Xor => left ^ right,
                        .Lshift => @as(isize, @as(usize, left) << right),
                        .Rshift => left >> right,
                        else => none
                    }
                } else {
                    none
                }
            } else {
                none
            },
            .BuiltinCall as builtin_call if builtin_call.name in ["size_of", "align_of"] => {
                if builtin_call.args[0].expr is .Type as mut type and self.resolve_type(type) {
                    (size, align) := self.table.type_size(type);
                    if builtin_call.name == "size_of" {
                        @as(isize, size)
                    } else {
                        @as(isize, align)
                    }
                } else {
                    0
                }
            },
            else => none
        };
    }

    func eval_sym(mut self, sym: ast.Sym, pos: token.Pos) -> ?isize {
        if sym is ast.Const as const_ {
            if !const_.has_evaled_size {
                const_.evaled_size = self.eval_size(const_.expr)?;
            }
            return const_.evaled_size;
        }
        report.error("`{}` is not a constant value".fmt(sym.name), pos);
        return none;
    }

    func check_variable_shadowing(self, name: string, pos: token.Pos) {
        if self.source_file.imported_symbols.exists(name) {
            report.error(
                "name `{}` hide an imported symbol".fmt(name), pos
            );
        }
    }
}
