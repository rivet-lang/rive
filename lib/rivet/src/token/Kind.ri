// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;

struct KindMap {
    key: Kind;
    value: string;
}

var kindStrings := [
    KindMap(.Unknown, "unknown"),
    KindMap(.EndOfFile, "end of file"),
    KindMap(.DocComment, "doc-comment"),
    KindMap(.Name, "name"),
    KindMap(.Number, "number"),
    KindMap(.Char, "character"),
    KindMap(.String, "string"),
    KindMap(.Plus, "+"),
    KindMap(.Minus, "-"),
    KindMap(.Mul, "*"),
    KindMap(.Div, "/"),
    KindMap(.Mod, "%"),
    KindMap(.DeclAssign, ":="),
    KindMap(.Assign, "="),
    KindMap(.PlusAssign, "+="),
    KindMap(.MinusAssign, "-="),
    KindMap(.MulAssign, "*="),
    KindMap(.DivAssign, "/="),
    KindMap(.ModAssign, "%="),
    KindMap(.AmpAssign, "&="),
    KindMap(.PipeAssign, "|="),
    KindMap(.XorAssign, "^="),
    KindMap(.Eq, "=="),
    KindMap(.Ne, "!="),
    KindMap(.Lt, "<"),
    KindMap(.Gt, ">"),
    KindMap(.Le, "<="),
    KindMap(.Ge, ">="),
    KindMap(.Lshift, "<<"),
    KindMap(.Rshift, ">>"),
    KindMap(.Dot, "."),
    KindMap(.DotDot, ".."),
    KindMap(.Ellipsis, "..."),
    KindMap(.Hash, "#"),
    KindMap(.At, "@"),
    KindMap(.Arrow, "->"),
    KindMap(.Comma, ","),
    KindMap(.Colon, ":"),
    KindMap(.Semicolon, ";"),
    KindMap(.Question, "?"),
    KindMap(.OrElse, "??"),
    KindMap(.Bang, "!"),
    KindMap(.Amp, "&"),
    KindMap(.Pipe, "|"),
    KindMap(.Xor, "^"),
    KindMap(.BitNot, "~"),
    KindMap(.Lbrace, "{"),
    KindMap(.Rbrace, "}"),
    KindMap(.Lbracket, "["),
    KindMap(.Rbracket, "]"),
    KindMap(.Lparen, "("),
    KindMap(.Rparen, ")"),

    // keywords
    KindMap(.KwAlias, "alias"),
    KindMap(.KwAnd, "and"),
    KindMap(.KwAs, "as"),
    KindMap(.KwBreak, "break"),
    KindMap(.KwCatch, "catch"),
    KindMap(.KwComptime, "comptime"),
    KindMap(.KwConst, "const"),
    KindMap(.KwContinue, "continue"),
    KindMap(.KwDefer, "defer"),
    KindMap(.KwElse, "else"),
    KindMap(.KwEnum, "enum"),
    KindMap(.KwExtend, "extend"),
    KindMap(.KwExtern, "extern"),
    KindMap(.KwFalse, "false"),
    KindMap(.KwFunc, "func"),
    KindMap(.KwFor, "for"),
    KindMap(.KwFrom, "from"),
    KindMap(.KwIf, "if"),
    KindMap(.KwImport, "import"),
    KindMap(.KwIn, "in"),
    KindMap(.KwIs, "is"),
    KindMap(.KwMut, "mut"),
    KindMap(.KwNone, "none"),
    KindMap(.KwNotIn, "!in"),
    KindMap(.KwNotIs, "!is"),
    KindMap(.KwOr, "or"),
    KindMap(.KwPub, "pub"),
    KindMap(.KwReturn, "return"),
    KindMap(.KwSelf, "self"),
    KindMap(.KwSelfTy, "Self"),
    KindMap(.KwStruct, "struct"),
    KindMap(.KwMatch, "match"),
    KindMap(.KwTest, "test"),
    KindMap(.KwThrow, "throw"),
    KindMap(.KwTrait, "trait"),
    KindMap(.KwTrue, "true"),
    KindMap(.KwUnsafe, "unsafe"),
    KindMap(.KwVar, "var"),
    KindMap(.KwWhile, "while")
];

var keywordsTable := kindStrings[@as(uint, Kind.KeywordBegin)..];

pub enum Kind < traits.Stringable {
    Unknown, // unknown
    EndOfFile, // end of file
    DocComment, // doc-comment
    Name, // name
    Number, // number
    Char, // character
    String, // string
    Plus, // +
    Minus, // -
    Mul, // *
    Div, // /
    Mod, // %
    DeclAssign, // :=
    Assign, // =
    PlusAssign, // +=
    MinusAssign, // -=
    MulAssign, // *=
    DivAssign, // /=
    ModAssign, // %=
    AmpAssign, // &=
    PipeAssign, // |=
    XorAssign, // ^=
    Eq, // ==
    Ne, // !=
    Lt, // <
    Gt, // >
    Le, // <=
    Ge, // >=
    Lshift, // <<
    Rshift, // >>
    Dot, // .
    DotDot, // ..
    Ellipsis, // ...
    Hash, // #
    At, // @
    Arrow, // ->
    Comma, // ,
    Colon, // :
    Semicolon, // ;
    Question, // ?
    OrElse, // ??
    Bang, // !
    Amp, // &
    Pipe, // |
    Xor, // ^
    BitNot, // ~
    Lbrace, // {
    Rbrace, // }
    Lbracket, // [
    Rbracket, // ]
    Lparen, // (
    Rparen, // )

    KeywordBegin,
    // ========== keywords ==========
    KwAlias, // alias
    KwAnd, // and
    KwAs, // as
    KwBreak, // break
    KwCatch, // catch
    KwComptime, // comptime
    KwConst, // const
    KwContinue, // continue
    KwDefer, // defer
    KwElse, // else
    KwEnum, // enum
    KwExtend, // extend
    KwExtern, // extern
    KwFalse, // false
    KwFunc, // func
    KwFor, // for
    KwFrom, // from
    KwIf, // if
    KwImport, // import
    KwIn, // in
    KwIs, // is
    KwMut, // mut
    KwNone, // none
    KwNotIn, // !in
    KwNotIs, // !is
    KwOr, // or
    KwPub, // pub
    KwReturn, // return
    KwSelf, // self
    KwSelfTy, // Self
    KwStruct, // struct
    KwMatch, // match
    KwTest, // test
    KwThrow, // throw
    KwTrait, // trait
    KwTrue, // true
    KwUnsafe, // unsafe
    KwVar, // var
    KwWhile, // while
    // ==============================

    KeywordEnd;

    #[inline]
    pub func lookup(str: string) -> Self {
        for &km in keywordsTable {
            if km.value == str {
                return km.key;
            }
        }
        return .Name;
    }

    #[inline]
    pub func single(self) -> Kind {
        return match self {
            .PlusAssign -> .Plus,
            .MinusAssign -> .Minus,
            .MulAssign -> .Mul,
            .DivAssign -> .Div,
            .ModAssign -> .Mod,
            .AmpAssign -> .Amp,
            .PipeAssign -> .Pipe,
            .XorAssign -> .Xor,
            else -> self
        };
    }

    #[inline]
    pub func is_start_of_type(self) -> bool {
        return self in [
            .Bang, .Name, .Lparen, .Amp, .Mul, .Lbracket, .Question, .KwSelfTy,
            .KwFunc
        ];
    }

    #[inline]
    pub func is_assign(self) -> bool {
        return self in [
            .DeclAssign, .Assign, .PlusAssign, .MinusAssign, .MulAssign, .DivAssign,
            .ModAssign, .AmpAssign, .PipeAssign, .XorAssign
        ];
    }

    #[inline]
    pub func is_relational(self) -> bool {
        return self in [
            .Eq, .Ne, .Lt, .Gt, .Le, .Ge, .KwIs, .KwNotIs, .KwIn, .KwNotIn
        ];
    }

    pub func to_string(&self) -> string {
        for &km in kindStrings {
            if km.key == self.* {
                return km.value;
            }
        }
        return "unknown-kind";
    }
}

#[inline]
pub func is_keyword(lit: string) -> bool {
    return Kind.lookup(lit) != .Name;
}

#[inline]
pub func is_overloadable_operator(kind: Kind) -> bool {
    return kind in [.Plus, .Minus, .Mul, .Div, .Mod, .Eq, .Ne, .Lt, .Gt, .Le, .Ge];
}

#[inline]
pub func overloadable_operator_name(kind: Kind) -> string {
    return match kind {
        .Plus -> "_add_",
        .Minus -> "_sub_",
        .Mul -> "_mul_",
        .Div -> "_div_",
        .Mod -> "_mod_",
        .Eq -> "_eq_",
        .Ne -> "_ne_",
        .Lt -> "_lt_",
        .Gt -> "_gt_",
        .Le -> "_le_",
        .Ge -> "_ge_",
        else -> "_unknown_operator_"
    };
}
