// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;

import ../utils;

public var NO_POS = Pos();

public struct Pos : traits.Stringable {
    public file: string;
    public line: usize;
    public mut col: usize;
    public mut len: usize;
    public pos: usize;

    public end_line: usize;
    public end_col: usize;
    public is_multiline: bool;

    [inline]
    public func +(&self, other: &Pos) Pos {
        return if other.line > self.line {
            Pos(
                line: self.line,
                end_line: other.line,
                end_col: other.col,
                len: other.pos - self.pos + other.len,
                is_multiline: true,
                ...self.*
            )
        } else {
            Pos(len: other.pos - self.pos + other.len, ...self.*)
        };
    }

    [inline]
    public func to_report_string(&self) string {
        return if self.is_multiline {
            "{}:{}:{}-{}:{}".fmt(
                utils.path_styled_for_error_messages(self.file), self.line + 1,
                utils.max(1, self.col + 1), self.end_line + 1,
                utils.max(1, self.end_col + 1)
            )
        } else {
            "{}:{}:{}".fmt(
                utils.path_styled_for_error_messages(self.file), self.line + 1,
                utils.max(1, self.col + 1)
            )
        };
    }

    [inline]
    public func to_string(&self) string {
        return if self.is_multiline {
            "{}:{}:{}-{}:{}".fmt(
                self.file, self.line + 1, self.col, self.end_line + 1, self.end_col
            )
        } else {
            "{}:{}:{}".fmt(self.file, self.line + 1, self.col)
        };
    }
}

public struct Token : traits.Stringable {
    public lit: string;
    public kind: Kind;
    public len: usize;
    public pos: Pos;

    public func to_debug_string(&self) string {
        return "rivet.token.Token(kind: '{}', lit: '{}', pos: {})".fmt(
            self.kind, self.lit, self.pos
        );
    }

    public func to_string(&self) string {
        if self.kind == .String {
            return "string literal";
        }
        mut str := self.kind.to_string();
        if !str[0].is_alnum() {
            return "token `{}`".fmt(str);
        }
        if is_keyword(self.lit) {
            str = "keyword";
        }
        if self.kind != .DocComment and self.lit != "" {
            str = str.concat(" `{}`".fmt(self.lit));
        }
        return str;
    }
}
