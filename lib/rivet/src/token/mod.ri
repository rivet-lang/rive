// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/traits;

import ../utils;

pub var no_pos := Pos();

pub struct Pos < traits.Stringable {
    pub file: string;
    pub line: uint;
    pub mut col: uint;
    pub mut len: uint;
    pub pos: uint;

    pub end_line: uint;
    pub end_col: uint;
    pub is_multiline: bool;

    #[inline]
    pub proc +(&self, other: &Pos) -> Pos {
        return if other.line > self.line {
            Pos(
                line: self.line,
                end_line: other.line,
                end_col: other.col,
                len: other.pos - self.pos + other.len,
                is_multiline: true,
                ...self.*
            )
        } else {
            Pos(len: other.pos - self.pos + other.len, ...self.*)
        };
    }

    pub proc ==(&self, other: &Pos) -> bool {
        return self.file == other.file
            && self.line == other.line
            && self.col == other.col
            && self.len == other.len
            && self.pos == other.pos
            && self.end_line == other.end_line
            && self.end_col == other.end_col
            && self.is_multiline == other.is_multiline;
    }

    #[inline]
    pub proc to_report_string(&self) -> string {
        return if self.is_multiline {
            "{}:{}:{}-{}:{}".fmt(
                utils.path_styled_for_error_messages(self.file), self.line + 1,
                utils.max(1, self.col + 1), self.end_line + 1,
                utils.max(1, self.end_col + 1)
            )
        } else {
            "{}:{}:{}".fmt(
                utils.path_styled_for_error_messages(self.file), self.line + 1,
                utils.max(1, self.col + 1)
            )
        };
    }

    #[inline]
    pub proc to_string(&self) -> string {
        return if self.is_multiline {
            "{}:{}:{}-{}:{}".fmt(
                self.file, self.line + 1, self.col, self.end_line + 1, self.end_col
            )
        } else {
            "{}:{}:{}".fmt(self.file, self.line + 1, self.col)
        };
    }
}

pub struct Token < traits.Stringable {
    pub lit: string;
    pub kind: Kind;
    pub len: uint;
    pub pos: Pos;

    pub proc to_debug_string(&self) -> string {
        return "rivet.token.Token(kind: '{}', lit: '{}', pos: {})".fmt(
            self.kind, self.lit, self.pos
        );
    }

    pub proc to_string(&self) -> string {
        if self.kind == .String {
            return "string literal";
        }
        mut str := self.kind.to_string();
        if !str[0].is_alnum() {
            return "token `{}`".fmt(str);
        }
        if is_keyword(self.lit) {
            str = "keyword";
        }
        if self.kind != .DocComment && self.lit != "" {
            str = str.concat(" `{}`".fmt(self.lit));
        }
        return str;
    }
}
