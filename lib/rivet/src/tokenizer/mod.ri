// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import std/{ process, strings };

import ../{ ast, token, utils, report, utils.{LF, CR} };

const NUM_SEP := b'_';

#[boxed]
pub struct Tokenizer {
    env: ast.Env;
    file: string := "<internal-memory>";
    text: string;
    mut pos: uint;
    mut line: uint;
    mut last_nl_pos: uint;
    pub mut all_tokens: []token.Token;
    mut tidx: uint;
    mut is_started: bool;
    mut is_cr_lf: bool;
    mut eofs: uint;

    pub proc new(text: string, env: ast.Env) -> Tokenizer {
        mut t := Tokenizer(env: env, text: text);
        t.init();
        return t;
    }

    pub proc from_file(file: string, env: ast.Env) -> Tokenizer {
        mut t := Tokenizer(
            env: env, file: file, text: utils.read_file(file) catch |err| utils.error(
                err.to_string()
            )
        );
        t.init();
        return t;
    }

    proc init(mut self) {
        self.all_tokens = []token.Token(cap: self.text.len / 3);
        self.tokenize_remaining_text();
    }

    proc tokenize_remaining_text(mut self) {
        while {
            t := self.internal_next();
            self.all_tokens.push(t);
            if t.kind == .EndOfFile {
                break;
            }
        }
    }

    #[inline]
    proc new_token(self, kind: token.Kind, lit: string := "", len: uint := 1) -> token.Token {
        return token.Token(lit, kind, len, token.Pos(
            file: self.file,
            line: self.line,
            col: utils.max(1, self.current_column() - len + 1) - 1,
            pos: self.pos - len + 1,
            len: len
        ));
    }

    #[inline]
    proc new_multiline_token(
        self, kind: token.Kind, lit: string := "", len: uint := 1,
        start_line: uint := 0, end_line: uint := 0, start_col: uint := 0
    ) -> token.Token {
        return token.Token(lit, kind, len, token.Pos(
            file: self.file,
            line: start_line,
            end_line: end_line,
            col: start_col,
            end_col: utils.max(1, self.current_column() + 1) - 2,
            pos: self.pos - len + 1,
            len: len,
            is_multiline: true
        ));
    }

    #[inline]
    proc new_eof_token(self) -> token.Token {
        return token.Token(
            kind: .EndOfFile,
            pos: token.Pos(
                file: self.file,
                line: self.line - 1,
                col: self.current_column() - 1,
                pos: self.pos,
                len: 1
            )
        );
    }

    proc end_of_file(mut self) -> token.Token {
        self.eofs += 1;
        if self.eofs > 50 {
            self.line -= 1;
            process.panic(
                "the end of file `{}` has been reached 50 times already".fmt(self.file)
            );
        }
        if self.pos != self.text.len && self.eofs == 1 {
            self.inc_line_number();
        }
        self.pos = self.text.len;
        return self.new_eof_token();
    }

    #[inline]
    proc current_char(self) -> uint8 {
        return self.text[self.pos];
    }

    #[inline]
    proc current_pos(self) -> token.Pos {
        return token.Pos(
            file: self.file,
            line: self.line,
            col: self.current_column(),
            pos: self.pos,
            len: 1
        );
    }

    #[inline]
    proc current_column(self) -> uint {
        return if self.line == 0 {
            self.pos + 1
        } else {
            self.pos - self.last_nl_pos
        };
    }

    proc ignore_line(mut self) {
        self.eat_to_end_of_line();
        self.inc_line_number();
    }

    #[inline]
    proc eat_to_end_of_line(mut self) {
        while self.pos < self.text.len && self.current_char() != LF : self.pos += 1 {}
    }

    proc inc_line_number(mut self) {
        self.last_nl_pos = utils.min(self.text.len - 1, self.pos);
        if self.is_cr_lf {
            self.last_nl_pos += 1;
        }
        self.line += 1;
    }

    #[inline]
    proc skip_whitespace(mut self) {
        while self.pos < self.text.len : self.pos += 1 {
            c := self.current_char();
            if c == 8 {
                self.pos += 1;
                continue;
            }
            if !(c == 32 || (c > 8 && c < 14) || (c == 0x85) || (c == 0xA0)) {
                return;
            }
            if c == CR && self.look_ahead(1) == LF {
                self.is_cr_lf = true;
            }
            // count `\r\n` as one line
            if utils.is_new_line(c) && !(self.text[self.pos - 1] == CR && c == LF) {
                self.inc_line_number();
            }
        }
    }

    proc matches(self, want: string, start_pos: uint) -> bool {
        end_pos := start_pos + want.len;
        if start_pos < 0 || end_pos < 0 || start_pos >= self.text.len
            || end_pos > self.text.len {
            return false;
        }
        mut pos: uint := start_pos;
        while pos < end_pos : pos += 1 {
            if self.text[pos] != want[pos - start_pos] {
                return false;
            }
        }
        return true;
    }

    #[inline]
    pub proc peek_token(self, n: uint) -> token.Token {
        idx := self.tidx + n;
        return if idx >= self.all_tokens.len {
            self.new_eof_token()
        } else {
            self.all_tokens[idx]
        };
    }

    #[inline]
    proc look_ahead(self, n: uint) -> uint8 {
        return if self.pos + n < self.text.len {
            self.text[self.pos + n]
        } else {
            0
        };
    }

    proc invalid_character(mut self) {
        len := self.text[self.pos].len_utf8();
        end := utils.min(self.pos + len, self.text.len);
        self.error("invalid character: `{}`".fmt(self.text.substr(self.pos, end)));
        self.pos += len;
    }

    // NOTE: this procedure doesn't do any decoding... it just replaces '\xc0' with
    // the byte 0xc0
    proc decode_h_escape_single(self, str: string, idx: uint) -> (uint, string) {
        end_idx := idx + 4; // "\xXX".len == 4
        if idx + 2 > str.len || end_idx > str.len {
            self.error("unfinished single hex escape started at");
            return (0, "");
        }
        return (
            end_idx,
            @as(uint8, str.substr(idx + 2, end_idx).parse_uint(16, 8) catch 0).to_string()
        );
    }

    // only handle single-byte inline escapes like '\xc0'
    proc decode_h_escapes(self, s: string, start: uint, escapes_pos: []uint) -> string {
        if escapes_pos.is_empty() {
            return s;
        }
        mut ss := []string(cap: escapes_pos.len * 2 + 1);
        ss.push(s.substr(escapes_pos[escapes_pos.len - 1] - start));
        for i, pos in escapes_pos {
            idx := pos - start;
            (end_idx, segment) := self.decode_h_escape_single(s, idx);
            ss.push(segment);
            ss.push(if i + 1 < escapes_pos.len {
                s.substr(end_idx, escapes_pos[i + 1] - start)
            } else {
                s.substr(end_idx)
            });
        }
        return utils.join(ss[:], "");
    }

    #[inline]
    proc error(self, msg: string, pos: token.Pos := self.current_pos()) {
        report.error(msg, pos);
    }

    #[inline]
    proc warn(self, msg: string, pos: token.Pos := self.current_pos()) {
        report.warn(msg, pos);
    }

    #[inline]
    proc error_builder(self, msg: string, pos: token.Pos := self.current_pos()) -> report.ReportBuilder {
        return report.error_builder(msg, pos);
    }

    #[inline]
    proc warn_builder(self, msg: string, pos: token.Pos := self.current_pos()) -> report.ReportBuilder {
        return report.warn_builder(msg, pos);
    }
}

// handle single-byte inline octal escapes like '\###'
// NOTE: this procedure doesn't do any decoding... it just replaces '\141' with
// the byte 0o141
proc decode_o_escapes(s: string, start: uint, escapes_pos: []uint) -> string {
    if escapes_pos.is_empty() {
        return s;
    }
    mut ss := []string(cap: escapes_pos.len);
    // everything before the first escape code position
    ss.push(s.substr(escapes_pos[escapes_pos.len - 1] - start));
    for i, pos in escapes_pos {
        idx := pos - start;
        end_idx := idx + 4; // "\XXX".len == 4
        ss.push(
            @as(uint8, s.substr(idx + 1, end_idx).parse_uint(8, 8) catch 0).to_string()
        );
        ss.push(if i + 1 < escapes_pos.len {
            s.substr(end_idx, escapes_pos[i + 1] - start)
        } else {
            s.substr(end_idx)
        });
    }
    return utils.join(ss[:], "");
}

proc decode_u_escape_single(str: string, idx: uint) -> (uint, string) {
    end_idx := idx + 6; // "\uXXXX".len == 6
    escaped_code_point := str.substr(idx + 2, end_idx).parse_uint(16, 32) catch 0;
    return (end_idx, @as(uint32, escaped_code_point).to_string());
}

// decode the flagged unicode escape sequences into their utf-8 bytes
proc decode_unicode_escaped_rune(str: string) -> string {
    (end_idx, segment) := decode_u_escape_single(str, 0);
    return if str.len == end_idx {
        segment
    } else {
        mut ss := []string(cap: 2);
        ss.push(segment);
        ss.push(str.substr(end_idx));
        utils.join(ss[:], "")
    };
}

proc trim_slash_line_break(s: string) -> string {
    (mut start: uint, mut ret_str) := (0, s);
    while idx := ret_str.index_after_of("\\\n", start) {
        start = idx;
        // Here, ret_str[idx] is '\', and ret_str[idx + 1] is newline. Depending on the number of 
        // backslashes before the newline, we should either treat the last one and the whitespace 
        // after it as line-break, or just ignore it:
        mut nbackslashes := 0;
        mut eidx := idx;
        while eidx >= 0 && ret_str[eidx] == '\\' : eidx -= 1 {
            nbackslashes += 1;
        }
        if idx == 0 || (nbackslashes & 1) == 1 {
            ret_str = ret_str.substr(end: idx).concat(ret_str.substr(idx + 2).trim_left(" \n\t\v\f\r"));
        } else {
            start += 1;
        }
    }
    return ret_str;
}

#[inline]
proc number_literal_without_separator(lit: string) -> string {
    return if lit.contains("_") {
        mut sb := strings.Builder.new(lit.len - lit.count("_"));
        for ch in lit.as_bytes() {
            if ch != '_' {
                sb.write_byte(ch);
            }
        }
        sb.to_string()
    } else {
        lit
    };
}
