// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../{ token, utils.{self, LF, CR} };

const SINGLE_QUOTE: uint8 := 0x27; // `'`
const BACKSLASH: uint8 := 0x5C; // '\'

extend Tokenizer {
    pub func next(^mut self) -> token.Token {
        while {
            cidx := self.tidx;
            self.tidx += 1;
            return if cidx >= self.all_tokens.len {
                self.end_of_file()
            } else {
                self.all_tokens[cidx]
            };
        }
        return self.new_eof_token();
    }

    func internal_next(^mut self) -> token.Token {
        while {
            if self.is_started {
                self.pos += 1;
            } else {
                self.is_started = true;
            }
            self.skip_whitespace();
            if self.pos >= self.text.len {
                return self.new_eof_token();
            }
            ch := self.current_char();
            nextc := self.look_ahead(1);
            if utils.is_name_char(ch) {
                name := self.read_name();
                return self.new_token(token.Kind.lookup(name), name, name.len);
            } else if ch.is_digit() {
                // decimals with 0 prefix = error
                if ch == '0' && nextc.is_digit() {
                    self.pos -= 1;
                    mut err := self.error_builder(
                        "leading zeros in decimal integer literals are not permitted"
                    );
                    err.add_help("use an `0o` prefix for octal integers");
                    err.emit();
                    self.pos += 1;
                }
                lit := self.read_number();
                return self.new_token(.Number, number_literal_without_separator(lit), lit.len);
            }
            // delimiters and operators
            match ch {
                '+' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.PlusAssign, len: 2);
                    }
                    return self.new_token(.Plus);
                },
                '-' -> {
                    if nextc == '>' {
                        self.pos += 1;
                        return self.new_token(.Arrow, len: 2);
                    } else if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.MinusAssign, len: 2);
                    }
                    return self.new_token(.Minus);
                },
                '*' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.MulAssign, len: 2);
                    }
                    return self.new_token(.Mul);
                },
                '/' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.DivAssign, len: 2);
                    } else if nextc == '/' {
                        is_doc_comment := self.look_ahead(2) == '/';
                        bytes_to_skip: uint := if is_doc_comment { 3 } else { 2 };
                        start_pos := self.pos + bytes_to_skip;
                        self.ignore_line();
                        end_pos := self.pos;
                        if self.text[self.pos - 1] != CR {
                            self.pos -= 1;
                            self.line -= 1;
                        }
                        if (is_doc_comment && self.env.prefs.is_docs) || self.env.prefs.is_fmt {
                            mut comment := self.text.substr(start_pos, end_pos);
                            // find out if this comment is on its own line (for rivet format)
                            mut is_separate_line_comment := true;
                            mut j := start_pos - bytes_to_skip;
                            while j >= 0 && self.text[j] != LF : j -= 1 {
                                if self.text[j] !in ['\t', ' '] {
                                    is_separate_line_comment = false;
                                    break;
                                }
                            }
                            if is_separate_line_comment {
                                // NOTE: ´\x01´ is used to preserve the initial whitespace in
                                // comments that are on a separate line
                                comment = "\x01".concat(comment);
                            }
                            return self.new_token(
                                if is_doc_comment {
                                    .DocComment
                                } else {
                                    .Comment
                                }, comment, comment.len
                            );
                        }
                        continue;
                    } else if nextc == '*' {
                        start_pos := self.pos;
                        start_line := self.line;
                        start_col := utils.max(1, self.current_column()) - 1;
                        self.pos += 1;
                        mut nest_count := 1;
                        while nest_count > 0 && self.pos < self.text.len - 1 {
                            self.pos += 1;
                            if self.current_char() == LF {
                                self.inc_line_number();
                                continue;
                            }
                            if self.matches("/*", self.pos) {
                                nest_count += 1;
                                continue;
                            }
                            if self.matches("*/", self.pos) {
                                nest_count -= 1;
                            }
                        }
                        end_pos := self.pos;
                        self.pos += 1;
                        if self.pos >= self.text.len {
                            self.pos = start_pos;
                            self.error("comment not terminated");
                            break;
                        }
                        if self.env.prefs.is_fmt {
                            line := self.text.substr(start_pos + 2, end_pos);
                            return self.new_multiline_token(
                                .Comment, line, line.len, start_line, self.line, start_col
                            );
                        }
                        continue;
                    }
                    return self.new_token(.Div);
                },
                '%' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.ModAssign, len: 2);
                    }
                    return self.new_token(.Mod);
                },
                '@' -> return self.new_token(.At),
                '$' -> return self.new_token(.Dollar),
                '=' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.Eq, len: 2);
                    }
                    return self.new_token(.Assign);
                },
                '<' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.Le, len: 2);
                    }
                    return self.new_token(.Lt);
                },
                '>' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.Ge, len: 2);
                    }
                    return self.new_token(.Gt);
                },
                '.' -> {
                    if nextc == '.' && self.look_ahead(2) == '.' {
                        self.pos += 2;
                        return self.new_token(.Ellipsis, len: 3);
                    } else if nextc == '.' {
                        self.pos += 1;
                        return self.new_token(.DotDot, len: 2);
                    }
                    return self.new_token(.Dot);
                },
                ',' -> return self.new_token(.Comma),
                ':' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.DeclAssign, len: 2);
                    }
                    return self.new_token(.Colon);
                },
                ';' -> return self.new_token(.Semicolon),
                '?' -> {
                    if nextc == '?' {
                        self.pos += 2;
                        return self.new_token(.OrElse, len: 2);
                    }
                    return self.new_token(.Question);
                },
                '#' -> return self.new_token(.Hash),
                '&' -> {
                    if nextc == '&' && self.look_ahead(2).is_space() {
                        self.pos += 1;
                        return self.new_token(.LogicalAnd, len: 2);
                    } else if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.AmpAssign, len: 2);
                    }
                    return self.new_token(.Amp);
                },
                '!' -> {
                    is_s_or_n := self.look_ahead(2) in ['s', 'n'];
                    if nextc == 'i' && is_s_or_n && self.look_ahead(3).is_space() {
                        self.pos += 2;
                        ch2 := self.current_char();
                        if ch2 == 's' {
                            return self.new_token(.KwNotIs, len: 2);
                        } else if ch2 == 'n' {
                            return self.new_token(.KwNotIn, len: 2);
                        }
                    } else if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.Ne, len: 2);
                    }
                    return self.new_token(.Bang);
                },
                '|' -> {
                    if nextc == '|' && self.look_ahead(2).is_space() {
                        self.pos += 1;
                        return self.new_token(.LogicalOr, len: 2);
                    } else if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.PipeAssign, len: 2);
                    }
                    return self.new_token(.Pipe);
                },
                '~' -> return self.new_token(.BitNot),
                '^' -> {
                    if nextc == '=' {
                        self.pos += 1;
                        return self.new_token(.XorAssign, len: 2);
                    }
                    return self.new_token(.Xor);
                },
                '{' -> return self.new_token(.Lbrace),
                '}' -> return self.new_token(.Rbrace),
                '[' -> return self.new_token(.Lbracket),
                ']' -> return self.new_token(.Rbracket),
                '(' -> return self.new_token(.Lparen),
                ')' -> return self.new_token(.Rparen),
                SINGLE_QUOTE -> {
                    lit := self.read_char();
                    return self.new_token(.Char, lit, lit.len + 2);
                },
                '"' -> {
                    start_line := self.line;
                    start_col := utils.max(1, self.current_column()) - 1;
                    lit := self.read_string();
                    return  if start_line == self.line {
                        self.new_token(.String, lit, lit.len + 2)
                    } else {
                        self.new_multiline_token(
                            .String, lit, lit.len + 2, start_line, self.line, start_col
                        )
                    };
                },
                else -> {
                    self.invalid_character();
                    break;
                }
            }
        }
        return self.new_eof_token();
    }

    func read_name(^mut self) -> string {
        start := self.pos;
        self.pos += 1;
        while self.pos < self.text.len {
            c := self.current_char();
            if utils.is_name_char(c) || c.is_digit() {
                self.pos += 1;
                continue;
            }
            break;
        }
        lit := self.text.substr(start, self.pos).clone();
        self.pos -= 1; // fix pos
        return lit;
    }

    #[inline]
    func read_number(^mut self) -> string {
        return match {
            self.matches("0x", self.pos) -> self.read_hex_number(),
            self.matches("0b", self.pos) -> self.read_bin_number(),
            self.matches("0o", self.pos) -> self.read_oct_number(),
            else -> self.read_dec_number()
        };
    }

    func read_hex_number(^mut self) -> string {
        start := self.pos;
        self.pos += 2; // skip '0x'
        if self.pos < self.text.len && self.current_char() == NUM_SEP {
            self.pos -= 1;
            self.error("separator `_` is only valid between digits in a numeric literal");
            self.pos += 1;
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP && self.text[self.pos - 1] == NUM_SEP {
                self.pos -= 1;
                self.error("cannot use `_` consecutively in a numeric literal");
                self.pos += 1;
            }
            if !ch.is_hex_digit() && ch != NUM_SEP {
                if !ch.is_letter() {
                    break;
                } else {
                    self.pos -= 1;
                    self.error(
                        "this hexadecimal number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                    self.pos += 1;
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.error("cannot use `_` at the end of a numeric literal");
        } else if start + 2 == self.pos {
            self.pos -= 1;
            self.error("number part of this hexadecimal is not provided");
            self.pos += 1;
        }

        lit := self.text.substr(start, self.pos).clone();
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_bin_number(^mut self) -> string {
        start := self.pos;
        self.pos += 2; // skip '0'
        if self.pos < self.text.len && self.current_char() == NUM_SEP {
            self.pos -= 1;
            self.error("separator `_` is only valid between digits in a numeric literal");
            self.pos += 1;
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP && self.text[self.pos - 1] == NUM_SEP {
                self.pos -= 1;
                self.error("cannot use `_` consecutively in a numeric literal");
                self.pos += 1;
            }

            if !ch.is_bin_digit() && ch != NUM_SEP {
                if !ch.is_digit() && !ch.is_letter() {
                    break;
                } else {
                    self.pos -= 1;
                    self.error(
                        "this binary number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                    self.pos += 1;
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.pos -= 1;
            self.error("cannot use `_` at the end of a numeric literal");
            self.pos += 1;
        } else if start + 2 == self.pos {
            self.pos -= 1;
            self.error("number part of this binary is not provided");
            self.pos += 1;
        }

        lit := self.text.substr(start, self.pos).clone();
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_oct_number(^mut self) -> string {
        start := self.pos;
        self.pos += 2; // skip '0o'
        if self.pos < self.text.len && self.current_char() == NUM_SEP {
            self.pos -= 1;
            self.error("separator `_` is only valid between digits in a numeric literal");
            self.pos += 1;
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP && self.text[self.pos - 1] == NUM_SEP {
                self.pos -= 1;
                self.error("cannot use `_` consecutively in a numeric literal");
                self.pos += 1;
            }

            if !ch.is_oct_digit() && ch != NUM_SEP {
                if !ch.is_digit() && !ch.is_letter() {
                    break;
                } else {
                    self.pos -= 1;
                    self.error(
                        "this octal number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                    self.pos += 1;
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.pos -= 1;
            self.error("cannot use `_` at the end of a numeric literal");
            self.pos += 1;
        } else if start + 2 == self.pos {
            self.pos -= 1;
            self.error("number part of this octal is not provided");
            self.pos += 1;
        }

        lit := self.text.substr(start, self.pos).clone();
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_dec_number(^mut self) -> string {
        start := self.pos;
        if self.pos < self.text.len && self.current_char() == NUM_SEP {
            self.pos -= 1;
            self.error("separator `_` is only valid between digits in a numeric literal");
            self.pos += 1;
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP && self.text[self.pos - 1] == NUM_SEP {
                self.pos -= 1;
                self.error("cannot use `_` consecutively in a numeric literal");
                self.pos += 1;
            }
            if !ch.is_digit() && ch != NUM_SEP {
                if !ch.is_letter() || ch in ['e', 'E'] {
                    break;
                } else {
                    self.pos -= 1;
                    self.error(
                        "this number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                    self.pos += 1;
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.pos -= 1;
            self.error("cannot use `_` at the end of a numeric literal");
            self.pos += 1;
        }

        mut call_method := false; // true for, e.g., 5.method(), 5.5.method(), 5e5.method()
        mut is_range := false; // true for, e.g., 5..10
        // fractional part
        if self.pos < self.text.len && self.text[self.pos] == '.' {
            self.pos += 1;
            if self.pos < self.text.len {
                // 16.6, 16.6.to_string()
                if self.text[self.pos].is_digit() {
                    while self.pos < self.text.len : self.pos += 1 {
                        c := self.current_char();
                        if !c.is_digit() {
                            if !c.is_letter() || c in ['e', 'E'] {
                                // 16.6.to_string()
                                if c == '.' && self.look_ahead(1).is_letter() {
                                    call_method = true;
                                }
                                break;
                            } else {
                                self.error(
                                    "this number has unsuitable digit `{}`".fmt(
                                        c.to_ascii()
                                    )
                                );
                            }
                        }
                    }
                } else if self.current_char() == '.' {
                    // 4.. a range
                    is_range = true;
                    self.pos -= 1;
                } else if self.current_char() in ['e', 'E'] {
                    // 6.e6
                } else if self.current_char().is_letter() {
                    // 16.to_string()
                    call_method = true;
                    self.pos -= 1;
                } else {
                    // 6.
                    self.pos -= 1;
                    mut err := self.error_builder(
                        "float literals should have a digit after the decimal point"
                    );
                    err.add_help(
                        "use `{0}.0` instead of `{0}`".fmt(self.text.substr(start, self.pos))
                    );
                    err.emit();
                    self.pos += 1;
                }
            }
        }
        // exponential part
        mut has_exp := false;
        if self.pos < self.text.len && self.current_char() in ['e', 'E'] {
            has_exp = true;
            self.pos += 1;
            if self.pos < self.text.len && self.current_char() in ['-', '+'] {
                self.pos += 1;
            }
            while self.pos < self.text.len : self.pos += 1 {
                c2 := self.current_char();
                if !c2.is_digit() {
                    if !c2.is_letter() {
                        // 6e6.to_string()
                        if c2 == '.' && self.look_ahead(1).is_letter() {
                            call_method = true;
                        }
                        break;
                    } else {
                        self.error("this number has unsuitable digit `{}`".fmt(c2.to_ascii()));
                    }
                }
            }
        }
        if self.text[self.pos - 1] in ['e', 'E'] {
            self.pos -= 1;
            self.error("exponent has no digits");
            self.pos += 1;
        } else if self.current_char() == '.' && !is_range && !call_method {
            self.pos -= 1;
            if has_exp {
                self.error("exponential part should be integer");
            } else {
                self.error("too many decimal points in number");
            }
            self.pos += 1;
        }
        lit := self.text.substr(start, self.pos).clone();
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_char(^mut self) -> string {
        pos := self.current_pos();
        mut len: uint := 0;
        start := self.pos;

        // set flags for advanced escapes first
        escaped_hex := self.matches("\\x", start + 1) && self.text.len > start + 3;
        escaped_unicode := self.matches("\\u", start + 1);
        escaped_octal := !escaped_hex && !escaped_unicode && self.matches("\\", start + 1);

        while {
            self.pos += 1;
            ch := self.current_char();
            if self.pos >= self.text.len {
                self.error("unfinished character literal", pos);
                break;
            }
            if ch != BACKSLASH {
                len += 1;
            }
            double_slash := self.matches(r"\\", self.pos - 2);
            if ch == SINGLE_QUOTE && (
                self.text[self.pos - 1] != BACKSLASH || double_slash
            ) {
                if double_slash {
                    len += 1;
                }
                break;
            }
        }
        len -= 1;

        mut ch := self.text.substr(start + 1, self.pos).clone();
        if self.env.prefs.is_fmt {
            return ch;
        }
        if len != 1 {
            // the string inside the backticks is longer than one character
            // but we might only have one rune... attempt to decode escapes
            // if the content expresses an escape code, it will have an even
            // number of characters e.g. (octal) \141 (hex) \x61 || (unicode)
            // \u2605 we don't handle binary escape codes in rune literals.
            orig := ch;
            if ch.len % 1 == 0 && (escaped_hex || escaped_unicode || escaped_octal) {
                if escaped_unicode {
                    // there can only be one, so attempt to decode it now
                    ch = decode_unicode_escaped_rune(ch);
                } else {
                    // find escape sequence start positions
                    mut escapes_pos := []uint();
                    for i, v in ch.as_bytes() {
                        if v == BACKSLASH {
                            escapes_pos.push(i);
                        }
                    }
                    ch = if escaped_hex {
                        self.decode_h_escapes(ch, 0, escapes_pos)
                    } else {
                        decode_o_escapes(ch, 0, escapes_pos)
                    };
                }
            }
            u := ch.as_runes();
            if u.len != 1 {
                if escaped_hex || escaped_unicode {
                    mut err := self.error_builder(
                        "invalid character literal (`{}` -> `{}`)".fmt(orig, ch),
                        pos
                    );
                    err.add_note("escape sequence did not refer to a singular rune");
                    err.emit();
                } else if u.len == 0 {
                    mut err := self.error_builder("empty character literal", pos);
                    err.add_help("if you meant to write a string literal, use double quotes");
                    err.emit();
                } else {
                    mut err := self.error_builder(
                        "character literal may only contain one codepoint", pos
                    );
                    err.add_help("if you meant to write a string literal, use double quotes");
                    err.emit();
                }
            }
        }
        return ch;
    }

    func read_string(^mut self) -> string {
        start := self.pos + 1;
        self.pos -= 1;
        pos := self.current_pos();
        self.pos += 1;
        start_char := self.current_char();
        mut backslash_count := if start_char == BACKSLASH { 1 } else { 0 };
        is_raw := self.pos > 0 && self.text[self.pos - 1] == 'r';
        is_cstr := self.pos > 0 && self.text[self.pos - 1] == 'c';
        mut n_cr_chars := 0;
        if start_char == LF {
            self.inc_line_number();
        }
        mut u_escapes_pos := []uint(); // pos list of \uXXXX
        mut h_escapes_pos := []uint(); // pos list of \xXX
        while {
            self.pos += 1;
            if self.pos >= self.text.len {
                self.error("unfinished string literal", pos);
                return "";
            }
            c := self.current_char();
            if c == BACKSLASH {
                backslash_count += 1;
            }
            // end of string
            if c == '"' && (is_raw || backslash_count & 1 == 0) {
                break; // handle "\\" at the end: "123\\"
            }
            if c == CR {
                n_cr_chars += 1;
            }
            if c == LF {
                self.inc_line_number();
            }
            // escape `\x` or `\u`
            if backslash_count & 1 == 1 && !(is_raw || is_cstr) {
                // escape `\x`
                if c == 'x' {
                    if self.look_ahead(1) == '"' || !(
                        self.look_ahead(1).is_hex_digit() &&
                        self.look_ahead(2).is_hex_digit()
                    ) {
                        self.error(r"`\x` used without two following hex digits", pos);
                    }
                    h_escapes_pos.push(self.pos - 1);
                } else if c == 'u' { // escape `\u`
                    if self.look_ahead(1) == '"' || self.look_ahead(2) == '"'
                        || self.look_ahead(3) == '"' || self.look_ahead(4) == '"'
                        || !self.look_ahead(1).is_hex_digit() || !self.look_ahead(2).is_hex_digit()
                        || !self.look_ahead(3).is_hex_digit() || !self.look_ahead(4).is_hex_digit() {
                        self.error(r"`\u` incomplete unicode character value", pos);
                    }
                    u_escapes_pos.push(self.pos - 1);
                } else if !utils.is_escape_sequence(c) && !c.is_digit() && c != '\n' {
                    // unknown escape sequence
                    self.pos -= 1;
                    self.error(
                        "unknown escape sequence `{}`".fmt(c.to_ascii()),
                        self.current_pos()
                    );
                    self.pos += 1;
                }
            }
            if c != BACKSLASH {
                backslash_count = 0;
            }
        }

        mut lit := "";
        if start <= self.pos {
            lit = self.text.substr(start, self.pos).clone();
            if !self.env.prefs.is_fmt {
                mut segment_idx: uint := 0;
                mut str_segments := []string();
                if u_escapes_pos.len + h_escapes_pos.len > 0 {
                    mut all_pos := []uint(cap: u_escapes_pos.len + h_escapes_pos.len);
                    for pos1 in u_escapes_pos {
                        all_pos.push(pos1);
                    }
                    for pos1 in h_escapes_pos {
                        all_pos.push(pos1);
                    }
                    for pos1 in all_pos {
                        str_segments.push(lit.substr(segment_idx, pos1 - start));
                        segment_idx = pos1 - start;
                        if pos1 in u_escapes_pos {
                            (end_idx, segment) := decode_u_escape_single(lit, segment_idx);
                            str_segments.push(segment);
                            segment_idx = end_idx;
                        }
                        if pos1 in h_escapes_pos {
                            (end_idx, segment) := self.decode_h_escape_single(lit, segment_idx);
                            str_segments.push(segment);
                            segment_idx = end_idx;
                        }
                    }
                }
                if segment_idx < lit.len {
                    str_segments.push(lit.substr(segment_idx));
                }
                lit = utils.join(str_segments[:], "");
            }
            if n_cr_chars > 0 {
                lit = lit.replace("\r", "");
            }
            if lit.contains("\\\n") {
                lit = trim_slash_line_break(lit);
            }
        }

        return lit;
    }
}
