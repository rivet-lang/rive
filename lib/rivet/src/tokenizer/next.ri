// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/strings;
import std/process;

import ../ast;
import ../token;
import ../prefs;
import ../utils;
import ../report;

import { LF, CR } from ../utils;

extend Tokenizer {
    public func next(mut self) token.Token {
        while {
            cidx := self.tidx;
            self.tidx += 1;
            return if cidx >= self.all_tokens.len {
                self.end_of_file()
            } else {
                self.all_tokens[cidx]
            };
        }
        return self.new_eof_token();
    }

    func internal_next(mut self) token.Token {
        while {
            if self.is_started {
                self.pos += 1;
            } else {
                self.is_started = true;
            }
            self.skip_whitespace();
            if self.pos >= self.text.len {
                return self.new_eof_token();
            }
            (ch, nextc) := (self.current_char(), self.look_ahead(1));
            if utils.is_name_char(ch) {
                name := self.read_name();
                return self.new_token(token.lookup(name), name, name.len);
            } else if ch.is_digit() or (ch == b'.' and nextc.is_digit()) {
                // decimals with 0 prefix = error
                if ch == b'0' and nextc.is_digit() {
                    mut err := self.error_builder(
                        "leading zeros in decimal integer literals are not permitted"
                    );
                    err.add_help("use an `0o` prefix for octal integers");
                    err.emit();
                }
                lit := self.read_number();
                return self.new_token(.Number, self.number_literal_without_separator(lit), lit.len);
            }
            // delimiters and operators
            switch ch {
                b'+' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.PlusAssign, len: 2);
                    }
                    return self.new_token(.Plus);
                },
                b'-' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.MinusAssign, len: 2);
                    }
                    return self.new_token(.Minus);
                },
                b'*' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.MulAssign, len: 2);
                    }
                    return self.new_token(.Mul);
                },
                b'/' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.DivAssign, len: 2);
                    } else if nextc == b'/' {
                        self.ignore_line();
                        if self.text[self.pos - 1] != CR {
                            self.pos -= 1;
                            self.line -= 1;
                        }
                        continue;
                    } else if nextc == b'*' {
                        start_pos := self.pos;
                        self.pos += 1;
                        mut nest_count := 1;
                        while nest_count > 0 and self.pos < self.text.len - 1 {
                            self.pos += 1;
                            if self.current_char() == LF {
                                self.inc_line_number();
                                continue;
                            }
                            if self.matches("/*", self.pos) {
                                nest_count += 1;
                                continue;
                            }
                            if self.matches("*/", self.pos) {
                                nest_count -= 1;
                            }
                        }
                        self.pos += 1;
                        if self.pos >= self.text.len {
                            self.pos = start_pos;
                            self.error("comment not terminated");
                            break;
                        }
                        continue;
                    }
                    return self.new_token(.Div);
                },
                b'%' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.ModAssign, len: 2);
                    }
                    return self.new_token(.Mod);
                },
                b'@' => return self.new_token(.At),
                b'=' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.Eq, len: 2);
                    } else if nextc == b'>' {
                        self.pos += 1;
                        return self.new_token(.Arrow, len: 2);
                    }
                    return self.new_token(.Assign);
                },
                b'<' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.Le, len: 2);
                    }
                    return self.new_token(.Lt);
                },
                b'>' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.Ge, len: 2);
                    }
                    return self.new_token(.Gt);
                },
                b'.' => {
                    if nextc == b'.' and self.look_ahead(2) == b'.' {
                        self.pos += 2;
                        return self.new_token(.Ellipsis, len: 3);
                    } else if nextc == b'.' {
                        self.pos += 1;
                        return self.new_token(.DotDot, len: 2);
                    }
                    return self.new_token(.Dot);
                },
                b',' => return self.new_token(.Comma),
                b':' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.DeclAssign, len: 2);
                    }
                    return self.new_token(.Colon);
                },
                b';' => return self.new_token(.Semicolon),
                b'?' => {
                    if nextc == b'?' {
                        self.pos += 2;
                        return self.new_token(.OrElse, len: 2);
                    }
                    return self.new_token(.Question);
                },
                b'#' => {
                    self.pp_directive();
                    continue;
                },
                b'&' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.AmpAssign, len: 2);
                    }
                    return self.new_token(.Amp);
                },
                b'!' => {
                    is_s_or_n := self.look_ahead(2) in [b's', b'n'];
                    if nextc == b'i' and is_s_or_n and self.look_ahead(3).is_space() {
                        self.pos += 2;
                        ch2 := self.current_char();
                        if ch2 == b's' {
                            return self.new_token(.KwNotIs, len: 2);
                        } else if ch2 == b'n' {
                            return self.new_token(.KwNotIn, len: 2);
                        }
                    } else if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.Ne, len: 2);
                    }
                    return self.new_token(.Bang);
                },
                b'|' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.PipeAssign, len: 2);
                    }
                    return self.new_token(.Pipe);
                },
                b'~' => return self.new_token(.BitNot),
                b'^' => {
                    if nextc == b'=' {
                        self.pos += 1;
                        return self.new_token(.XorAssign, len: 2);
                    }
                    return self.new_token(.Xor);
                },
                b'{' => return self.new_token(.Lbrace),
                b'}' => return self.new_token(.Rbrace),
                b'[' => return self.new_token(.Lbracket),
                b']' => return self.new_token(.Rbracket),
                b'(' => return self.new_token(.Lparen),
                b')' => return self.new_token(.Rparen),
                b'\'' => {
                    lit := self.read_char();
                    return self.new_token(.Char, lit, lit.len + 2);
                },
                b'"' => {
                    start_line := self.line;
                    start_col := utils.max(1, self.current_column()) - 1;
                    lit := self.read_string();
                    if start_line != self.line {
                        return self.new_token(.String, lit, lit.len + 2);
                    }
                    return self.new_multiline_token(
                        .String, lit, lit.len + 2, start_line, self.line, start_col
                    );
                },
                else => {
                    self.invalid_character();
                    break;
                }
            }
        }
        return self.new_eof_token();
    }

    func read_name(mut self) string {
        start := self.pos;
        self.pos += 1;
        while self.pos < self.text.len {
            c := self.current_char();
            if utils.is_name_char(c) or c.is_digit() {
                self.pos += 1;
                continue;
            }
            break;
        }
        lit := self.text[start..self.pos];
        self.pos -= 1; // fix pos
        return lit;
    }

    [inline]
    func read_number(mut self) string {
        return switch {
            self.matches("0x", self.pos) => self.read_hex_number(),
            self.matches("0b", self.pos) => self.read_bin_number(),
            self.matches("0o", self.pos) => self.read_oct_number(),
            else => self.read_dec_number()
        };
    }

    func read_hex_number(mut self) string {
        start := self.pos;
        self.pos += 2; // skip '0x'
        if self.pos < self.text.len and self.current_char() == NUM_SEP {
            self.error("separator `_` is only valid between digits in a numeric literal");
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP and self.text[self.pos - 1] == NUM_SEP {
                self.error("cannot use `_` consecutively in a numeric literal");
            }
            if !ch.is_hex_digit() and ch != NUM_SEP {
                if !ch.is_letter() {
                    break;
                } else {
                    self.error(
                        "this hexadecimal number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.error("cannot use `_` at the end of a numeric literal");
        } else if start + 2 == self.pos {
            self.pos -= 1;
            self.error("number part of this hexadecimal is not provided");
            self.pos += 1;
        }

        lit := self.text[start..self.pos];
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_bin_number(mut self) string {
        start := self.pos;
        self.pos += 2; // skip '0b'
        if self.pos < self.text.len and self.current_char() == NUM_SEP {
            self.error("separator `_` is only valid between digits in a numeric literal");
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP and self.text[self.pos - 1] == NUM_SEP {
                self.error("cannot use `_` consecutively in a numeric literal");
            }

            if !ch.is_bin_digit() and ch != NUM_SEP {
                if !ch.is_digit() and !ch.is_letter() {
                    break;
                } else {
                    self.error(
                        "this binary number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.pos -= 1;
            self.error("cannot use `_` at the end of a numeric literal");
            self.pos += 1;
        } else if start + 2 == self.pos {
            self.pos -= 1;
            self.error("number part of this binary is not provided");
            self.pos += 1;
        }

        lit := self.text[start..self.pos];
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_oct_number(mut self) string {
        start := self.pos;
        self.pos += 2; // skip '0o'
        if self.pos < self.text.len and self.current_char() == NUM_SEP {
            self.error("separator `_` is only valid between digits in a numeric literal");
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP and self.text[self.pos - 1] == NUM_SEP {
                self.error("cannot use `_` consecutively in a numeric literal");
            }

            if !ch.is_oct_digit() and ch != NUM_SEP {
                if !ch.is_digit() and !ch.is_letter() {
                    break;
                } else {
                    self.error(
                        "this octal number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.pos -= 1;
            self.error("cannot use `_` at the end of a numeric literal");
            self.pos += 1;
        } else if start + 2 == self.pos {
            self.pos -= 1;
            self.error("number part of this octal is not provided");
            self.pos += 1;
        }

        lit := self.text[start..self.pos];
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_dec_number(mut self) string {
        start := self.pos;
        if self.pos < self.text.len and self.current_char() == NUM_SEP {
            self.error("separator `_` is only valid between digits in a numeric literal");
        }

        while self.pos < self.text.len : self.pos += 1 {
            ch := self.current_char();
            if ch == NUM_SEP and self.text[self.pos - 1] == NUM_SEP {
                self.error("cannot use `_` consecutively in a numeric literal");
            }
            if !ch.is_digit() and ch != NUM_SEP {
                if !ch.is_letter() or ch in [b'e', b'E'] {
                    break;
                } else {
                    self.error(
                        "this number has unsuitable digit `{}`".fmt(
                            ch.to_ascii()
                        )
                    );
                }
            }
        }

        if self.text[self.pos - 1] == NUM_SEP {
            self.error("cannot use `_` at the end of a numeric literal");
        }

        mut call_method := false; // true for, e.g., 5.method(), 5.5.method(), 5e5.method()
        mut is_range := false; // true for, e.g., 5..10
        // fractional part
        if self.pos < self.text.len and self.text[self.pos] == b'.' {
            self.pos += 1;
            if self.pos < self.text.len {
                // 16.6, 16.6.to_string()
                if self.text[self.pos].is_digit() {
                    while self.pos < self.text.len : self.pos += 1 {
                        c := self.current_char();
                        if !c.is_digit() {
                            if !c.is_letter() or c in [b'e', b'E'] {
                                // 16.6.to_string()
                                if c == b'.' and self.look_ahead(1).is_letter() {
                                    call_method = true;
                                }
                                break;
                            } else {
                                self.error(
                                    "this number has unsuitable digit `{}`".fmt(
                                        c.to_ascii()
                                    )
                                );
                            }
                        }
                    }
                } else if self.current_char() == b'.' {
                    // 4.. a range
                    is_range = true;
                    self.pos -= 1;
                } else if self.current_char() in [b'e', b'E'] {
                    // 6.e6
                } else if self.current_char().is_letter() {
                    // 16.to_string()
                    call_method = true;
                    self.pos -= 1;
                } else {
                    // 6.
                    self.pos -= 1;
                    mut err := self.error_builder(
                        "float literals should have a digit after the decimal point"
                    );
                    err.add_help(
                        "use `{0}.0` instead of `{0}`".fmt(self.text[start..self.pos])
                    );
                    err.emit();
                    self.pos += 1;
                }
            }
        }
        // exponential part
        mut has_exp := false;
        if self.pos < self.text.len and self.current_char() in [b'e', b'E'] {
            has_exp = true;
            self.pos += 1;
            if self.pos < self.text.len and self.current_char() in [b'-', b'+'] {
                self.pos += 1;
            }
            while self.pos < self.text.len : self.pos += 1 {
                c2 := self.current_char();
                if !c2.is_digit() {
                    if !c2.is_letter() {
                        // 6e6.to_string()
                        if c2 == b'.' and self.look_ahead(1).is_letter() {
                            call_method = true;
                        }
                        break;
                    } else {
                        self.error("this number has unsuitable digit `{}`".fmt(c2.to_ascii()));
                    }
                }
            }
        }
        if self.text[self.pos - 1] in [b'e', b'E'] {
            self.pos -= 1;
            self.error("exponent has no digits");
            self.pos += 1;
        } else if self.current_char() == b'.' and !is_range and !call_method {
            self.pos -= 1;
            if has_exp {
                self.error("exponential part should be integer");
            } else {
                self.error("too many decimal points in number");
            }
            self.pos += 1;
        }
        lit := self.text[start..self.pos];
        self.pos -= 1; // fix pos
        return lit;
    }

    func read_char(mut self) string {
        (mut len, start) := (0, self.pos);
        backslash := b'\\';

        while {
            self.pos += 1;
            if self.pos >= self.text.len {
                break;
            }
            if self.current_char() != backslash {
                len += 1;
            }
            double_slash := self.matches("\\\\", self.pos - 2);
            if self.current_char() == b'\'' and (self.text[self.pos-1] != backslash or double_slash) {
                if double_slash {
                    len += 1;
                }
                break;
            }
        }
        len -= 1;

        ch := self.text[start + 1..self.pos];
        if len != 1 {
            if len > 1 and ch.runes_count() > 1 {
                mut err := self.error_builder(
                    "character literal may only contain one codepoint"
                );
                err.add_help("if you meant to write a string literal, use double quotes");
                err.emit();
            } else if len == 0 {
                self.error("empty character literal");
            }
        }
        return ch;
    }

    func read_string(mut self) string {
        (start, start_char) := (self.pos, self.current_char());
        backslash := b'\\';
        mut backslash_count := if start_char == backslash { 1 } else { 0 };
        is_raw := self.pos > 0 and self.text[self.pos - 1] == b'r';
        mut n_cr_chars := 0;

        while {
            self.pos += 1;
            if self.pos >= self.text.len {
                self.error("unfinished string literal");
                return "";
            }
            c := self.current_char();
            if c == backslash {
                backslash_count += 1;
            }
            // end of string
            if c == b'"' and (is_raw or backslash_count % 2 == 0) {
                break; // handle "\\" at the end
            }
            if c == CR {
                n_cr_chars += 1;
            }
            if c == LF {
                self.inc_line_number();
            }
            if c != backslash {
                backslash_count = 0;
            }
        }

        mut lit := "";
        if start <= self.pos {
            lit = self.text[start + 1..self.pos];
            if n_cr_chars > 0 {
                lit = lit.replace("\r", "");
            }
            if lit.contains("\\\n") {
                lit = self.trim_slash_line_break(lit);
            }
        }
        return lit;
    }
}
