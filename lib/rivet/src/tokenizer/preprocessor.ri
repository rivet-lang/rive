// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import ../utils;

extend Tokenizer {
    struct Conditional {
        mut matched: bool;
        mut else_found: bool;
        mut skip_section: bool;
    }

    func pp_directive(mut self) {
        pos := self.current_pos();
        self.pos += 1; // skip '#'
        self.skip_whitespace();
        pp_dir := self.read_name();
        pos.len += pp_dir.len;
        self.skip_whitespace();
        switch pp_dir {
            "if" => self.pp_if(),
            "else_if" => self.pp_else_if(),
            "else" => self.pp_else(),
            "endif" => self.pp_endif(),
            "error", "warn" => self.pp_err_warn(pp_dir),
            else => {
                self.error("invalid preprocessing directive: `{}`".fmt(pp_dir), pos);
                return;
            }
        }
        if self.conditional_stack.len > 0
            and self.conditional_stack[self.conditional_stack.len - 1].skip_section {
            // skip tokens until next preprocessing directive
            while self.pos < self.text.len : self.pos += 1 {
                cc := self.current_char();
                if cc == b'#' and !(self.matches("#error", self.pos) or self.matches("#warn", self.pos)) {
                    self.pos -= 1;
                    return;
                } else if utils.is_new_line(cc) {
                    self.inc_line_number();
                }
            }
            // if we get EOF, then no corresponding `#endif` has been written
            if self.pos == self.text.len {
                self.error("expected `#endif`, found end of file", pos);
            }
        }
    }

    func pp_if(mut self) {
        self.pos += 1;
        self.skip_whitespace();
        cond := self.pp_expression();
        self.skip_whitespace();
        self.pos -= 1;
        self.conditional_stack.push(Conditional());
        if cond and (self.conditional_stack.len == 1
            or !self.conditional_stack[self.conditional_stack.len - 2].skip_section) {
            // condition true => process code within if
            self.conditional_stack[self.conditional_stack.len - 1].matched = true;
            self.conditional_stack[self.conditional_stack.len - 1].skip_section = false;
        } else {
            // skip lines until next preprocessing directive
            self.conditional_stack[self.conditional_stack.len - 1].skip_section = true;
        }
    }

    func pp_else_if(mut self) {
        self.pos += 1;
        pos := self.current_pos();
        self.skip_whitespace();
        cond := self.pp_expression();
        self.skip_whitespace();
        self.pos -= 1;
        if self.conditional_stack.is_empty() or
            self.conditional_stack[self.conditional_stack.len - 1].else_found {
            self.error("unexpected `#else_if`", pos);
        } else if cond and !self.conditional_stack[self.conditional_stack.len - 1].matched
            and (self.conditional_stack.len == 1 or
                !self.conditional_stack[self.conditional_stack.len - 2].skip_section) {
            // condition true => process code within if
            self.conditional_stack[self.conditional_stack.len - 1].matched = true;
            self.conditional_stack[self.conditional_stack.len - 1].skip_section = false;
        } else {
            // skip lines until next preprocessing directive
            self.conditional_stack[self.conditional_stack.len - 1].skip_section = true;
        }
    }

    func pp_else(mut self) {
        pos := self.current_pos();
        self.skip_whitespace();
        if self.conditional_stack.is_empty() or
            self.conditional_stack[self.conditional_stack.len - 1].else_found {
            self.error("unexpected `#else`", pos);
        } else if !self.conditional_stack[self.conditional_stack.len - 1].matched
            and (self.conditional_stack.len == 1 or
                !self.conditional_stack[self.conditional_stack.len - 2].skip_section) {
            // condition true => process code within if
            self.conditional_stack[self.conditional_stack.len - 1].matched = true;
            self.conditional_stack[self.conditional_stack.len - 1].skip_section = false;
        } else {
            // skip lines until next preprocessing directive
            self.conditional_stack[self.conditional_stack.len - 1].skip_section = true;
        }
    }

    func pp_endif(mut self) {
        if self.conditional_stack.is_empty() {
            self.error("unexpected `#endif`", self.current_pos());
        } else {
            _ = self.conditional_stack.pop();
        }
    }

    func pp_err_warn(mut self, kw: string) {
        self.pos += 1;
        mut pos := self.current_pos();
        self.skip_whitespace();
        start := self.pos;
        self.eat_to_end_of_line();
        pos += self.current_pos();
        self.inc_line_number();
        msg := self.text[start..self.pos].trim_space();
        if kw == "error" {
            self.error("#error: ".concat(msg), pos);
        } else {
            self.warn("#warn: ".concat(msg), pos);
        }
    }

    func pp_expression(mut self) -> bool {
        return self.pp_or_expression();
    }

    func pp_or_expression(mut self) -> bool {
        mut left := self.pp_and_expression();
        self.skip_whitespace();
        while self.pos < self.text.len and self.matches("or", self.pos) {
            self.pos += 2;
            self.skip_whitespace();
            right := self.pp_and_expression();
            left = left or right;
        }
        return left;
    }

    func pp_and_expression(mut self) -> bool {
        mut left := self.pp_unary_expression();
        self.skip_whitespace();
        while self.pos < self.text.len and self.matches("and", self.pos) {
            self.pos += 3;
            self.skip_whitespace();
            right := self.pp_unary_expression();
            left = left and right;
        }
        return left;
    }

    func pp_unary_expression(mut self) -> bool {
        if self.pos < self.text.len and self.current_char() == b'!' {
            self.pos += 1;
            self.skip_whitespace();
            return !self.pp_unary_expression();
        }
        return self.pp_primary_expression();
    }

    func pp_primary_expression(mut self) -> bool {
        pos := self.current_pos();
        mut cc := self.current_char();
        if self.pos >= self.text.len {
            self.error("expected name, found end of file", pos);
        } else if utils.is_name_char(cc) {
            return self.pp_symbol();
        } else if cc == b'(' {
            self.pos += 1;
            self.skip_whitespace();
            result := self.pp_expression();
            self.skip_whitespace();
            cc = self.current_char();
            if self.pos < self.text.len and cc == b')' {
                self.pos += 1;
            } else {
                self.error("expected `)`, found `{}`".fmt(cc.to_ascii()), self.current_pos());
            }
            return result;
        }
        return false;
    }

    func pp_symbol(mut self) -> bool {
        self.pos -= 1;
        pos := self.current_pos();
        self.pos += 1;
        name := self.read_name();
        self.pos += 1;
        pos.len += name.len;
        return if name == "true" {
            true
        } else if name == "false" {
            false
        } else {
            self.table.evalue_pp_symbol(name, pos)
        };
    }
}
