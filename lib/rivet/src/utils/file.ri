// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/env;
import std/process;
import std/fs.{ self, Path };

var normalizedWorkdir := process.wdAtStartup.replace("\\", "/").concat("/");
var errorPathsAbsolute := (env.get("RIVET_ERROR_PATHS") ?? "relative") == "absolute";

// NOTE: path_styled_for_error_messages will *always* use `/` in the error paths, no
// matter the OS, to ensure stable compiler error output in the tests.
pub func path_styled_for_error_messages(path_: string) -> string {
	rpath := (Path.resolve(path_) catch path_).replace("\\", "/");
	return if errorPathsAbsolute {
		rpath
	} else {
		Path.relative(normalizedWorkdir, rpath) catch path_
	};
}

pub func skip_bom(file_content: string) -> string {
   // BOM check
   if file_content.len >= 3 {
     if file_content[0] == 0xEF && file_content[1] == 0xBB && file_content[2] == 0xBF {
        // skip three BOM bytes
        return file_content.substr(3);
     }
   }
   return file_content;
}

struct CachedFile {
   path: string;
   content: string;
   mut lines: []string;
}

struct SourceCache {
   mut sources: []mut CachedFile;

   pub func find(self, path_: string) -> ?string {
	  for source in self.sources {
		 if source.path == path_ {
			return source.content;
		 }
	  }
	  return none;
   }

   pub func find_line(self, path_: string, line: uint) -> ?string {
	  return if lines := self.find_lines(path_) {
		 lines[line]
	  } else {
		 none
	  };
   }

   pub func find_lines_between(self, path_: string, line: uint, end_line: uint) -> ?[]string {
	  return if lines := self.find_lines(path_) {
		if lines.len > 0 && lines.len >= end_line {
			lines[line..end_line]
		} else {
			none
		}
	  } else {
		 none
	  };
   }

   pub func find_lines(self, path_: string) -> ?[]string {
	  for mut cached in self.sources {
		 if cached.path == path_ {
			if cached.lines.is_empty() {
			   cached.lines = cached.content.split_into_lines();
			}
			return cached.lines;
		 }
	  }
	  return none;
   }
}

pub var mut sourceCache: SourceCache := SourceCache();

#[inline]
pub func read_file(path_: string) -> !string {
   return if res := sourceCache.find(path_) {
	  res
   } else {
	  content := skip_bom(fs.read_file(path_)!);
	  sourceCache.sources.push(CachedFile(path_, content));
	  content
   };
}
