// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

// TODO: remove file, use Map![K, V] instead

struct StringUint {
    pub key: string;
    pub mut value: uint;
}

pub struct MapStringUint {
    mut pairs: []mut StringUint;

    pub func set(mut self, key: string, value: uint) {
        for mut pair in self.pairs {
            if pair.key == key {
                pair.value = value;
                return; // found
            }
        }
        // new value
        self.pairs.push(StringUint(key, value));
    }

    pub func get(&self, key: string) -> ?uint {
        for pair in self.pairs {
            if pair.key == key {
                return pair.value;
            }
        }
        return none;
    }

    pub func delete(mut self, key: string) {
        for i, pair in self.pairs {
            if pair.key == key {
                self.pairs.delete(i);
                break;
            }
        }
    }

    #[inline]
    pub func contains(&self, key: string) -> bool {
        return self.get(key) != none;
    }

    #[inline]
    pub func len(&self) -> uint {
        return self.pairs.len;
    }
}

struct StringArrayOfStrings {
    pub key: string;
    pub mut value: []string;
}

pub struct MapStringArrayOfStringsIterator {
    ref: &MapStringArrayOfStrings;
    mut idx: uint;

    #[inline]
    pub func next(mut self) -> ?StringArrayOfStrings {
        return if self.idx < self.ref.len() {
            idx := self.idx;
            self.idx += 1;
            self.ref.pairs[idx]
        } else {
            none
        };
    }
}

pub struct MapStringArrayOfStrings {
    mut pairs: []mut StringArrayOfStrings;

    pub func iterator(&self) -> MapStringArrayOfStringsIterator {
        return MapStringArrayOfStringsIterator(self);
    }

    pub func set(mut self, key: string, value: []string) {
        for mut pair in self.pairs {
            if pair.key == key {
                pair.value = value;
                return; // found
            }
        }
        // new value
        self.pairs.push(StringArrayOfStrings(key, value));
    }

    pub func get(&self, key: string) -> ?[]string {
        for pair in self.pairs {
            if pair.key == key {
                return pair.value;
            }
        }
        return none;
    }

    pub func delete(mut self, key: string) {
        for i, pair in self.pairs {
            if pair.key == key {
                self.pairs.delete(i);
                break;
            }
        }
    }

    #[inline]
    pub func contains(&self, key: string) -> bool {
        return self.get(key) != none;
    }

    #[inline]
    pub func len(&self) -> uint {
        return self.pairs.len;
    }
}

struct StringBool {
    pub key: string;
    pub mut value: bool;
}

pub struct MapStringBool {
    mut pairs: []mut StringBool;

    pub func set(mut self, key: string, value: bool) {
        for mut pair in self.pairs {
            if pair.key == key {
                pair.value = value;
                return; // found
            }
        }
        // new value
        self.pairs.push(StringBool(key, value));
    }

    pub func get(&self, key: string) -> ?bool {
        for pair in self.pairs {
            if pair.key == key {
                return pair.value;
            }
        }
        return none;
    }

    pub func delete(mut self, key: string) {
        for i, pair in self.pairs {
            if pair.key == key {
                self.pairs.delete(i);
                break;
            }
        }
    }

    #[inline]
    pub func contains(&self, key: string) -> bool {
        return self.get(key) != none;
    }

    #[inline]
    pub func len(&self) -> uint {
        return self.pairs.len;
    }
}
