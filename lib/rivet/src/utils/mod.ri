// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/fs;
import std/traits;
import std/console;
import std/process;
import std/console/styles;

public var VERSION = "0.1.0b";

public const LF: uint8 = 10;
public const CR: uint8 = 13;

var StderrSupportStyles = styles.stderr_support_styles();

[inline]
public func min(a: usize, b: usize) usize {
   return if a < b { a } else { b };
}

[inline]
public func max(a: usize, b: usize) usize {
   return if a > b { a } else { b };
}

public func option(args: []string, param: string) ?string {
    for i, arg in args {
        if param == arg {
            if i + 1 < args.len {
                return args[i + 1];
            }
            break;
        }
    }
    return none;
}

public func error(msg: string, args: ...traits.Stringable) never {
   console.eprintln(
      "{} {} {}", styles.bold("rivet:"),
      styles.bold(styles.red("error:")), msg.fmt(args)
   );
   process.exit(1);
}

public func last_commit_hash() string {
    if result := process.execute("git log -n 1 --pretty=format:%h") {
        if result.exit_code == -1 {
            return "<cannot-get-last-commit-hash>";
        }
        return result.output;
    }
    return "<cannot-get-last-commit-hash>";
}

public func full_version() string {
    if result := process.execute("git log -n 1 --pretty=format:'%h %as'") {
        if result.exit_code == -1 {
            return "<cannot-get-full-version>";
        }
        return result.output;
    }
    return "<cannot-get-full-version>";
}

[inline]
public func bold(msg: string) string {
    return if StderrSupportStyles { styles.bold(msg) } else { msg };
}

[inline]
public func red(msg: string) string {
    return if StderrSupportStyles { styles.red(msg) } else { msg };
}

[inline]
public func yellow(msg: string) string {
    return if StderrSupportStyles { styles.yellow(msg) } else { msg };
}

[inline]
public func cyan(msg: string) string {
    return if StderrSupportStyles { styles.cyan(msg) } else { msg };
}

[inline]
public func blue(msg: string) string {
    return if StderrSupportStyles { styles.blue(msg) } else { msg };
}

[inline]
public func green(msg: string) string {
    return if StderrSupportStyles { styles.green(msg) } else { msg };
}
