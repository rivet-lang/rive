// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/fs;
import std/traits;
import std/console;
import std/process;
import std/strings;
import std/console/styles;

public var VERSION = "0.1.0b";

public const LF: uint8 = 10;
public const CR: uint8 = 13;

var StderrSupportStyles = styles.stderr_support_styles();

[inline]
public func is_name_char(ch: uint8) bool {
    return ch.is_letter() or ch == b'_';
}

[inline]
public func is_new_line(ch: uint8) bool {
    return ch == LF or ch == CR;
}

[inline]
public func min(a: usize, b: usize) usize {
   return if a < b { a } else { b };
}

[inline]
public func max(a: usize, b: usize) usize {
   return if a > b { a } else { b };
}

public func option(args: []string, param: string) ?string {
    for i, arg in args {
        if param == arg {
            if i + 1 < args.len {
                return args[i + 1];
            }
            break;
        }
    }
    return none;
}

public func error(msg: string, args: ...traits.Stringable) never {
   console.eprintln(
      "{} {} {}", styles.bold("rivet:"),
      styles.bold(styles.red("error:")), msg.fmt(args)
   );
   process.exit(1);
}

[inline]
public func bold(msg: string) string {
    return if StderrSupportStyles { styles.bold(msg) } else { msg };
}

[inline]
public func red(msg: string) string {
    return if StderrSupportStyles { styles.red(msg) } else { msg };
}

[inline]
public func yellow(msg: string) string {
    return if StderrSupportStyles { styles.yellow(msg) } else { msg };
}

[inline]
public func cyan(msg: string) string {
    return if StderrSupportStyles { styles.cyan(msg) } else { msg };
}

[inline]
public func blue(msg: string) string {
    return if StderrSupportStyles { styles.blue(msg) } else { msg };
}

[inline]
public func green(msg: string) string {
    return if StderrSupportStyles { styles.green(msg) } else { msg };
}

public func join(vec: []string, s: string) string {
    return if vec.is_empty() {
        ""
    } else {
        mut sb := strings.Builder.new();
        for i, e in vec {
            sb.write_string(e);
            if i < vec.len - 1 {
                sb.write_string(s);
            }
        }
        sb.to_string()
    };
}

public func index_of(vec: []string, value: string) usize {
    for i, val in vec {
        if val == value {
            return i;
        }
    }
    return 0;
}
