// Copyright (C) 2023 Jose Mendoza. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/traits;
import std/console;
import std/process;
import std/console/styles;

pub const LF: uint8 := 10;
pub const CR: uint8 := 13;

pub var mut stderr_support_styles := styles.stderr_support_styles();

pub var tabs_table := [
    "",
    "\t",
    "\t\t",
    "\t\t\t",
    "\t\t\t\t",
    "\t\t\t\t\t",
    "\t\t\t\t\t\t",
    "\t\t\t\t\t\t\t",
    "\t\t\t\t\t\t\t\t",
    "\t\t\t\t\t\t\t\t\t",
    "\t\t\t\t\t\t\t\t\t\t"
];

pub func tabs(n: uint) -> string {
    return if n < tabs_table.len {
        tabs_table[n]
    } else {
        "\t".repeat(n)
    };
}

#[inline]
pub func min(a: uint, b: uint) -> uint {
   return if a < b { a } else { b };
}

#[inline]
pub func max(a: uint, b: uint) -> uint {
   return if a > b { a } else { b };
}

pub func option(args: []string, param: string) -> ?string {
    for i, arg in args {
        if param == arg {
            if i + 1 < args.len {
                return args[i + 1];
            }
            break;
        }
    }
    return none;
}

pub func error(msg: string, args: ...traits.Stringable) -> never {
   console.ewriteln("{} {} {}", bold("rivet:"), bold(red("error:")), msg.fmt(args));
   process.exit(1);
}

#[inline]
pub func warn(msg: string, args: ...traits.Stringable) {
   console.ewriteln("{} {} {}", bold("rivet:"), bold(yellow("warning:")), msg.fmt(args));
}

#[inline]
pub func info(msg: string, args: ...traits.Stringable) {
   console.ewriteln("{} {} {}", bold("rivet:"), bold(blue("info:")), msg.fmt(args));
}

#[inline]
pub func bold(msg: string) -> string {
    return if stderr_support_styles { styles.bold(msg) } else { msg };
}

#[inline]
pub func red(msg: string) -> string {
    return if stderr_support_styles { styles.red(msg) } else { msg };
}

#[inline]
pub func yellow(msg: string) -> string {
    return if stderr_support_styles { styles.yellow(msg) } else { msg };
}

#[inline]
pub func cyan(msg: string) -> string {
    return if stderr_support_styles { styles.cyan(msg) } else { msg };
}

#[inline]
pub func blue(msg: string) -> string {
    return if stderr_support_styles { styles.blue(msg) } else { msg };
}

#[inline]
pub func green(msg: string) -> string {
    return if stderr_support_styles { styles.green(msg) } else { msg };
}

/// Rounds the number `n` up to the next mult
/// NOTE: `multiple` must be a power of 2.
#[inline]
pub func round_up(n: uint, multiple: uint) -> uint {
    n_ := @as(int, n);
    multiple_ := @as(int, multiple);
    return @as(uint, (n_ + multiple_ - 1) & (-multiple_));
}
