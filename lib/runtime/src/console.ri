// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

import "c/libc";

/// Prints a message to stdout. Unlike `println` stdout is not automatically
/// flushed.
pub fn console_print(s: string, args: ...ToString) {
    let sx = s.fmt(args);
    unsafe {
        write_buf_to_fd(1, sx.ptr, sx.len);
    }
}

/// Prints a message with a line end to stdout. stdout is flushed.
pub fn console_println(s: string = "", args: ...ToString) {
    unsafe {
        writeln_to_fd(1, s.fmt(args));
    }
}

/// Prints a message to stderr. Both stderr and stdout are flushed.
pub fn console_eprint(s: string, args: ...ToString) {
    let sx = s.fmt(args);
    unsafe {
        _ = libc.fflush(libc.stdout);
        _ = libc.fflush(libc.stderr);
        write_buf_to_fd(2, sx.ptr, sx.len);
        _ = libc.fflush(libc.stderr);
    }
}

/// Prints a message with a line end to stderr. Both stderr and stdout are
/// flushed.
pub fn console_eprintln(s: string = "", args: ...ToString) {
    unsafe {
        _ = libc.fflush(libc.stdout);
        _ = libc.fflush(libc.stderr);
        writeln_to_fd(2, s.fmt(args));
        _ = libc.fflush(libc.stderr);
    }
}

/// Returns `true` if the `fd` file descriptor is open and refers to a
/// terminal.
pub fn console_is_atty(fd: i32) bool {
    return unsafe { libc.isatty(fd) == 1 };
}

#[unsafe]
fn write_buf_to_fd(fd: i32, buf_: *u8, len: usize) {
    unsafe {
        let buf = buf_;
        let mut x: isize = 0;
        let mut remaining_bytes = as(isize, len);
        while remaining_bytes > 0 {
            x = libc.write(fd, ptr_add!(buf, x), as(usize, remaining_bytes));
            remaining_bytes -= x;
        }
    }
}

#[unsafe]
fn writeln_to_fd(fd: i32, s: string) {
    unsafe {
        write_buf_to_fd(fd, s.ptr, s.len);
        write_buf_to_fd(fd, c"\n", 1);
    }
}
