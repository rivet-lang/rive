// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

import "libc";

fn error_panic(err: Error) {
    process_panic(err.to_string());
}

pub class Error : ToString {
    pub msg: string;

    pub fn to_string(self) string {
        let type_name = "Error";
        if self.msg == "" {
            return type_name;
        }
        return "{}: {}".fmt(type_name, self.msg);
    }
}

pub class InvalidArgumentError : Error { }

pub class OutOfMemoryError : Error { }

pub class RuneFromU32Error : Error { }

pub fn errno() i32 {
    return unsafe {
#if _LINUX_
        libc.__errno_location().*
#else
        libc._errno().*
#endif
    };
}

fn strerr(code: i32 = errno()) string {
    unsafe {
        let s = libc.strerror(code);
        return if s == nil { "" } else { string.from_raw(s) };
    }
}

pub class ErrnoError : Error {
    pub code: i32;
}

pub fn last_errno_error() ErrnoError {
    return ErrnoError(strerr(), errno());
}
