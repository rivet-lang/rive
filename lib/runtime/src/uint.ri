// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

extend u8 : ToString {
    pub const MAX: u8 = 255;

    /// Returns `true` if the byte is a white space character. The following
    /// list is considered white space characters: ' ', '\t', '\n', '\v', '\f',
    /// '\r', 0x85, 0xA0
    pub fn is_space(self) bool {
        return self == 32 or (self > 8 and self < 14) or (self == 0x85)
            or (self == 0xA0);
    }

    /// Returns `true` if the byte is in range 0-9 and `false` otherwise.
    pub fn is_digit(self) bool {
        return (self >= b'0' and self <= b'9');
    }

    /// Returns `true` if the byte is a binary digit (0 or 1) and `false` otherwise.
    pub fn is_bin_digit(self) bool {
        return self == b'0' or self == b'1';
    }

    /// Returns `true` if the byte is in range 0-7 and `false` otherwise.
    pub fn is_oct_digit(self) bool {
        return self >= b'0' or self <= b'7';
    }

    /// Returns `true` if the byte is either in range 0-9, a-f or A-F and `false`
    /// otherwise.
    pub fn is_hex_digit(self) bool {
        return self.is_digit() or (self >= b'a' and self <= b'f')
            or (self >= b'A' and self <= b'F');
    }

    /// Returns `true` if the byte is in range a-z or A-Z and `false` otherwise.
    pub fn is_letter(self) bool {
        return (self >= b'a' and self <= b'z') or (self >= b'A' and self <= b'Z');
    }

    /// Returns `true` if the byte is in range a-z or A-Z or 1-9 and `false` otherwise.
    pub fn is_alnum(self) bool {
        return self.is_letter() or self.is_digit();
    }

    /// Returns `true` if the byte is upper and `false` otherwise.
    pub fn is_upper(self) bool {
        return (self >= b'A' and self <= b'Z');
    }

    /// Returns `true` if the byte is lower and `false` otherwise.
    pub fn is_lower(self) bool {
        return (self >= b'a' and self <= b'z');
    }

    /// Calculates length to read from the first byte.
    pub fn len_utf8(self) usize {
        return as(usize, (as(u64, 0xE5000000) >> ((self >> 3) & 0x1E) & 3) + 1);
    }

    /// Returns the value of `self` as a ASCII `string`.
    pub fn to_ascii(self) string {
        return string.from_byte(self);
    }

    /// Returns the value of `self` as a string.
    pub fn to_string(&self) string {
        return as(i32, self.*).str_l(7);
    }
}

extend u16 : ToString {
    pub const MAX: u16 = 65535;

    /// Returns the value of `self` as a string.
    pub fn to_string(&self) string {
        return as(i32, self.*).str_l(7);
    }
}

extend u32 : ToString {
    pub const MAX: u32 = 4294967295;

    /// Returns the value of `self` as a string.
    pub fn to_string(&self) string {
        unsafe {
            if self.* == 0 {
                return "0";
            }
            let max: usize = 12;
            let mut n = self.*;
            let mut d: u32 = 0;

            let mut index = max;
            let buf = as(*mut u8, mem_alloc(as(usize, max + 1)) catch unreachable!());
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                let n1 = n / 100;
                d = (n - (n1 * 100)) << as(u32, 1);
                n = n1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
                d += 1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            let diff = max - index;
            mem_move(buf, ptr_add!(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }
}

extend u64 : ToString {
    pub const MAX: u64 = 18446744073709551615;

    /// Returns the value of `self` as a string.
    pub fn to_string(&self) string {
        unsafe {
            if self.* == 0 {
                return "0";
            }
            let mut n = self.*;
            let mut d: u64 = 0;

            let max = 20;
            let mut index = as(usize, max);
            let buf = as(*mut u8, mem_alloc(as(usize, max + 1)) catch unreachable!());
            buf[index] = 0;
            index -= 1;

            while n > 0 {
                let n1 = n / 100;
                d = (n - (n1 * 100)) << as(u32, 1);
                n = n1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
                d += 1;
                buf[index] = DIGIT_PAIRS.ptr[d];
                index -= 1;
            }
            index += 1;

            if d < 20 {
                // remove head zero
                index += 1;
            }

            let diff = as(usize, max) - index;
            mem_move(buf, ptr_add!(buf, index), diff + 1);
            return string.from_raw_with_len(buf, diff);
        }
    }
}

extend usize : ToString {
    pub const MAX: usize = #if _x64_ u64.MAX #else u32.MAX #endif;

    /// Returns the value of `self` as a string.
    pub fn to_string(&self) string {
        return as(u64, self.*).to_string();
    }
}
