// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import ../../{ env, console };

#[inline]
pub proc support_ansi_escape_codes() -> bool {
    if console.is_atty(1) && console.is_atty(2) {
        if term := env.get("TERM"); term == "dumb" {
            return false;
        }
        return true;
    }
    return false;
}

#[inline]
pub proc fmt(msg: string, open: string, close: string) -> string {
    return "\x1b[{}m{}\x1b[{}m".fmt(open, msg, close);
}

#[inline]
pub proc fmt_rgb(r: int32, g: int32, b: int32, msg: string, open: string, close: string) -> string {
    return "\x1b[{};2;{};{};{}m{}\x1b[{}m".fmt(open, r, g, b, msg, close);
}

#[inline]
pub proc from_hex(hex: int32, msg: string) -> string {
    return fmt_rgb(hex >> 16, hex >> 8 & 0xFF, hex & 0xFF, msg, "38", "39");
}

#[inline]
pub proc bg_rgb(r: int32, g: int32, b: int32, msg: string) -> string {
    return fmt_rgb(r, g, b, msg, "48", "49");
}

#[inline]
pub proc bg_hex(hex: int32, msg: string) -> string {
    return fmt_rgb(hex >> 16, hex >> 8 & 0xFF, hex & 0xFF, msg, "48", "49");
}

#[inline]
pub proc rgb(r: int32, g: int32, b: int32, msg: string) -> string {
    return fmt_rgb(r, g, b, msg, "38", "39");
}

#[inline]
pub proc reset(msg: string) -> string {
    return fmt(msg, "0", "0");
}

#[inline]
pub proc bold(msg: string) -> string {
    return fmt(msg, "1", "22");
}

#[inline]
pub proc dim(msg: string) -> string {
    return fmt(msg, "2", "22");
}

#[inline]
pub proc hidden(msg: string) -> string {
    return fmt(msg, "8", "28");
}

#[inline]
pub proc italic(msg: string) -> string {
    return fmt(msg, "3", "23");
}

#[inline]
pub proc inverse(msg: string) -> string {
    return fmt(msg, "7", "27");
}

#[inline]
pub proc strikethrough(msg: string) -> string {
    return fmt(msg, "9", "29");
}

#[inline]
pub proc underline(msg: string) -> string {
    return fmt(msg, "4", "24");
}
