// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

#[inline]
public func string_to_bool(s: string) -> bool {
    return s == "true";
}

/// Equivalent to `parse_int(s, 0, 8)`, converted to type `int8`.
#[inline]
public func string_to_int8(s: string) -> !int8 {
    return @as(int8, parse_int(s, 0, 8)!);
}

/// Equivalent to `parse_int(s, 0, 16)`, converted to type `int16`.
#[inline]
public func string_to_int16(s: string) -> !int16 {
    return @as(int16, parse_int(s, 0, 16)!);
}

/// Equivalent to `parse_int(s, 0, 32)`, converted to type `int32`.
#[inline]
public func string_to_int32(s: string) -> !int32 {
    return @as(int32, parse_int(s, 0, 32)!);
}

/// Equivalent to `parse_int(s, 0, 64)`, converted to type `int64`.
#[inline]
public func string_to_int64(s: string) -> !int64 {
    return @as(int64, parse_int(s, 0, 64)!);
}

/// Equivalent to `parse_int(s, 0, int.bits())`, converted to type `int`.
#[inline]
public func string_to_int(s: string) -> !int {
    return parse_int(s, 0, int.bits())!;
}

/// Equivalent to `parse_uint(s, 0, 8)`, converted to type `uint8`.
#[inline]
public func string_to_uint8(s: string) -> !uint8 {
    return @as(uint8, parse_uint(s, 0, 8)!);
}

/// Equivalent to `parse_uint(s, 0, 16)`, converted to type `uint16`.
#[inline]
public func string_to_uint16(s: string) -> !uint16 {
    return @as(uint16, parse_uint(s, 0, 16)!);
}

/// Equivalent to `parse_uint(s, 0, 32)`, converted to type `uint32`.
#[inline]
public func string_to_uint32(s: string) -> !uint32 {
    return @as(uint32, parse_uint(s, 0, 32)!);
}

/// Equivalent to `parse_uint(s, 0, 64)`, converted to type `uint64`.
#[inline]
public func string_to_uint64(s: string) -> !uint64 {
    return @as(uint64, parse_uint(s, 0, 64)!);
}

/// Equivalent to `parse_uint(s, 0, usize.bits())`, converted to type `usize`.
#[inline]
public func string_to_usize(s: string) -> !usize {
    return parse_uint(s, 0, usize.bits())!;
}
