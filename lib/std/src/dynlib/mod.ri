// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

#if _LINUX_
#![link_library("dl")]
#endif

import c/libc;

public static sharedLibExtension = get_shared_library_extension();

/// Returns a library name with the operating system specific extension for shared
/// libraries.
#[inline]
public func library_name(libname: string) -> string {
    return if libname.ends_with(sharedLibExtension) {
        libname
    } else {
        libname.concat(sharedLibExtension)
    };
}

#[boxed]
public struct SymbolNotFoundError < Throwable {
    msg: string;

    public func to_string(self) -> string {
        return self.msg;
    }
}

#[boxed]
public struct CannotLoadLibraryError < Throwable {
    msg: string;

    public func to_string(self) -> string {
        return self.msg;
    }
}

public func load(path: string, global_symbols: bool = false) -> !Library {
    flags := if global_symbols { libc.RTLD_NOW | libc.RTLD_GLOBAL } else { libc.RTLD_NOW };
    if ptr := unsafe { libc.dlopen(path.ptr, flags) } {
        return Library(path, ptr);
    }
    if dl_error := dlerror() {
        throw CannotLoadLibraryError("cannot load '{}': {}".fmt(path, dl_error));
    } else {
        throw CannotLoadLibraryError("cannot load '{}'".fmt(path));
    }
}

#[boxed]
struct Library {
    public path: string;
    ptr: mut_anyptr;

    public func address_of(self, symbol: string) -> !anyptr {
        if ptr := unsafe { libc.dlsym(self.ptr, symbol.ptr) } {
            return ptr;
        }
        if dl_error := dlerror() {
            throw SymbolNotFoundError(
                "cannot found symbol '{}' in library '{}': {}".fmt(symbol, self.path, dl_error)
            );
        } else {
            throw SymbolNotFoundError("cannot found symbol '{}' in library '{}'".fmt(symbol, self.path));
        }
    }

    #[inline]
    public func exists(self, symbol: string) -> bool {
        return if _ := self.address_of(symbol) { true } else { false };
    }

    #[inline]
    public func close(self) {
        _ = unsafe { libc.dlclose(self.ptr) };
    }

    func __drop__(self) {
        self.close();
    }
}

func dlerror() -> ?string {
    if err := unsafe { libc.dlerror() } {
        return unsafe { string.from_raw(err) }.clone();
    }
    return none;
}

#[inline]
func get_shared_library_extension() -> string {
    return
#if _LINUX_
        ".so"
#else_if _WINDOWS_
        ".dll"
#else
        ".dylib"
#endif
        ;
}
