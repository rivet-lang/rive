// Copyright (C) 2023-2024 Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c;
import c/libc;

import ../env;

#[boxed]
pub struct CannotMakeDirectoryError < Throwable {
    msg: string;

    pub func to_string(^self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct CannotMakeFileError < Throwable {
    msg: string;

    pub func to_string(^self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct CouldNotOpenDirectoryError < Throwable {
    msg: string;

    pub func to_string(^self) -> string {
        return self.msg;
    }
}

#[boxed]
pub struct EmptyStringError < Throwable {
    msg: string;

    pub func to_string(^self) -> string {
        return self.msg;
    }
}

pub struct Directory {
    pub func make(path_: string, mode: uint := 0o777) -> ! {
        if path_ == "." {
            return;
        }
        rpath := Path.resolve(path_)!;
        if unsafe { libc.mkdir(rpath.ptr, mode) } == -1 {
            throw CannotMakeDirectoryError(
                "cannot make directory `{}`: {}".fmt(path_, c.errno_msg())
            );
        }
    }

    pub func remove(dir: string) -> ! {
        rpath := Path.resolve(dir)!;
        if unsafe { libc.rmdir(rpath.ptr) == -1 } {
            throw CannotMakeFileError("cannot remove directory `{}`: {}".fmt(dir, c.errno_msg()));
        }
    }

    pub func tmp_dir() -> string {
        return if path := env.get("TMPDIR") {
            path
        } else {
            "/tmp"
        };
    }

    pub func walk(path_: string, ext: string := "") -> ![]string {
        if path_.is_empty() {
            throw EmptyStringError("`Directory.walk` expects a folder, not an empty string");
        }
        rpath := Path.resolve(path_)!;
        unsafe {
            if dir := libc.opendir(path_.ptr) {
                mut res := []string(cap: 15);
                while ent := libc.readdir(dir) {
                    bptr: [&]uint8 := &ent.*.d_name[0];
                    if (bptr[0] == 0 || (bptr[0] == '.' && bptr[1] == 0)
                        || (bptr[0] == '.' && bptr[1] == '.' && bptr[2] == 0)) {
                        continue;
                    }
                    bptr_str := string.from_raw(bptr);
                    if !ext.is_empty() && Path.extension(bptr_str) != ext {
                        continue;
                    }
                    full_path := Path.join(rpath, bptr_str)!;
                    res.push(full_path);
                }
                _ = libc.closedir(dir);
                return res;
            }
        }
        throw CouldNotOpenDirectoryError(
            "Directory.walk: couldn't open `{}`: {}".fmt(path_, c.errno_msg())
        );
    }
}
