// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

use core::stdc;
use core::mem;

pub struct File {
    f: *mut stdc::FILE;
    mut is_opened: bool;

    pub fn open(path: string, mode: string = "r") !File {
		unsafe {
			let f = stdc::fopen(path.ptr, mode.ptr);
			if (f == none) {
				raise Error("File::open: failed to open file '{}'".fmt(path));
			}
			return Self(f, true);
        }
    }

	/// Writes the string `s` into the file.
    pub fn write(mut self, s: string) {
		_ = unsafe { stdc::fputs(s.ptr, self.f) };
    }

	/// Writes the string `s` into the file and appends a '\n' character.
	pub fn writeln(mut self, s: string) {
		self.write(s);
		self.write("\n");
	}

    pub fn writef(mut self, s: string, args: ...traits::Tostring) {
		self.write(s.fmt(args));
    }

    pub fn writelnf(mut self, s: string, args: ...traits::Tostring) {
		self.write(s.fmt(args));
		self.write("\n");
    }

    /// Returns the current file contents.
    pub fn read_all(mut self) !string {
        if (!self.is_opened) {
            return "";
        }
        unsafe {
            let seek = stdc::fseek(self.f, 0, 2);
            if (seek != 0) {
                raise Error("fseek failed");
            }

            let fsize = stdc::ftell(self.f);
            if (fsize < 0) {
                raise Error("ftell failed");
            }

            stdc::rewind(self.f);

            // On some systems `ftell` can return values in the 64-bit range
            // that, when cast to `i32`, can result in values below 0.
            let allocate = as(i32, fsize);
            if (as(i64, allocate) < fsize) {
                raise Error("{} cast to `i32` results in {}".fmt(fsize, as(i32, fsize)));
            }

            let mut res = as(*mut u8, mem::alloc(as(usize, allocate) + 1).!);
            let nelements = stdc::fread(res, 1, as(usize, allocate), self.f);

            if (self.eof() and stdc::ferror(self.f) != 0) {
                mem::dealloc(res);
                raise Error("fread failed");
            }

            res[nelements] = 0;
            return string::from_raw_with_len(res, nelements);
        }
    }

    /// Returns true if the file is at end.
    pub fn eof(self) bool {
        return unsafe { stdc::feof(self.f) != 0 };
    }

    /// Closes the current file.
    pub fn close(mut self) {
        if (!self.is_opened) {
            return;
        }
        unsafe {
            _ = stdc::fflush(self.f);
            _ = stdc::fclose(self.f);
        }
        self.is_opened = false;
    }
}
