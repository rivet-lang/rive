// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

import c/libc;
import core;

import ../mem;

pub struct Path {
    pub alias MAX_LEN := libc.MAX_PATH_LEN;
    pub const SEPARATOR := $if _WINDOWS_ { b'\\' } else { b'/' };
    pub var separator_str := $if _WINDOWS_ { "\\" } else { "/" };
    pub var delimiter := $if _WINDOWS_ { ";" } else { ":" };

    /// Returns `true` if the given byte is a valid path separator
    #[inline]
    pub proc is_separator(byte: uint8) -> bool {
        return byte == SEPARATOR;
    }

    /// Returns `true` if `path` (file or directory) exists.
    #[inline]
    pub proc exists(path: string) -> bool {
        return unsafe { libc.access(path.ptr, libc.O_RDONLY) == 0 };
    }

    /// Returns `true` if `path` is executable.
    #[inline]
    pub proc is_executable(path: string) -> bool {
        return unsafe { libc.access(path.ptr, libc.X_OK) == 0 };
    }

    /// Returns `true` if `path` is writable.
    #[inline]
    pub proc is_writable(path: string) -> bool {
        return unsafe { libc.access(path.ptr, libc.W_OK) == 0 };
    }

    /// Returns `true` if `path` is readable.
    #[inline]
    pub proc is_readable(path: string) -> bool {
        return unsafe { libc.access(path.ptr, libc.R_OK) == 0 };
    }

    /// Returns `true` if `path` is a directory.
    pub proc is_directory(path: string) -> bool {
        mut statbuf := libc.Stat();
        return if unsafe { libc.stat(path.ptr, &mut statbuf) == 0 } {
            @as(int32, statbuf.mode) & libc.S_IFMT == libc.S_IFDIR
        } else {
            false
        };
    }

    /// Returns `true` if `path` is a file.
    #[inline]
    pub proc is_file(path: string) -> bool {
        return exists(path) && !is_directory(path);
    }

    /// Returns `true` if `path` is absolute.
    #[inline]
    pub proc is_absolute(path: string) -> bool {
        return path.len > 0 && path[0] == SEPARATOR;
    }

    /// Returns a boolean indicating whether `path` is a link.
    pub proc is_link(path: string) -> bool {
        mut statbuf := libc.Stat();
        return if unsafe { libc.lstat(path.ptr, &mut statbuf) != 0 } {
            false
        } else {
            @as(int32, statbuf.mode) & libc.S_IFMT == libc.S_IFLNK
        };
    }

    /// Strip the last component from a file path.
    /// If the path is empty, returns `none`.
    /// If the path is a file in the current directory (no directory component)
    /// then returns `.`.
    /// If the path is the root directory, returns `/`.
    pub proc dir_name(path: string) -> ?string {
        if path.is_empty() {
            return none;
        }

        mut end_index: uint := path.len - 1;
        while path[end_index] == SEPARATOR : end_index -= 1 {
            if end_index == 0 {
                return none;
            }
        }

        while path[end_index] != SEPARATOR : end_index -= 1 {
            if end_index == 0 {
                return none;
            }
        }

        if end_index == 0 && path[0] == SEPARATOR {
            return separator_str;
        } else if end_index == 0 {
            return none;
        }

        return path.substr(end: end_index);
    }

    /// Returns the last element of path. Trailing path separators are removed before
    /// extracting the last element. If the path is empty, base returns ".". If the
    /// path consists entirely of separators, base returns a single separator.
    pub proc base_name(path: string) -> string {
        if path.is_empty() {
            return "";
        }
        mut end_index: uint := path.len - 1;
        while path[end_index] == SEPARATOR : end_index -= 1 {
            if end_index == 0 {
                return "";
            }
        }
        mut start_index: uint := end_index;
        end_index += 1;
        while path[start_index] != SEPARATOR : start_index -= 1 {
            if start_index == 0 {
                return path.substr(0, end_index);
            }
        }
        return path.substr(start_index + 1, end_index);
    }

    /// Return alls characters found after the last occurrence of `separator_str`.
    /// File extension is included.
    pub proc file_name(path: string) -> string {
        return path.all_after_of_last(separator_str);
    }

    /// Returns the extension of the file name (if any).
    /// This procedure will search for the file extension (separated by a `.`) and will
    /// return the text after the `.`.
    /// Files that end with `.`, or that start with `.` and have no other `.` in their
    /// name, are considered to have no extension.
    pub proc extension(path: string) -> string {
        filename := file_name(path);
        index := filename.last_index_of_byte('.') ?? return "";
        return if index == 0 || index + 1 >= filename.len {
            ""
        } else {
            filename.substr(index)
        };
    }

    /// This procedure is like a series of `cd` statements executed one after another.
    /// It resolves "." and "..".
    /// The result does not have a trailing path separator.
    /// If all paths are relative it uses the current working directory as a starting
    /// point.
    pub proc resolve(paths: ...string) -> !string {
        if paths.len == 0 {
            return core.process_get_cwd()!;
        }
        mut first_index: uint := 0;
        mut have_abs := false;
        mut max_size: uint := 0;
        for i, p in paths {
            if is_absolute(p) {
                first_index = i;
                have_abs = true;
                max_size = 0;
            }
            max_size += p.len + 1;
        }
        mut result_index: uint := 0;
        result := if have_abs {
            unsafe { @as([&]mut uint8, mem.raw_alloc(max_size)) }
        } else {
            cwd := core.process_get_cwd()!;
            tmp := unsafe { @as([&]mut uint8, mem.raw_alloc(max_size + cwd.len + 1)) };
            mem.copy(tmp, cwd.ptr, cwd.len);
            result_index += cwd.len;
            tmp
        };
        defer(error) unsafe {
            mem.raw_dealloc(result)
        }
        for p in paths[first_index:] {
            mut components := p.tokenize(SEPARATOR);
            while component := components.next() {
                if component == "." {
                    continue;
                } else if component == ".." {
                    while {
                        if result_index == 0 {
                            break;
                        }
                        result_index -= 1;
                        if unsafe { result[result_index] == SEPARATOR } {
                            break;
                        }
                    }
                } else {
                    unsafe {
                        result[result_index] = SEPARATOR;
                    }
                    result_index += 1;
                    unsafe {
                        mem.copy(
                            @ptr_add(result, result_index), component.ptr,
                            component.len
                        );
                    }
                    result_index += component.len;
                }
            }
        }
        if result_index == 0 {
            unsafe {
                result[0] = SEPARATOR;
            }
            result_index += 1;
        }
        unsafe {
            result[result_index] = 0;
        }
        return unsafe {
            string.from_raw_with_len(
                @as([&]uint8, mem.raw_resize(result, result_index)), result_index
            )
        };
    }

    /// Returns the relative path from `from_` to `to`. If `from` and `to` each
    /// resolve to the same path (after calling `resolve` on each), a zero-length
    /// string is returned.
    pub proc relative(from_: string, to: string) -> !string {
        _ = resolve(from_)!;
        _ = resolve(to)!;
        mut from_it := from_.tokenize(SEPARATOR);
        mut to_it := to.tokenize(SEPARATOR);
        while {
            from_component := from_it.next() ?? return to_it.rest();
            to_rest := to_it.rest();
            if to_component := to_it.next() {
                if from_component == to_component {
                    continue;
                }
            }
            mut up_count: uint := 1;
            while from_it.next() != none {
                up_count += 1;
            }
            up_index_end := up_count * 3;
            result := unsafe { @as([&]mut uint8, mem.raw_alloc(up_index_end + to_rest.len)) };
            defer(error) unsafe {
                mem.raw_dealloc(result);
            }
            mut result_index: uint := 0;
            while result_index < up_index_end {
                unsafe {
                    result[result_index] = '.';
                    result_index += 1;
                    result[result_index] = '.';
                    result_index += 1;
                    result[result_index] = SEPARATOR;
                    result_index += 1;
                }
            }
            if to_rest.len == 0 {
                // shave off the trailing slash
                buf := unsafe { @as([&]mut uint8, mem.raw_resize(result, result_index - 1)) };
                unsafe {
                    buf[result_index - 1] = 0;
                }
                return unsafe { string.from_raw_with_len(buf, result_index - 1) };
            }
            return unsafe {
                mem.copy(@ptr_add(result, result_index), to_rest.ptr, to_rest.len);
                result[result_index + to_rest.len] = 0;
                string.from_raw(result)
            };
        }
        return "";
    }

    pub proc join(paths: ...string) -> !string {
        if paths.len == 0 {
            return "";
        }
        // find first non-empty path index.
        mut all_paths_provided_were_empty := false;
        mut first_path_index: uint := 0;
        for index, path in paths {
            if path.len > 0 {
                first_path_index = index;
                all_paths_provided_were_empty = false;
                break;
            } else {
                all_paths_provided_were_empty = true;
                continue;
            }
        }
        if all_paths_provided_were_empty {
            // all paths provided were empty, so return early.
            return "";
        }
        // calculate length needed for resulting joined path buffer.
        total_len := {
            mut sum: uint := paths[first_path_index].len;
            mut prev_path := paths[first_path_index];
            @assert(prev_path.len > 0);
            mut i: uint := first_path_index + 1;
            while i < paths.len : i += 1 {
                this_path := paths[i];
                if this_path.is_empty() {
                    continue;
                }
                prev_sep := is_separator(prev_path[prev_path.len - 1]);
                this_sep := is_separator(this_path[0]);
                sum += (!prev_sep && !this_sep).to_uint();
                sum += if prev_sep && this_sep { this_path.len - 1 } else { this_path.len };
                prev_path = this_path;
            }
            sum + 1 // + 1 = NLL character
        };
        buf := unsafe { @as([&]mut uint8, mem.raw_alloc(total_len)) };
        unsafe {
            buf[total_len - 1] = 0;
            defer(error) mem.raw_dealloc(buf);
        }
        paths_first_path_index_value := paths[first_path_index];
        mem.copy(buf, paths_first_path_index_value.ptr, paths_first_path_index_value.len);
        mut buf_index: uint := paths_first_path_index_value.len;
        mut prev_path := paths_first_path_index_value;
        @assert(prev_path.len > 0);
        mut i: uint := first_path_index + 1;
        while i < paths.len : i += 1 {
            this_path := paths[i];
            if this_path.is_empty() {
                continue;
            }
            prev_sep := is_separator(prev_path[prev_path.len - 1]);
            this_sep := is_separator(this_path[0]);
            if !prev_sep && !this_sep {
                unsafe {
                    buf[buf_index] = SEPARATOR;
                }
                buf_index += 1;
            }
            adjusted_path := if prev_sep && this_sep {
                this_path.substr(1)
            } else {
                this_path
            };
            unsafe {
                mem.copy(@ptr_add(buf, buf_index), adjusted_path.ptr, adjusted_path.len);
            }
            buf_index += adjusted_path.len;
            prev_path = this_path;
        }
        // no need for shrink since buf is exactly the correct size.
        return unsafe { string.from_raw(buf) };
    }

    /// Joins the current working directory with the given `path` (if the `path` is relative)
    /// and returns the absolute path representation.
    pub proc absolute(path: string) -> !string {
        cwd := core.process_get_cwd()!;
        if path.is_empty() {
            return cwd;
        }
        rpath := resolve(path)!;
        if rpath == "." {
            return cwd;
        }
        if is_absolute(rpath) {
            return rpath;
        }
        return resolve(join(cwd, rpath)!)!;
    }
}
