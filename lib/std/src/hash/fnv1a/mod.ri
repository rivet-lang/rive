// Copyright (C) 2023-2024 Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

// This module implements a FNV-1a hash.
// See: https://en.wikipedia.org/wiki/Fowler–Noll–Vo_hash_function

const FNV32_PRIME: uint32 := 16777619;
const FNV32_OFFSET_BASIS: uint32 := 2166136261;

const FNV64_PRIME: uint64 := 1099511628211;
const FNV64_OFFSET_BASIS: uint64 := 14695981039346656037;

/// Returns a fnv1a hash of the memory block, described by the dynamic
/// byte array `data`.
#[inline]
pub func sum32(data: [:]uint8) -> uint32 {
    mut hash := FNV32_OFFSET_BASIS;
    mut i: uint := 0;
    while i < data.len : i += 1 {
        hash = (hash ^ @as(uint32, data[i])) * FNV32_PRIME;
    }
    return hash;
}

/// Returns a fnv1a hash of `data_len` bytes starting at
/// the address in the given &byte pointer `data`.
#[inline; unsafe]
pub func sum32_bytes(data: [&]uint8, data_len: uint) -> uint32 {
    mut hash := FNV32_OFFSET_BASIS;
    mut i: uint := 0;
    while i < data_len : i += 1 {
        hash = unsafe { (hash ^ @as(uint32, data[i])) * FNV32_PRIME };
    }
    return hash;
}

/// Returns a fnv1a hash of the string, described by `data`
#[inline]
pub func sum32_string(data: string) -> uint32 {
    mut hash := FNV32_OFFSET_BASIS;
    mut i: uint := 0;
    while i < data.len : i += 1 {
        hash = (hash ^ @as(uint32, data[i])) * FNV32_PRIME;
    }
    return hash;
}

/// Returns a fnv1a hash of the memory block, described by the dynamic
/// byte array `data`.
#[inline]
pub func sum64(data: [:]uint8) -> uint64 {
    mut hash := FNV64_OFFSET_BASIS;
    mut i: uint := 0;
    while i < data.len : i += 1 {
        hash = (hash ^ @as(uint64, data[i])) * FNV64_PRIME;
    }
    return hash;
}

/// Returns a fnv1a hash of `data_len` bytes starting at
/// the address in the given &byte pointer `data`.
#[inline; unsafe]
pub func sum64_bytes(data: [&]uint8, data_len: uint) -> uint64 {
    mut hash := FNV64_OFFSET_BASIS;
    mut i: uint := 0;
    while i < data_len : i += 1 {
        hash = unsafe { (hash ^ @as(uint64, data[i])) * FNV64_PRIME };
    }
    return hash;
}

/// Returns a fnv1a hash of the string, described by `data`
#[inline]
pub func sum64_string(data: string) -> uint64 {
    mut hash := FNV64_OFFSET_BASIS;
    mut i: uint := 0;
    while i < data.len : i += 1 {
        hash = (hash ^ @as(uint64, data[i])) * FNV64_PRIME;
    }
    return hash;
}
