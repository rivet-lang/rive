// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

use core::stdc;

const F_OK: i32 = 0;
const X_OK: i32 = 1;
const W_OK: i32 = 2;
const R_OK: i32 = 4;

const S_IFMT: i32  = 0xF000; // type of file
const S_IFDIR: i32 = 0x4000; // directory
const S_IFLNK: i32 = 0xA000; // link

pub const SEPARATOR: u8 = $if (_WINDOWS_) b'\\' $else b'/';
pub const SEPARATOR_STR: string = $if (_WINDOWS_) "\\" $else "/";
pub const DELIMITER: string = $if (_WINDOWS_) ";" $else ":";

pub const MAX_PATH_LEN: i32 = $if (_WINDOWS_) 260 $else 4096;

/// Returns true if `path` (file or directory) exists.
pub func exists(path: string) bool {
    return unsafe { stdc::access(path.as_ptr(), F_OK) != -1 };
}

/// Returns `true` if `path` is executable.
pub func is_executable(path: string) bool {
    return unsafe { stdc::access(path.as_ptr(), X_OK) != -1 };
}

/// Returns `true` if `path` is writable.
pub func is_writable(path: string) bool {
    return unsafe { stdc::access(path.as_ptr(), W_OK) != -1 };
}

/// Returns `true` if `path` is readable.
pub func is_readable(path: string) bool {
    return unsafe { stdc::access(path.as_ptr(), R_OK) != -1 };
}

/// Returns true if `path` is a directory.
pub func is_dir(path: string) bool {
    let mut statbuf = stdc::Stat();
    if (unsafe { stdc::stat(path.as_ptr(), addr_of_mut!(statbuf)) != 0 }) {
        return false;
    }
    return (as(i32, statbuf.mode) & S_IFMT) == S_IFDIR;
}

/// Returns true if `path` is a file.
pub func is_file(path: string) bool {
    return exists(path) and !is_dir(path);
}

/// Returns `true` if path is absolute.
pub func is_absolute(path: string) bool {
    return path.len > 0 and path[0] == b'/';
}

/// Returns a boolean indicating whether `path` is a link.
pub func is_link(path: string) bool {
    let mut statbuf = stdc::Stat();
    if (unsafe { stdc::lstat(path.as_ptr(), addr_of_mut!(statbuf)) != 0 }) {
        return false;
    }
    return (as(i32, statbuf.mode) & S_IFMT) == S_IFLNK;
}
