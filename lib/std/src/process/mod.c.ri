// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c/libc;
import core;

import ../fs.Path;
import ../strings.Builder;

pub alias id := core.process_id;
pub alias panic := core.process_panic;
pub alias abort := core.process_abort;
pub alias exit := core.process_exit;
pub alias get_cwd := core.process_get_cwd;
pub alias executable := core.process_executable;

pub var args := core.ARGS;
pub var wd_at_startup := get_cwd() catch ".";
pub var executable_dir := Path.dir_name(executable() catch wd_at_startup);

#[boxed]
pub struct NotADirectoryError < Throwable {
    msg: string;

    pub func to_string(self) -> string {
        return self.msg;
    }
}

pub func set_cwd(p: string) -> ! {
    if !Path.is_directory(p) {
        throw NotADirectoryError("`{}` is not a directory".fmt(p));
    }
    core.process_set_cwd(p)!;
}

struct Result {
	pub output: string;
	pub exit_code: int32;
}

#[boxed]
struct ExecutionFailedError < Throwable {
    cmd: string;

    pub func to_string(self) -> string {
        return "execution failed for `{}`".fmt(self.cmd);
    }
}

/// Starts the specified command, waits for it to complete, and returns
/// both its output and the exit code.
pub func execute(cmd: string) -> !Result {
    pcmd := if cmd.contains("2>") { cmd } else { "{} 2>&1".fmt(cmd) };
    unsafe {
        if f := libc.popen(pcmd.ptr, c"r") {
            fd := libc.fileno(f);
            buf := [4096]mut uint8();
            pbuf: [&]mut uint8 := &mut buf[0];
            mut output := Builder.new(1024);
            while {
                len := libc.read(fd, pbuf, 4096);
                if len == 0 || len == -1 {
                    break;
                }
                output.write_raw_with_len(pbuf, @as(uint, len));
            }
            return Result(output.to_string(), libc.pclose(f));
        }
        throw ExecutionFailedError(cmd);
    }
}
