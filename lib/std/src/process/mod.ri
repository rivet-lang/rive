// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import c;
import c/libc;
import core;

import ../fs/path;
import { Builder } from ../strings;

public alias id = core.process_id;
public alias panic = core.process_panic;
public alias abort = core.process_abort;
public alias exit = core.process_exit;
public alias get_cwd = core.process_get_cwd;
public alias executable = core.process_executable;

public var ARGS = unsafe { core.ARGS };
public var WD_AT_STARTUP = get_cwd() catch ".";
public var EXECUTABLE_DIR = path.dirname(executable() catch WD_AT_STARTUP);

[boxed]
public struct NotADirectoryError : Error {
    msg: string;

    public func to_string(self) string {
        return self.msg;
    }
}

public func set_cwd(p: string) ! {
    if !path.is_directory(p) {
        return NotADirectoryError("`{}` is not a directory".fmt(p));
    }
    core.process_set_cwd(p)!;
}

struct Result {
	public output: string;
	public exit_code: int32;
}

[boxed]
struct ExecutionFailedError : Error {
    cmd: string;

    public func to_string(self) string {
        return "execution failed for `{}`".fmt(self.cmd);
    }
}

/// Starts the specified command, waits for it to complete, and returns
/// both its output and the exit code.
public func execute(cmd: string) !Result {
    pcmd := if cmd.contains("2>") { cmd } else { "{} 2>&1".fmt(cmd) };
    unsafe {
        if f := libc.popen(pcmd.ptr, c"r") {
            fd := libc.fileno(f);
            buf: [4096]mut uint8 := []!;
            pbuf: [*]mut uint8 := &mut buf[0];
            mut output := Builder.new(1024);
            while {
                len := libc.read(fd, pbuf, 4096);
                if len == 0 or len == -1 {
                    break;
                }
                output.write_raw_with_len(pbuf, @cast(usize, len));
            }
            return Result(output.to_string(), libc.pclose(f));
        }
        return ExecutionFailedError(cmd);
    }
}
