// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import { string_to_usize } from std/conv;

const VER_MAJOR: uint64 = 0;
const VER_MINOR: uint64 = 1;
const VER_PATCH: uint64 = 2;
static versions = [VER_MAJOR, VER_MINOR, VER_PATCH];

struct RawVersion {
    prerelease: string;
    metadata: string;
    raw_ints: []mut string;

    // TODO: Rewrite using regex:
    // /(\d+)\.(\d+)\.(\d+)(?:\-([0-9A-Za-z-.]+))?(?:\+([0-9A-Za-z-]+))?/
    func parse(input: string) -> Self {
        mut raw_version := input;
        mut prerelease := "";
        mut metadata := "";
        if plus_idx := raw_version.last_index_of_byte(b'+') {
            metadata = raw_version[plus_idx + 1..];
            raw_version = raw_version[0..plus_idx];
        }
        if hyphen_idx := raw_version.index_of_byte(b'-') {
            prerelease = raw_version[hyphen_idx + 1..];
            raw_version = raw_version[0..hyphen_idx];
        }
        return RawVersion(prerelease, metadata, raw_version.split("."));
    }

    func is_valid(&self) -> bool {
        if self.raw_ints.len != 3 {
            return false;
        }
        return is_valid_number(self.raw_ints[VER_MAJOR])
            and is_valid_number(self.raw_ints[VER_MINOR])
            and is_valid_number(self.raw_ints[VER_PATCH])
            and is_valid_string(self.prerelease) and is_valid_string(self.metadata);
    }

    @[inline]
    func is_missing(&self, typ: uint64) -> bool {
        return typ >= self.raw_ints.len - 1;
    }

    func coerce(&self) -> !Version {
        ver := self.complete();
        if !is_valid_number(self.raw_ints[VER_MAJOR]) {
            return InvalidVersionError("invalid major version: {}".fmt(self.raw_ints[VER_MAJOR]));
        }
        return ver.to_version();
    }

    func complete(&self) -> RawVersion {
        mut raw_ints := self.raw_ints.clone();
        while raw_ints.len < 3 {
            raw_ints.push("0");
        }
        return RawVersion(self.prerelease, self.metadata, raw_ints);
    }

    func validate(&self) -> ?Version {
        if !self.is_valid() {
            return none;
        }
        return self.to_version();
    }

    @[inline]
    func to_version(&self) -> Version {
        return Version(
            string_to_usize(self.raw_ints[VER_MAJOR]) catch 0,
            string_to_usize(self.raw_ints[VER_MINOR]) catch 0,
            string_to_usize(self.raw_ints[VER_PATCH]) catch 0,
            self.prerelease, self.metadata
        );
    }
}
