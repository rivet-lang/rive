// Copyright (C) 2023-present Jose Mendoza - All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

var comparator_sep := " ";
var comparator_set_sep := " || ";
var hypehn_range_sep := " - ";
var x_range_symbols := "Xx*";

enum Operator as uint8 {
    Gt,
    Lt,
    Ge,
    Le,
    Eq
}

#[boxed]
pub struct InvalidComparatorFormatError < Throwable {
    msg: string;

    pub proc to_string(self) -> string {
        return self.msg;
    }
}

struct Comparator {
    ver: Version;
    op: Operator;

    proc parse(input: string) -> ?Comparator {
        mut op := Operator.Eq;
        raw_version: string := match {
            input.starts_with(">=") -> {
                op = .Ge;
                input.substr(2)
            },
            input.starts_with("<=") -> {
                op = .Le;
                input.substr(2)
            },
            input.starts_with(">") -> {
                op = .Gt;
                input.substr(1)
            },
            input.starts_with("<") -> {
                op = .Lt;
                input.substr(1)
            },
            input.starts_with("=") -> input.substr(1),
            else -> input
        };
        return Comparator(coerce(raw_version) catch return none, op);
    }

    #[inline]
    proc satisfies(&self, ver: Version) -> bool {
        return match self.op {
            .Gt -> ver > self.ver,
            .Lt -> ver < self.ver,
            .Ge -> ver >= self.ver,
            .Le -> ver <= self.ver,
            .Eq -> ver == self.ver
        };
    }
}

struct ComparatorSet {
    comparators: []Comparator;

    proc parse(input: string) -> !ComparatorSet {
        raw_comparators := input.split(comparator_sep);
        if raw_comparators.len > 2 {
            throw InvalidComparatorFormatError(
                "invalid format of comparator set for input '{}'".fmt(input)
            );
        }
        mut comparators := []Comparator();
        for raw_comp in raw_comparators {
            comparators.push(
                Comparator.parse(raw_comp) ?? throw InvalidComparatorFormatError(
                    "invalid comparator '{}' in input '{}'".fmt(raw_comp, input)
                )
            );
        }
        return ComparatorSet(comparators);
    }

    #[inline]
    proc expand(input: string) -> ?ComparatorSet {
        return match input[0] {
            '~' -> expand_tilda(input.substr(1)),
            '^' -> expand_tilda(input.substr(1)),
            else -> {
                if input.contains(hypehn_range_sep) {
                    expand_hyphen(input)
                } else {
                    Range.expand_x(input)
                }
            }
        };
    }

    proc satisfies(&self, ver: Version) -> bool {
        for comp in self.comparators {
            if !comp.satisfies(ver) {
                return false;
            }
        }
        return true;
    }
}

struct Range {
    comparator_sets: []ComparatorSet;

    proc parse(input: string) -> ?Range {
        raw_comparator_sets := input.split(comparator_set_sep);
        mut comparator_sets := []ComparatorSet();
        for raw_comp_set in raw_comparator_sets {
            if can_expand(raw_comp_set) {
                comparator_sets.push(ComparatorSet.expand(raw_comp_set) ?? return none);
            } else {
                comparator_sets.push(ComparatorSet.parse(raw_comp_set) catch return none);
            }
        }
        return Range(comparator_sets);
    }

    proc parse_x(input: string) -> ?Version {
        raw_ver := RawVersion.parse(input).complete();
        for typ in versions {
            if raw_ver.raw_ints[typ].index_of_any(x_range_symbols) == none {
                continue;
            }
            match typ {
                VER_MAJOR -> {
                    raw_ver.raw_ints[VER_MAJOR] = "0";
                    raw_ver.raw_ints[VER_MINOR] = "0";
                    raw_ver.raw_ints[VER_PATCH] = "0";
                },
                VER_MINOR -> {
                    raw_ver.raw_ints[VER_MINOR] = "0";
                    raw_ver.raw_ints[VER_PATCH] = "0";
                },
                VER_PATCH -> raw_ver.raw_ints[VER_PATCH] = "0",
                else -> { }
            }
        }
        if raw_ver.is_valid() {
            return raw_ver.to_version();
        }
        return none;
    }

    proc expand_x(raw_range: string) -> ?ComparatorSet {
        min_ver := Range.parse_x(raw_range) ?? return none;
        if min_ver.major == 0 {
            return ComparatorSet(+[Comparator(min_ver, .Ge)]);
        }
        mut max_ver := min_ver;
        max_ver = if min_ver.minor == 0 {
            min_ver.increment(.Major)
        } else {
            min_ver.increment(.Minor)
        };
        return make_comparator_set_ge_lt(min_ver, max_ver);
    }

    proc satisfies(&self, ver: Version) -> bool {
        mut final_result := false;
        for set in self.comparator_sets {
            final_result = final_result || set.satisfies(ver);
        }
        return final_result;
    }
}

proc can_expand(input: string) -> bool {
    input0 := input[0];
    return input0 == '~' || input0 == '^' || input.contains(hypehn_range_sep)
        || input.index_of_any(x_range_symbols) != none;
}

proc expand_tilda(raw_version: string) -> ?ComparatorSet {
    min_ver := coerce(raw_version) catch return none;
    mut max_ver := min_ver;
    max_ver = if min_ver.minor == 0 && min_ver.patch == 0 {
        min_ver.increment(.Major)
    } else {
        min_ver.increment(.Minor)
    };
    return make_comparator_set_ge_lt(min_ver, max_ver);
}

proc expand_caret(raw_version: string) -> ?ComparatorSet {
    min_ver := coerce(raw_version) catch return none;
    mut max_ver := min_ver;
    max_ver = if min_ver.major == 0 {
        min_ver.increment(.Minor)
    } else {
        min_ver.increment(.Major)
    };
    return make_comparator_set_ge_lt(min_ver, max_ver);
}

proc expand_hyphen(raw_range: string) -> ?ComparatorSet {
    raw_versions := raw_range.split(hypehn_range_sep);
    if raw_versions.len != 2 {
        return none;
    }
    min_ver := coerce(raw_versions[0]) catch return none;
    raw_max_ver := RawVersion.parse(raw_versions[1]);
    if raw_max_ver.is_missing(VER_MAJOR) {
        return none;
    }
    mut max_ver := raw_max_ver.coerce() catch return none;
    if raw_max_ver.is_missing(VER_MINOR) {
        max_ver = max_ver.increment(.Minor);
        return make_comparator_set_ge_lt(min_ver, max_ver);
    }
    return make_comparator_set_ge_le(min_ver, max_ver);
}

#[inline]
proc make_comparator_set_ge_lt(min: Version, max: Version) -> ComparatorSet {
    return ComparatorSet(+[Comparator(min, .Ge), Comparator(max, .Lt)]);
}

#[inline]
proc make_comparator_set_ge_le(min: Version, max: Version) -> ComparatorSet {
    return ComparatorSet(+[Comparator(min, .Ge), Comparator(max, .Le)]);
}
