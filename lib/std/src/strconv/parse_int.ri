// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

import std/errors;

public alias InvalidSyntaxError = errors.InvalidSyntaxError;
public alias InvalidBaseError = errors.InvalidBaseError;
public alias InvalidBitSizeError = errors.InvalidBitSizeError;
public alias ValueOutOfRangeError = errors.ValueOutOfRangeError;

const INT_SIZE: uint32 = #if _x64_ 64 #else 32 #endif;

[inline]
func lower(c: uint8) uint8 {
    return c | (b'x' - b'X');
}

/// This is like `parse_int` but for unsigned numbers.
/// A sign prefix is not permitted.
public func parse_uint(s_: string, mut base: int32, mut bit_size: uint32) !uint64 {
    if s_ == "" {
        return InvalidSyntaxError("empty string");
    }
    s := s_;
    base0 := base == 0;

    mut start_index: usize := 0;
    switch {
        (base >= 2 and base <= 36) => { /* valid base; nothing to do */ },
        (base == 0) => {
            // look for octal, hex prefix.
            base = 10;
            if s[0] == b'0' {
                switch {
                    (s.len >= 3 and lower(s[1]) == b'b') => {
                        base = 2;
                        start_index = 2;
                    },
                    (s.len >= 3 and lower(s[1]) == b'o') => {
                        base = 8;
                        start_index = 2;
                    },
                    (s.len >= 3 and lower(s[1]) == b'x') => {
                        base = 16;
                        start_index = 2;
                    },
                    // manage leading zeros in decimal base's numbers
                    s.len >= 2 and (s[1] >= b'0' and s[1] <= b'9') => {
                        base = 10;
                        start_index = 1;
                    },
                    else => {
                        base = 8;
                        start_index = 1;
                    }
                }
            }
        },
        else => return InvalidBaseError("invalid base {}".fmt(base))
    }

    if bit_size == 0 {
        bit_size = INT_SIZE;
    } else if bit_size < 0 or bit_size > 64 {
        return InvalidBitSizeError("invalid bit size {}".fmt(bit_size));
    }

    // Cutoff is the smallest number such that `cutoff * base > MAX_U64`.
    // Use compile-time constants for common cases.
    cutoff: uint64 := switch base {
        10 => uint64.MAX / 10 + 1,
        16 => uint64.MAX / 16 + 1,
        else => uint64.MAX / @cast(uint64, base) + @cast(uint64, 1)
    };

    max_val: uint64 := if bit_size == 64 {
        uint64.MAX
    } else {
        (@cast(uint64, 1) << @cast(uint64, bit_size)) - @cast(uint64, 1)
    };
    mut underscores := false;
    mut n: uint64 := 0;

    mut i: usize := start_index;
    while i < s.len : i += 1 {
        c := s[i];
        cl := lower(c);

        mut d: uint8 := 0;
        switch {
            (c == b'_' and base0) => {
                underscores = true;
                continue;
            },
            (b'0' <= c and c <= b'9') => d = c - b'0',
            (b'a' <= cl and cl <= b'z') => d = cl - b'a' + 1,
            else => return InvalidSyntaxError("invalid syntax")
        }

        if d >= @cast(uint8, base) {
            return InvalidSyntaxError("invalid syntax");
        }

        if n >= cutoff {
            // `n * base` overflows
            return ValueOutOfRangeError("value out of range");
        }
        n *= @cast(uint64, base);

        n1 := n + @cast(uint64, d);
        if n1 < n or n1 > max_val {
            // `n + d` overflows
            return ValueOutOfRangeError("value out of range");
        }
        n = n1;
    }

    if underscores and !underscore_ok(s) {
        return InvalidSyntaxError("invalid syntax");
    }

    return n;
}

/// Interprets a string `s` in the given `base` (0, 2 to 36) and bit size
/// (0 to 64) and returns the corresponding value i.
///
/// The string may begin with a leading sign: "+" or "-".
///
/// If the base argument is 0, the true base is implied by the string's
/// prefix following the sign (if present): 2 for "0b", 8 for "0" or "0o",
/// 16 for "0x", and 10 otherwise. Also, for argument base 0 only,
/// underscore characters are permitted as defined by the Rivet syntax for
/// integer literals.
///
/// The `bit_size` argument specifies the integer type that the result must
/// fit into. Bit sizes 0, 8, 16, 32, and 64 correspond to int8, int16, int32, and
/// int64. If `bit_size` is below 0 or above 64, an error is returned.
public func parse_int(s: string, base: int32, mut bit_size: uint32) !int64 {
    if s == "" {
        return InvalidSyntaxError("invalid syntax");
    }

    // pick off leading sign.
    mut s0 := s;
    mut neg := false;
    if s[0] == b'+' {
        s0 = s[1..];
    } else if s[0] == b'-' {
        neg = true;
        s0 = s[1..];
    }

    // convert unsigned and check range.
    un := parse_uint(s0, base, bit_size)!;
    if bit_size == 0 {
        bit_size = INT_SIZE;
    }

    cutoff := @cast(uint64, 1) << bit_size - 1;
    if !neg and un >= cutoff {
        return ValueOutOfRangeError("value out of range");
    }
    if neg and un > cutoff {
        return ValueOutOfRangeError("value out of range");
    }

    return if neg { -@cast(int64, un) } else { @cast(int64, un) };
}

/// Equivalent to parse_int(s, 10, 0), converted to type int64.
[inline]
public func atoi(s: string) !int64 {
    return parse_int(s, 10, 0)!;
}

/// Reports whether the underscores in `s_` are allowed.
/// Checking them in this one function lets all the parsers skip over them simply.
/// Underscore must appear only between digits or between a base prefix and a digit.
func underscore_ok(s_: string) bool {
    // saw tracks the last character (class) we saw:
    // ^ for beginning of number,
    // 0 for a digit or base prefix,
    // _ for an underscore,
    // ! for none of the above.
    mut saw := b'^';
    mut i: usize := 0;
    mut s := s_;

    // optional sign.
    if s.len >= 1 and (s[0] == b'-' or s[0] == b'+') {
        s = s[1..];
    }

    // optional base prefix.
    mut hex := false;
    if s.len >= 2 and s[i] == b'0' and (
        lower(s[1]) == b'b' or lower(s[1]) == b'o' or lower(s[1]) == b'x'
    ) {
        // base prefix counts as a digit for "underscore as digit separator"
        i = 2;
        saw = b'0';
        hex = lower(s[1]) == b'x';
    }

    // number proper.
    while i < s.len : i += 1 {
        // digits are always okay.
        if (b'0' <= s[i] and s[i] <= b'9') or
            (hex and b'a' <= lower(s[i]) and lower(s[i]) <= b'f') {
            saw = b'0';
            continue;
        }
        // underscore must follow digit.
        if s[i] == b'_' {
            if saw != b'0' {
                return false;
            }
            saw = b'_';
            continue;
        }
        // underscore must also be followed by digit.
        if saw == b'_' {
            return false;
        }
        // saw non-digit, non-underscore.
        saw = b'!';
    }

    return saw != b'_';
}
