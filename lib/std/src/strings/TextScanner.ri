// Copyright (C) 2023 The Rivet Developers. All rights reserved.
// Use of this source code is governed by an MIT license that can
// be found in the LICENSE file.

/// Simplifies writing small scanners/parsers by providing safe methods to scan
/// texts character by character, peek for the next characters, go back, etc.
pub struct TextScanner {
    pub input: string;
    pub len: uint;
    mut pos: uint; // current position; pos is always kept in [0, .len]

    /// Returns a stack allocated instance of TextScanner.
    pub func new(input: string) -> Self {
        return Self(input, input.len);
    }

    /// Returns the next character code from the input text or `none` if it
    /// can't reach the next character. Advances the scanner position.
    #[inline]
    pub func next(mut self) -> ?uint8 {
        if self.pos < self.len {
            opos := self.pos;
            self.pos += 1;
            return self.input[opos];
        }
        return none;
    }

    /// Skips ahead `n` characters, stopping at the end of the input; `skip` is
    /// slightly faster than `.next()`.
    #[inline]
    pub func skip(mut self, n: uint := 1) {
        self.pos += n;
        if self.pos > self.len {
            self.pos = self.len;
        }
    }

    /// Returns the character code from the input text at position + `n` or `none` if
    /// it can't peek `n` characters ahead.
    /// Unlike `.next()`, `.peek()` does not change the state of the scanner.
    #[inline]
    pub func peek(&self, n: uint := 0) -> ?uint8 {
        if self.pos + n < self.len {
            return self.input[self.pos + n];
        }
        return none;
    }

    /// Goes back `n` characters from the current scanner position.
    pub func back(mut self, n: uint := 1) {
        self.pos -= n;
        if self.pos > self.len {
            self.pos = self.len;
        }
    }

    /// Returns the character code from the input text at position - `n` or `none` if
    /// it can't peek `n` characters back.
    /// Unlike `.back()`, `.peek_back()` does not change the state of the scanner.
    #[inline]
    pub func peek_back(&self, n: uint := 1) -> ?uint8 {
        offset := n + 1;
        if self.pos >= offset {
            return self.input[self.pos - offset];
        }
        return none;
    }

    /// Returns the current character code from the input text or `none` at the start
    /// of the input text.
    /// NOTE: after `c := ts.next()`, `ts.current()` will also return `c`.
    #[inline]
    pub func current(self) -> ?uint {
        if self.pos > 0 {
            return self.input[self.pos - 1];
        }
        return none;
    }

    /// Has the same effect as `while c := ts.next() -> {}` i.e. after calling `.goto_end()`,
    /// the scanner will be at the end of the input text.
    /// Further `.next()` calls will return `none`, unless you go back.
    pub func goto_end(mut self) {
        self.pos = self.len;
    }

    /// Returns how many characters remain from current position.
    pub func remaining(&self) -> uint {
        return self.len - self.pos;
    }

    /// Resets the internal state of the scanner. After calling `.reset()`, `.next()`
    /// will start reading again from the start of the input text.
    pub func reset(mut self) {
        self.pos = 0;
    }
}
