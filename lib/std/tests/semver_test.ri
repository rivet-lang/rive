import std/semver;

struct TestVersion {
    raw: string;
    major: uint64;
    minor: uint64;
    patch: uint64;
    prerelease: string;
    metadata: string;
}

struct TestRange {
    raw_version: string;
    range_satisfied: string;
    range_unsatisfied: string;
}

struct TestCoerce {
    invalid: string;
    valid: string;
}

var versionToTest = [
    TestVersion("1.2.4", 1, 2, 4, "", ""),
    TestVersion("1.2.4-prerelease-1", 1, 2, 4, "prerelease-1", ""),
    TestVersion("1.2.4+20191231", 1, 2, 4, "", "20191231"),
    TestVersion("1.2.4-prerelease-1+20191231", 1, 2, 4, "prerelease-1", "20191231"),
    TestVersion("1.2.4+20191231-prerelease-1", 1, 2, 4, "", "20191231-prerelease-1")
];

var rangesToTest = [
    TestRange("1.1.0", "1.1.0", "1.1.1"),
    TestRange("1.1.0", "=1.1.0", "=1.1.1"),
    TestRange("1.1.0", ">=1.0.0", "<1.1.0"),
    TestRange("1.1.0", ">=1.0.0 <=1.1.0", ">=1.0.0 <1.1.0"),
    TestRange("2.3.1", ">=1.0.0 <=1.1.0 || >2.0.0 <2.3.4", ">=1.0.0 <1.1.0"),
    TestRange("2.3.1", ">=1.0.0 <=1.1.0 || >2.0.0 <2.3.4", ">=1.0.0 <1.1.0 || >4.0.0 <5.0.0"),
    TestRange("2.3.1", "~2.3.0", "~2.4.0"),
    TestRange("3.0.0", "~3.0.0", "~4.0.0"),
    TestRange("2.3.1", "^2.0.0", "^2.4.0"),
    TestRange("0.3.1", "^0.3.0", "^2.4.0"),
    TestRange("0.0.4", "^0.0.1", "^0.1.0"),
    TestRange("2.3.4", "^0.0.1 || ^2.3.0", "^3.1.0 || ^4.2.0"),
    TestRange("2.3.4", ">2 || <3", ">3 || >4"),
    TestRange("2.3.4", "2.3.4 - 2.3.5", "2.5.1 - 2.8.3"),
    TestRange("2.3.4", "2.2 - 2.3", "2.4 - 2.8"),
    TestRange("2.3.4", "2.3.x", "2.4.x"),
    TestRange("2.3.4", "2.x", "3.x"),
    TestRange("2.3.4", "*", "3.x")
];

var coerceToTest = [
    TestCoerce("1.2.0.4", "1.2.0"),
    TestCoerce("1.2.0", "1.2.0"),
    TestCoerce("1.2", "1.2.0"),
    TestCoerce("1", "1.0.0"),
    TestCoerce("1-alpha", "1.0.0-alpha"),
    TestCoerce("1+meta", "1.0.0+meta"),
    TestCoerce("1-alpha+meta", "1.0.0-alpha+meta")
];

var invalidVersionToTest = [
    "a.b.c",
    "1.2",
    "1.2.x",
    "1.2.3.4",
    "1.2.3-alpha@",
    "1.2.3+meta%"
];

var invalidRangesToTest = [
    "^a",
    "~b",
    "a - c",
    ">a",
    "a",
    "a.x"
];

test "std.semver.Version.from_string()" {
    for item in versionToTest {
        ver := semver.Version.from_string(item.raw) catch {
            @assert(false);
            continue
        };
        @assert(ver.major == item.major);
        @assert(ver.minor == item.minor);
        @assert(ver.patch == item.patch);
        @assert(ver.metadata == item.metadata);
        @assert(ver.prerelease == item.prerelease);
        @assert(ver.to_string() == item.raw);
    }
    for ver in invalidVersionToTest {
        _ = semver.Version.from_string(ver) catch {
            @assert(true);
            continue
        };
        @assert(false);
    }
}

test "std.semver.Version.increment()" {
    version1 := semver.Version.build(1, 2, 3);
    {
        version1_inc := version1.increment(.Major);
        @assert(version1_inc.major == 2);
        @assert(version1_inc.minor == 0);
        @assert(version1_inc.patch == 0);
    }
    {
        version1_inc := version1.increment(.Minor);
        @assert(version1_inc.major == 1);
        @assert(version1_inc.minor == 3);
        @assert(version1_inc.patch == 0);
    }
    {
        version1_inc := version1.increment(.Patch);
        @assert(version1_inc.major == 1);
        @assert(version1_inc.minor == 2);
        @assert(version1_inc.patch == 4);
    }
}


test "std.semver.Version comparing" {
    first := semver.Version.build(1, 0, 0);
    patch := semver.Version.build(1, 0, 1);
    minor := semver.Version.build(1, 2, 3);
    major := semver.Version.build(2, 0, 0);
    @assert(first <= first);
    @assert(first >= first);
    @assert(!(first < first));
    @assert(!(first > first));
    @assert(patch >= first);
    @assert(first <= patch);
    @assert(!(first >= patch));
    @assert(!(patch <= first));
    @assert(patch > first);
    @assert(first < patch);
    @assert(!(first > patch));
    @assert(!(patch < first));
    @assert(minor > patch);
    @assert(patch < minor);
    @assert(!(patch > minor));
    @assert(!(minor < patch));
    @assert(major > minor);
    @assert(minor < major);
    @assert(!(minor > major));
    @assert(!(major < minor));
}

test "std.semver.Version.satisfies()" {
    for item in rangesToTest {
        ver := semver.Version.from_string(item.raw_version) catch {
            @assert(false);
            return
        };
        @assert(ver.satisfies(item.range_satisfied));
        @assert(!ver.satisfies(item.range_unsatisfied));
    }
}

test "std.semver.Version.satisfies() invalid" {
    ver := semver.Version.from_string("1.0.0") catch {
        @assert(false);
        return
    };
    for item in invalidRangesToTest {
        @assert(!ver.satisfies(item));
    }
}

test "std.semver.coerce()" {
    for item in coerceToTest {
        valid := semver.Version.from_string(item.valid) catch {
            @assert(false);
            return
        };
        fixed := semver.coerce(item.invalid) catch {
            @assert(false);
            return
        };
        @assert(fixed == valid);
    }
}

test "std.semver.coerce() invalid" {
    mut res := false;
    _ = semver.coerce("a") catch {
        res = true;
        semver.Version()
    };
    @assert(res);
}

test "std.semver.is_valid()" {
    for item in versionToTest {
        @assert(semver.is_valid(item.raw));
    }
    for item in invalidVersionToTest {
        @assert(!semver.is_valid(item));
    }
}
