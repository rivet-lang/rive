// Copyright (C) 2022 The Rivet Team. All rights reserved.
// Use of this source code is governed by an MIT license
// that can be found in the LICENSE file.

use std::process { exit };
use std::console { self, can_show_color_on_stdout, eprintln, print, println };

let SUPPORT_COLOR: bool = can_show_color_on_stdout();

let OK_STATUS: string = bold(green(" [  OK  ] "));
let FAILED_STATUS: string = bold(red(" [ FAIL ] "));
let SKIP_STATUS: string = bold(yellow(" [ SKIP ] "));
let DIVIDER: string = bold(header("", "-"));

extern (Rivet) {
    let test_runner: TestRunner;
}

fn header(txt: string, sep: string) string {
    if (SUPPORT_COLOR) {
        // TODO: return console::header(txt, sep);
    }
    return txt;
}

fn bold(txt: string) string {
    if (SUPPORT_COLOR) {
        return console::bold(txt);
    }
    return txt;
}

fn green(txt: string) string {
    if (SUPPORT_COLOR) {
        return console::green(txt);
    }
    return txt;
}

fn red(txt: string) string {
    if (SUPPORT_COLOR) {
        return console::red(txt);
    }
    return txt;
}

fn yellow(txt: string) string {
    if (SUPPORT_COLOR) {
        return console::yellow(txt);
    }
    return txt;
}

enum TestResult : u8 {
    Ok,
    Skipped,
    ErrorRaised,
    Failed
}

struct Test {
    name: string;
    test_fn : fn (*Test) void;
    result: TestResult;
    err_pos: string;
    err: Error;
}

struct TestRunner {
    tests: [Test];
    mut ok_tests: i32;
    mut fail_tests: i32;
    mut skip_tests: i32;

    fn run(mut self) void {
        for (test_ in self.tests) {
            (test_.test_func)(addr_of!(test_));
            switch (test_.result) {
                .Ok => {
                    self.print_test_ok(test_.name);
                },
                .Skipped => {
                    self.print_test_skip(test_.name);
                },
                .Failed => {
                    self.print_test_failed(test_.name, test_.err_pos);
                },
                .ErrorRaised => {
                    self.print_test_failed(test_.name, test_.err_pos);
                    eprintln("    Error raised: {}", test_.err);
                }
            }
        }
        self.print_summary_tests();
        exit(as(i32, self.fail_tests != 0));
    }

    fn print_summary_tests(self) void {
        println(DIVIDER);
        print(bold("Summary for all tests: "));
        if (self.ok_tests > 0) {
            print("{}, ", bold(green("{} passed".fmt(self.ok_tests))));
        }
        if (self.fail_tests > 0) {
            print("{}, ", bold(red("{} failed".fmt(self.fail_tests))));
        }
        if (self.skip_tests > 0) {
            print("{}, ", bold(yellow("{} skipped".fmt(self.skip_tests))));
        }
        println(bold("{} total.".fmt(self.tests.len)));
        println(DIVIDER);
    }

    fn print_header(self) void {
        println(bold(header("Rivet TestRunner", "-")));
    }

    fn print_test_ok(self, name: string) void {
        println(OK_STATUS.concat(name));
        self.ok_tests++;
    }

    fn print_test_skip(self, name: string) void {
        eprintln(SKIP_STATUS.concat(name));
        self.skip_tests++;
    }

    fn print_test_failed(self, name: string, pos: string) void {
        eprintln(FAILED_STATUS.concat(name));
        eprintln(pos);
        self.fail_tests++;
    }
}
