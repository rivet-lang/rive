func default_arg(x: int32 = 1) {
    @assert(x == 1 or x == 5 or x == 10);
}

test "call expression with default arguments" {
    default_arg();
    default_arg(5);
    default_arg(x: 10);
}

func foo(_a: bool = false, _b: bool = false) { }

func bar(_a: bool, _b: bool = true) { }

func baz(_a: bool, _b: bool) { }

func qux(_a: bool) { }

test "call expression with named arguments" {
    foo(_a: true, _b: true);
    bar(true, _b: true);
    baz(true, true);

    a := true;
    qux(a);
}

func args(values: ...int32) -> int32 {
    mut res := 0;
    for v in values {
        res += v;
    }
    return res;
}

test "call expression with spread expression" {
    @assert(args(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 55);
    @assert(args(...[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 55);
}

func mutable_primitive_type_argument(mut a: int32) {
    a += 2;
}

test "call expression to a function with mutable argument of primitive type without modifying its value" {
    x := 2;
    mutable_primitive_type_argument(x);
    @assert(x == 2);
}
