struct ErrDefer {
    mut i: int32;
}

func test_defer() int32 {
    mut a := 1;
    defer a = 5;
    return a;
}

test "`defer` statement" {
    @assert(test_defer() == 5);
}

func test_errdefer(mut err_defer: ErrDefer, err: bool) ! {
    defer err_defer.i += 1;
    errdefer err_defer.i += 2;

    if err {
        return MyError();
    }
}

test "`errdefer` statement" {
    mut err_defer := ErrDefer(i: 0);
    test_errdefer(err_defer, false) catch { };
    @assert(err_defer.i == 1);

    test_errdefer(err_defer, true) catch { };
    @assert(err_defer.i == 4);
}

func return_error() ! {
    return MyError();
}

func return_and_errdefer(mut err_defer: ErrDefer) ! {
    errdefer {
        err_defer.i = 4;
    }
    return_error()!;
}

test "`errdefer` with error propagation" {
    mut err_defer := ErrDefer(i: 0);
    return_and_errdefer(err_defer) catch {};
    @assert(err_defer.i == 4);
}
