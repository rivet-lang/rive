struct ErrDefer {
    mut i: int32;
}

test "`defer` basic" {
    mut a := 1;
    {
        // `defer` must be executed at the end of each scope
        defer a = 2;
        a = 1;
    }
    @assert(a == 2);
    a = 5;
    @assert(a == 5);
}

test "`defer` basic 2" {
    i := 10;
    j := 30;
    mut sum := 0;
    defer @assert(sum == 30);
    defer sum = i + j;
    @assert(sum == 0);
}

import std/console;
func test_defer(five: bool, early_return: bool := false) -> int {
    mut a := 1;
    if five {
        console.writeln("if five");
        defer a = 5;
        if early_return {
            //defer a += 2;
            return a;
        }
    }
    return a;
}

test "`defer` from a call" {
    console.writeln("{}", test_defer(false));
    @assert(test_defer(false) == 1);
    @assert(test_defer(true) == 5);
    @assert(test_defer(true, true) == 1);
}

func test_errdefer(mut err_defer: ErrDefer, err: bool) -> ! {
    defer err_defer.i += 1;
    errdefer err_defer.i += 2;

    if err {
        throw MyError();
    }
}

test "`errdefer` statement" {
    mut err_defer := ErrDefer(i: 0);
    test_errdefer(err_defer, false) catch { };
    @assert(err_defer.i == 1);

    test_errdefer(err_defer, true) catch { };
    @assert(err_defer.i == 4);
}

func throw_error() -> ! {
    throw MyError();
}

func return_and_errdefer(mut err_defer: ErrDefer) -> ! {
    errdefer {
        err_defer.i = 4;
    }
    throw_error()!;
}

test "`errdefer` with error propagation" {
    mut err_defer := ErrDefer(i: 0);
    return_and_errdefer(err_defer) catch {};
    @assert(err_defer.i == 4);
}
