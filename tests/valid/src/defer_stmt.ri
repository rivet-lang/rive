struct ErrDefer {
    mut i: int32;
}

test "`defer` basic" {
    mut a := 1;
    {
        // `defer` must be executed at the end of each scope
        defer a = 2;
        a = 1;
    }
    @assert(a == 2);
    a = 5;
    @assert(a == 5);
}

test "`defer` basic 2" {
    i := 10;
    j := 20;
    mut sum := 0;
    defer @assert(sum == 30);
    defer sum = i + j;
    @assert(sum == 0);
}

test "defer` basic 3" {
    mut sum := 0;
    defer @assert(sum == 3);
    defer sum += 1;
    defer sum += 2;
    if false {
        // should not be executed
        defer sum += 1;
    }
}

proc test_defer_call() -> int {
    mut a := 1;

    {
        defer a = 2;
        a = 1;
    }
    @assert(a == 2);

    a = 5;
    return a;
}

test "`defer` from a call" {
    @assert(test_defer_call() == 5);
}

proc test_defer_error(mut err_defer: ErrDefer, err: bool) -> ! {
    defer err_defer.i += 1;
    defer(error) err_defer.i += 2;

    if err {
        throw MyError();
    }
}

test "`defer(error)` statement" {
    mut err_defer := ErrDefer(i: 0);

    test_defer_error(err_defer, false) catch { };
    @assert(err_defer.i == 1);

    err_defer.i = 0;
    test_defer_error(err_defer, true) catch { };
    @assert(err_defer.i == 3);
}

proc throw_error() -> ! {
    throw MyError();
}

proc throw_and_defer_error(mut err_defer: ErrDefer) -> ! {
    defer(error) err_defer.i = 4;
    throw_error()!;
}

test "`defer(error)` with error propagation" {
    mut err_defer := ErrDefer(i: 0);
    throw_and_defer_error(err_defer) catch {};
    @assert(err_defer.i == 4);
}

test "`defer(success)`" {
    i := 10;
    j := 20;
    mut sum := 0;
    defer @assert(sum == 30);
    defer(success) sum = i + j;
    @assert(sum == 0);
}

proc throw_and_defer_success(mut err_defer: ErrDefer) -> ! {
    // should not run, an error is thrown
    defer(success) {
        err_defer.i += 2;
    }
    defer(error) {
        err_defer.i = 4;
    }
    throw_error()!;
}

test "`defer(success)` with throwed error" {
    mut err_defer := ErrDefer(i: 0);
    throw_and_defer_error(err_defer) catch {};
    @assert(err_defer.i == 4);
}

test "`defer` with `break`" {
    mut a := 0;
    mut i := 0;
    defer @assert(a == 12);
    defer a += 2;
    while i < 20 : i += 1 {
        defer a = 10;
        if i == 10 {
            break;
        }
    }
}
