enum SimpleEnum {
    Abc,
    Def,
    Ghi
}

test "enums: enum literal" {
    mut abc := SimpleEnum.Abc;
    @assert(abc == .Abc);
    abc = .Def;
    @assert(abc == .Def);
}

test "enums: ordinal value" {
    @assert(@as(int32, SimpleEnum.Abc) == 0);
    @assert(@as(int32, SimpleEnum.Def) == 1);
    @assert(@as(int32, SimpleEnum.Ghi) == 2);
}

enum OverridedValue {
    Abc,
    Def = 10,
    Ghi
}

test "enums: overrided ordinal value" {
    @assert(@as(int32, OverridedValue.Abc) == 0);
    @assert(@as(int32, OverridedValue.Def) == 10);
    @assert(@as(int32, OverridedValue.Ghi) == 11);
}

test "enums: enum variant match" {
    abc := SimpleEnum.Abc;
    match abc {
        .Abc -> @assert(true),
        else -> @assert(false)
    }
}

enum AdvancedEnum {
    Abc(int32),
    Def,
    Ghi(rune)
}

test "enums: tagged enum" {
    mut e := AdvancedEnum.Abc(6);
    if e is .Abc {
        @assert(@as(int32, e) == 6);
    }
    if e is .Abc(e_int32) {
        @assert(e_int32 == 6);
    }
    match e {
        .Abc(e_abc) -> @assert(e_abc == 6),
        else -> @assert(false)
    }
    match e {
        .Abc(&mut e_abc2) -> {
            e_abc2.* += 2;
            @assert(e_abc2.* == 8);
        },
        else -> @assert(false)
    }
    e = .Def;
    match e {
        .Def -> @assert(true),
        else -> @assert(false)
    }
}

enum OS {
    Windows {
        version: uint64;
    },
    Linux {
        mut kernel_version: uint32;
        mut distro_name: string;
    }
}

test "enums: tagged enum with fields" {
    mut user_os := OS.Windows(version: 2023_10_04);
    if user_os is .Windows(windows) {
        @assert(windows.version == 2023_10_04);
    }

    user_os = .Linux(kernel_version: 5_16_0, distro_name: "CentOS");
    if user_os is .Linux(&mut linux) {
        @assert(linux.kernel_version == 5_16_0);
        @assert(linux.distro_name == "CentOS");
        linux.kernel_version = 5_12_0;
        linux.distro_name = "Ubuntu";
        @assert(linux.kernel_version == 5_12_0);
        @assert(linux.distro_name == "Ubuntu");
    }
}

#[default_value(.Abc(5))]
enum DefaultValue {
    Abc(int32)
}

struct EnumStruct {
    dv: DefaultValue;
}

test "tagged enums with `default_value` attribute" {
    es := EnumStruct();
    @assert(es.dv is .Abc(int) && int == 5);
}
