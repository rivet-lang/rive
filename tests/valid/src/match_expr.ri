test "`match` expression" {
    @assert(match 1 {
        1 -> true,
        else -> false
    });
}

test "`match` expression as statement" {
    match 1 {
        1 -> @assert(true),
        else -> @assert(false)
    }

    x := 1;
    match x {
        1 -> @assert(true),
        else -> @assert(false)
    }
}

test "`match` branch condition" {
    v := 1;
    x := 5;
    @assert(match v {
        1 if x == 5 -> true,
        else -> false
    });
}

enum MatchBase {
    MatchSon(MatchSon),
    Other(bool)
}

struct MatchSon {
    name: string;
}

test "`match` branch variable" {
    ss := MatchSon(name: "Rivet");
    sb := MatchBase.MatchSon(ss);
    @assert(match sb is {
        .MatchSon(sb_ss) -> sb_ss.name == "Rivet",
        else -> false
    });
}

test "`match` branch with range condition" {
    x := 5;
    @assert(match x {
        1...10 -> true,
        else -> false
    });
    @assert(match x {
        20...30 -> false,
        else -> true
    });
}
