struct Vec {
    x: int32;
    y: int32;

    func +(&self, other: &Self) -> Self {
        return Self(self.x + other.x, self.y + other.y);
    }

    func -(&self, other: &Self) -> Self {
        return Self(self.x - other.x, self.y - other.y);
    }

    func *(&self, other: &Self) -> Self {
        return Self(self.x * other.x, self.y * other.y);
    }

    func /(&self, other: &Self) -> Self {
        return Self(self.x / other.x, self.y / other.y);
    }
}

var vec := Vec(2, 2);

test "overloadable operators: +" {
    mut v1 := vec;
    v1 = v1 + vec;
    @assert(v1.x == 4 && v1.y == 4);
    v1 += vec;
    @assert(v1.x == 6 && v1.y == 6);
}

test "overloadable operators: -" {
    mut v1 := vec;
    v1 = v1 - vec;
    @assert(v1.x == 0 && v1.y == 0);
    v1 += vec;
    @assert(v1.x == 2 && v1.y == 2);
    v1 -= vec;
    @assert(v1.x == 0 && v1.y == 0);
}

test "overloadable operators: *" {
    mut v1 := vec;
    v1 = v1 * vec;
    @assert(v1.x == 4 && v1.y == 4);
    v1 *= vec;
    @assert(v1.x == 8 && v1.y == 8);
}

test "overloadable operators: /" {
    mut v1 := vec;
    v1 = v1 / vec;
    @assert(v1.x == 1 && v1.y == 1);
    v1 += vec;
    @assert(v1.x == 3 && v1.y == 3);
    v1 /= vec;
    @assert(v1.x == 1 && v1.y == 1);
}
