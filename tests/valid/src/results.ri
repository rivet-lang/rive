struct MyError < Throwable {
    msg: string;

    pub func to_string(&self) -> string {
        return self.msg;
    }
}

func result() -> ! {
    throw MyError("simple error");
}

func result2() -> ! {
    throw MyError("simple error (throwed: {}, idx: {})".fmt(true, 0));
}

func result3() -> !int32 {
    return 5;
}

var resultValue := result3()!;

test "propagate result in `var` declaration" {
    @assert(resultValue == 5);
}

test "catch result error" {
    result() catch |err| {
        @assert(err is MyError);
        @assert(err.to_string() == "simple error");
    };

    result2() catch |err2| {
        @assert(err2 is MyError);
        @assert(err2.to_string() == "simple error (throwed: true, idx: 0)");
    };
}

enum IOError < Throwable {
    FileNotFound(string),
    InvalidFileSize {
        path: string;
        size: uint;
    };

    pub func to_string(self) -> string {
        return match self is {
            .FileNotFound(path) -> "file not found: {}".fmt(path),
            .InvalidFileSize(ifsz) -> "invalid file size for {} (size: {})".fmt(
                ifsz.path, ifsz.size
            )
        };
    }
}

test "using a Throwable enum with Stringable trait" {
    throw_io_error("a.txt", false) catch |err| @assert(
        err.to_string() == "file not found: a.txt"
    );
    throw_io_error("b.txt", true) catch |err2| @assert(
        err2.to_string() == "invalid file size for b.txt (size: 2004)"
    );
}

func throw_io_error(path: string, check_size: bool) -> ! {
    throw if check_size {
        IOError.InvalidFileSize(path, 2004)
    } else {
        IOError.FileNotFound(path)
    };
}
