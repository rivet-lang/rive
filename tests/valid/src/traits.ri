trait Reader {
    func read(+self) -> uint8;
}

trait Writer {
    func write(+self, b: uint8) -> bool;
}

trait ReaderWriter < Reader, Writer {
    func write_and_read(+self, b: uint8) -> uint8;
}

struct SomeStream < ReaderWriter {
    pub func read(&self) -> uint8 {
        _ = self;
        return 'A';
    }

    pub func write(&self, _b: uint8) -> bool {
        _ = self;
        return true;
    }

    pub func write_and_read(&self, b: uint8) -> uint8 {
        _ = self.write(b);
        return self.read();
    }
}

func writer(w: +Writer) -> bool {
    return w.write('A');
}

func reader(r: +Reader) -> uint8 {
    return r.read();
}

func reader_writer(rw: +ReaderWriter) -> uint8 {
    return rw.write_and_read('A');
}

test "traits: inheritance" {
    ss := SomeStream();
    @assert(writer(ss));
    @assert(reader(ss) == 'A');
    @assert(reader_writer(ss) == 'A');
}

trait Eq {
    x: string;

    func equal(+self, x: +Self) -> bool;

    func nequal(+self, x: +Self) -> bool {
        return !self.equal(x);
    }
}

#[boxed]
struct Poketrait < Eq {
    pub func equal(+self, x: +Eq) -> bool {
        return self.x == x.x;
    }
}

func ship(a: +Eq, b: +Eq) -> bool {
    return !a.nequal(b);
}

test "traits: default method" {
    @assert(ship( Poketrait("Shell"), Poketrait("Shell") ));
}

#[default_value(IntegerValue(5))]
trait Integer {}

struct IntegerValue {
    int: int32;
}

struct IntegerStruct {
    i: +Integer;
}

test "traits with `default_value` attribute" {
    is_ := IntegerStruct();
    @assert(is_.i is IntegerValue(int_v) && int_v.int == 5);
}
